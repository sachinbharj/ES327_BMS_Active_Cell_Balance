
ES327_BMS_Active_Balance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0ac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ddc  0800d290  0800d290  0001d290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e06c  0800e06c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e06c  0800e06c  0001e06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e074  0800e074  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e074  0800e074  0001e074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e078  0800e078  0001e078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e07c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  200001e0  0800e25c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  0800e25c  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cfb4  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b91  00000000  00000000  0003d1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  00040d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  00042498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b0f8  00000000  00000000  00043a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cf98  00000000  00000000  0006eb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001150c1  00000000  00000000  0008bac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a0b81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007488  00000000  00000000  001a0bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d274 	.word	0x0800d274

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800d274 	.word	0x0800d274

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <active_balance_trigger>:

//extern float soc_values[NOC]; // Access SOC values from main.c
extern float mean_soc; // Access mean SOC from main.c

void active_balance_trigger()
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	printf("\n             ----------------------\n");
 8000fa0:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <active_balance_trigger+0x28>)
 8000fa2:	f009 fe09 	bl	800abb8 <puts>
	printf("             Active Balancing Triggered!\n");
 8000fa6:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <active_balance_trigger+0x2c>)
 8000fa8:	f009 fe06 	bl	800abb8 <puts>

	detect_imbalanced_cell();
 8000fac:	f000 f810 	bl	8000fd0 <detect_imbalanced_cell>

	printf("------------------------------------------------------\n");
 8000fb0:	4806      	ldr	r0, [pc, #24]	; (8000fcc <active_balance_trigger+0x30>)
 8000fb2:	f009 fe01 	bl	800abb8 <puts>

	HAL_Delay(2000);
 8000fb6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fba:	f002 f9e1 	bl	8003380 <HAL_Delay>
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	0800d290 	.word	0x0800d290
 8000fc8:	0800d2b8 	.word	0x0800d2b8
 8000fcc:	0800d2e4 	.word	0x0800d2e4

08000fd0 <detect_imbalanced_cell>:


void detect_imbalanced_cell()
{
 8000fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af02      	add	r7, sp, #8
	int most_imbalanced_index = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
	float max_deviation = 0.0;
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]

	// Find the cell with the largest deviation from the mean SOC
	for (int i = 0; i < NOC; i++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	e01e      	b.n	8001024 <detect_imbalanced_cell+0x54>
	{
		float deviation = fabs(soc_values[i] - mean_soc);
 8000fe6:	4a3b      	ldr	r2, [pc, #236]	; (80010d4 <detect_imbalanced_cell+0x104>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	ed93 7a00 	vldr	s14, [r3]
 8000ff2:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <detect_imbalanced_cell+0x108>)
 8000ff4:	edd3 7a00 	vldr	s15, [r3]
 8000ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ffc:	eef0 7ae7 	vabs.f32	s15, s15
 8001000:	edc7 7a00 	vstr	s15, [r7]
		if (deviation > max_deviation)
 8001004:	ed97 7a00 	vldr	s14, [r7]
 8001008:	edd7 7a02 	vldr	s15, [r7, #8]
 800100c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001014:	dd03      	ble.n	800101e <detect_imbalanced_cell+0x4e>
		{
			max_deviation = deviation;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	60bb      	str	r3, [r7, #8]
			most_imbalanced_index = i;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < NOC; i++)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3301      	adds	r3, #1
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b05      	cmp	r3, #5
 8001028:	dddd      	ble.n	8000fe6 <detect_imbalanced_cell+0x16>
		}
	}

	// Determine if cell is overcharged or undercharged
	if (soc_values[most_imbalanced_index] > mean_soc)
 800102a:	4a2a      	ldr	r2, [pc, #168]	; (80010d4 <detect_imbalanced_cell+0x104>)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	ed93 7a00 	vldr	s14, [r3]
 8001036:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <detect_imbalanced_cell+0x108>)
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001044:	dd1f      	ble.n	8001086 <detect_imbalanced_cell+0xb6>
	{
		printf("Cell %d is OVERCHARGED (%.1f%% SOC, Mean: %.1f%%)\n", NOC - most_imbalanced_index, soc_values[most_imbalanced_index], mean_soc);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f1c3 0606 	rsb	r6, r3, #6
 800104c:	4a21      	ldr	r2, [pc, #132]	; (80010d4 <detect_imbalanced_cell+0x104>)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa9e 	bl	8000598 <__aeabi_f2d>
 800105c:	4604      	mov	r4, r0
 800105e:	460d      	mov	r5, r1
 8001060:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <detect_imbalanced_cell+0x108>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fa97 	bl	8000598 <__aeabi_f2d>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	e9cd 2300 	strd	r2, r3, [sp]
 8001072:	4622      	mov	r2, r4
 8001074:	462b      	mov	r3, r5
 8001076:	4631      	mov	r1, r6
 8001078:	4818      	ldr	r0, [pc, #96]	; (80010dc <detect_imbalanced_cell+0x10c>)
 800107a:	f009 fd17 	bl	800aaac <iprintf>
		balance_overcharged_cell(most_imbalanced_index);
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f000 f850 	bl	8001124 <balance_overcharged_cell>
 8001084:	e01e      	b.n	80010c4 <detect_imbalanced_cell+0xf4>
	} else
	{
		printf("Cell %d is UNDERCHARGED (SOC: %.1f%%, Mean: %.1f%%)\n", NOC - most_imbalanced_index, soc_values[most_imbalanced_index], mean_soc);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1c3 0606 	rsb	r6, r3, #6
 800108c:	4a11      	ldr	r2, [pc, #68]	; (80010d4 <detect_imbalanced_cell+0x104>)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fa7e 	bl	8000598 <__aeabi_f2d>
 800109c:	4604      	mov	r4, r0
 800109e:	460d      	mov	r5, r1
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <detect_imbalanced_cell+0x108>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa77 	bl	8000598 <__aeabi_f2d>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	e9cd 2300 	strd	r2, r3, [sp]
 80010b2:	4622      	mov	r2, r4
 80010b4:	462b      	mov	r3, r5
 80010b6:	4631      	mov	r1, r6
 80010b8:	4809      	ldr	r0, [pc, #36]	; (80010e0 <detect_imbalanced_cell+0x110>)
 80010ba:	f009 fcf7 	bl	800aaac <iprintf>
		balance_undercharged_cell(most_imbalanced_index);
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f000 f810 	bl	80010e4 <balance_undercharged_cell>
	}

	HAL_Delay(1000);
 80010c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c8:	f002 f95a 	bl	8003380 <HAL_Delay>
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010d4:	200004b0 	.word	0x200004b0
 80010d8:	200004c8 	.word	0x200004c8
 80010dc:	0800d31c 	.word	0x0800d31c
 80010e0:	0800d350 	.word	0x0800d350

080010e4 <balance_undercharged_cell>:


void balance_undercharged_cell(int cell_index)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	int cell_number = NOC - cell_index;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f1c3 0306 	rsb	r3, r3, #6
 80010f2:	60fb      	str	r3, [r7, #12]

	printf("\n********** BALANCING UNDERCHARGED CELL %d **********\n", cell_number);
 80010f4:	68f9      	ldr	r1, [r7, #12]
 80010f6:	4809      	ldr	r0, [pc, #36]	; (800111c <balance_undercharged_cell+0x38>)
 80010f8:	f009 fcd8 	bl	800aaac <iprintf>

	enable_cell_path(cell_number);
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f001 fc8f 	bl	8002a20 <enable_cell_path>

	flyback_1A_balance();
 8001102:	f000 fa6d 	bl	80015e0 <flyback_1A_balance>

	terminate_flyback();
 8001106:	f000 fb29 	bl	800175c <terminate_flyback>

	switch_matrix_reset();
 800110a:	f001 fd73 	bl	8002bf4 <switch_matrix_reset>

	printf("\n********** UNDERCHARGE BALANCING COMPLETED **********\n");
 800110e:	4804      	ldr	r0, [pc, #16]	; (8001120 <balance_undercharged_cell+0x3c>)
 8001110:	f009 fd52 	bl	800abb8 <puts>
}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	0800d388 	.word	0x0800d388
 8001120:	0800d3c0 	.word	0x0800d3c0

08001124 <balance_overcharged_cell>:


void balance_overcharged_cell(int cell_index)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	int cell_number = NOC - cell_index;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f1c3 0306 	rsb	r3, r3, #6
 8001132:	60bb      	str	r3, [r7, #8]

	printf("\n********** BALANCING OVERCHARGED CELL %d **********\n", cell_number);
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	4813      	ldr	r0, [pc, #76]	; (8001184 <balance_overcharged_cell+0x60>)
 8001138:	f009 fcb8 	bl	800aaac <iprintf>

	for (int i = 1; i <= NOC; i++)
 800113c:	2301      	movs	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	e015      	b.n	800116e <balance_overcharged_cell+0x4a>
	{
		if (i == cell_number) // Skip overcharged cell
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	429a      	cmp	r2, r3
 8001148:	d00d      	beq.n	8001166 <balance_overcharged_cell+0x42>
			continue;

		printf("Balancing Cell %d...\n", i);
 800114a:	68f9      	ldr	r1, [r7, #12]
 800114c:	480e      	ldr	r0, [pc, #56]	; (8001188 <balance_overcharged_cell+0x64>)
 800114e:	f009 fcad 	bl	800aaac <iprintf>

		enable_cell_path(i);
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f001 fc64 	bl	8002a20 <enable_cell_path>

		flyback_1A_balance();
 8001158:	f000 fa42 	bl	80015e0 <flyback_1A_balance>

		terminate_flyback();
 800115c:	f000 fafe 	bl	800175c <terminate_flyback>

		switch_matrix_reset();
 8001160:	f001 fd48 	bl	8002bf4 <switch_matrix_reset>
 8001164:	e000      	b.n	8001168 <balance_overcharged_cell+0x44>
			continue;
 8001166:	bf00      	nop
	for (int i = 1; i <= NOC; i++)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3301      	adds	r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2b06      	cmp	r3, #6
 8001172:	dde6      	ble.n	8001142 <balance_overcharged_cell+0x1e>
	}

	printf("\n********** OVERCHARGE BALANCING COMPLETED **********\n");
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <balance_overcharged_cell+0x68>)
 8001176:	f009 fd1f 	bl	800abb8 <puts>
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	0800d3f8 	.word	0x0800d3f8
 8001188:	0800d430 	.word	0x0800d430
 800118c:	0800d448 	.word	0x0800d448

08001190 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08c      	sub	sp, #48	; 0x30
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2220      	movs	r2, #32
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f009 f80d 	bl	800a1c8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011ae:	4b32      	ldr	r3, [pc, #200]	; (8001278 <MX_ADC1_Init+0xe8>)
 80011b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 80011b6:	4b30      	ldr	r3, [pc, #192]	; (8001278 <MX_ADC1_Init+0xe8>)
 80011b8:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 80011bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011be:	4b2e      	ldr	r3, [pc, #184]	; (8001278 <MX_ADC1_Init+0xe8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c4:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <MX_ADC1_Init+0xe8>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80011ca:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <MX_ADC1_Init+0xe8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011d0:	4b29      	ldr	r3, [pc, #164]	; (8001278 <MX_ADC1_Init+0xe8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d6:	4b28      	ldr	r3, [pc, #160]	; (8001278 <MX_ADC1_Init+0xe8>)
 80011d8:	2204      	movs	r2, #4
 80011da:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011dc:	4b26      	ldr	r3, [pc, #152]	; (8001278 <MX_ADC1_Init+0xe8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <MX_ADC1_Init+0xe8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80011e8:	4b23      	ldr	r3, [pc, #140]	; (8001278 <MX_ADC1_Init+0xe8>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ee:	4b22      	ldr	r3, [pc, #136]	; (8001278 <MX_ADC1_Init+0xe8>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <MX_ADC1_Init+0xe8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <MX_ADC1_Init+0xe8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001202:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_ADC1_Init+0xe8>)
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_ADC1_Init+0xe8>)
 800120c:	2200      	movs	r2, #0
 800120e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MX_ADC1_Init+0xe8>)
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001218:	4817      	ldr	r0, [pc, #92]	; (8001278 <MX_ADC1_Init+0xe8>)
 800121a:	f002 fb39 	bl	8003890 <HAL_ADC_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001224:	f000 ff86 	bl	8002134 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	4619      	mov	r1, r3
 8001232:	4811      	ldr	r0, [pc, #68]	; (8001278 <MX_ADC1_Init+0xe8>)
 8001234:	f003 feea 	bl	800500c <HAL_ADCEx_MultiModeConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800123e:	f000 ff79 	bl	8002134 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_ADC1_Init+0xec>)
 8001244:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001246:	2306      	movs	r3, #6
 8001248:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800124e:	237f      	movs	r3, #127	; 0x7f
 8001250:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001252:	2304      	movs	r3, #4
 8001254:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <MX_ADC1_Init+0xe8>)
 8001260:	f003 f824 	bl	80042ac <HAL_ADC_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800126a:	f000 ff63 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	3730      	adds	r7, #48	; 0x30
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200001fc 	.word	0x200001fc
 800127c:	14f00020 	.word	0x14f00020

08001280 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001286:	463b      	mov	r3, r7
 8001288:	2220      	movs	r2, #32
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f008 ff9b 	bl	800a1c8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001292:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <MX_ADC2_Init+0xc0>)
 8001294:	4a2b      	ldr	r2, [pc, #172]	; (8001344 <MX_ADC2_Init+0xc4>)
 8001296:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8001298:	4b29      	ldr	r3, [pc, #164]	; (8001340 <MX_ADC2_Init+0xc0>)
 800129a:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 800129e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <MX_ADC2_Init+0xc0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a6:	4b26      	ldr	r3, [pc, #152]	; (8001340 <MX_ADC2_Init+0xc0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <MX_ADC2_Init+0xc0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012b2:	4b23      	ldr	r3, [pc, #140]	; (8001340 <MX_ADC2_Init+0xc0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <MX_ADC2_Init+0xc0>)
 80012ba:	2204      	movs	r2, #4
 80012bc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <MX_ADC2_Init+0xc0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <MX_ADC2_Init+0xc0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80012ca:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <MX_ADC2_Init+0xc0>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <MX_ADC2_Init+0xc0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <MX_ADC2_Init+0xc0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012de:	4b18      	ldr	r3, [pc, #96]	; (8001340 <MX_ADC2_Init+0xc0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <MX_ADC2_Init+0xc0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <MX_ADC2_Init+0xc0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <MX_ADC2_Init+0xc0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012fa:	4811      	ldr	r0, [pc, #68]	; (8001340 <MX_ADC2_Init+0xc0>)
 80012fc:	f002 fac8 	bl	8003890 <HAL_ADC_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001306:	f000 ff15 	bl	8002134 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <MX_ADC2_Init+0xc8>)
 800130c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800130e:	2306      	movs	r3, #6
 8001310:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001316:	237f      	movs	r3, #127	; 0x7f
 8001318:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800131a:	2304      	movs	r3, #4
 800131c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001322:	463b      	mov	r3, r7
 8001324:	4619      	mov	r1, r3
 8001326:	4806      	ldr	r0, [pc, #24]	; (8001340 <MX_ADC2_Init+0xc0>)
 8001328:	f002 ffc0 	bl	80042ac <HAL_ADC_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001332:	f000 feff 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	3720      	adds	r7, #32
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000268 	.word	0x20000268
 8001344:	50000100 	.word	0x50000100
 8001348:	1d500080 	.word	0x1d500080

0800134c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b0a0      	sub	sp, #128	; 0x80
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001364:	f107 0318 	add.w	r3, r7, #24
 8001368:	2254      	movs	r2, #84	; 0x54
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f008 ff2b 	bl	800a1c8 <memset>
  if(adcHandle->Instance==ADC1)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800137a:	d171      	bne.n	8001460 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800137c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001380:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001382:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001386:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	4618      	mov	r0, r3
 800138e:	f005 fb1b 	bl	80069c8 <HAL_RCCEx_PeriphCLKConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001398:	f000 fecc 	bl	8002134 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800139c:	4b6d      	ldr	r3, [pc, #436]	; (8001554 <HAL_ADC_MspInit+0x208>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	4a6c      	ldr	r2, [pc, #432]	; (8001554 <HAL_ADC_MspInit+0x208>)
 80013a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013a6:	4b6b      	ldr	r3, [pc, #428]	; (8001554 <HAL_ADC_MspInit+0x208>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d10b      	bne.n	80013c6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013ae:	4b6a      	ldr	r3, [pc, #424]	; (8001558 <HAL_ADC_MspInit+0x20c>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	4a69      	ldr	r2, [pc, #420]	; (8001558 <HAL_ADC_MspInit+0x20c>)
 80013b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ba:	4b67      	ldr	r3, [pc, #412]	; (8001558 <HAL_ADC_MspInit+0x20c>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	4b64      	ldr	r3, [pc, #400]	; (8001558 <HAL_ADC_MspInit+0x20c>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	4a63      	ldr	r2, [pc, #396]	; (8001558 <HAL_ADC_MspInit+0x20c>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d2:	4b61      	ldr	r3, [pc, #388]	; (8001558 <HAL_ADC_MspInit+0x20c>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = PACK_I_ADC_Pin;
 80013de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e4:	2303      	movs	r3, #3
 80013e6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(PACK_I_ADC_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013f0:	4619      	mov	r1, r3
 80013f2:	485a      	ldr	r0, [pc, #360]	; (800155c <HAL_ADC_MspInit+0x210>)
 80013f4:	f004 fb54 	bl	8005aa0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013f8:	4b59      	ldr	r3, [pc, #356]	; (8001560 <HAL_ADC_MspInit+0x214>)
 80013fa:	4a5a      	ldr	r2, [pc, #360]	; (8001564 <HAL_ADC_MspInit+0x218>)
 80013fc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80013fe:	4b58      	ldr	r3, [pc, #352]	; (8001560 <HAL_ADC_MspInit+0x214>)
 8001400:	2205      	movs	r2, #5
 8001402:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001404:	4b56      	ldr	r3, [pc, #344]	; (8001560 <HAL_ADC_MspInit+0x214>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800140a:	4b55      	ldr	r3, [pc, #340]	; (8001560 <HAL_ADC_MspInit+0x214>)
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001410:	4b53      	ldr	r3, [pc, #332]	; (8001560 <HAL_ADC_MspInit+0x214>)
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001416:	4b52      	ldr	r3, [pc, #328]	; (8001560 <HAL_ADC_MspInit+0x214>)
 8001418:	f44f 7280 	mov.w	r2, #256	; 0x100
 800141c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800141e:	4b50      	ldr	r3, [pc, #320]	; (8001560 <HAL_ADC_MspInit+0x214>)
 8001420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001424:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001426:	4b4e      	ldr	r3, [pc, #312]	; (8001560 <HAL_ADC_MspInit+0x214>)
 8001428:	2220      	movs	r2, #32
 800142a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800142c:	4b4c      	ldr	r3, [pc, #304]	; (8001560 <HAL_ADC_MspInit+0x214>)
 800142e:	2200      	movs	r2, #0
 8001430:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001432:	484b      	ldr	r0, [pc, #300]	; (8001560 <HAL_ADC_MspInit+0x214>)
 8001434:	f004 f802 	bl	800543c <HAL_DMA_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800143e:	f000 fe79 	bl	8002134 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a46      	ldr	r2, [pc, #280]	; (8001560 <HAL_ADC_MspInit+0x214>)
 8001446:	655a      	str	r2, [r3, #84]	; 0x54
 8001448:	4a45      	ldr	r2, [pc, #276]	; (8001560 <HAL_ADC_MspInit+0x214>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2012      	movs	r0, #18
 8001454:	f003 ffbd 	bl	80053d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001458:	2012      	movs	r0, #18
 800145a:	f003 ffd4 	bl	8005406 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800145e:	e074      	b.n	800154a <HAL_ADC_MspInit+0x1fe>
  else if(adcHandle->Instance==ADC2)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a40      	ldr	r2, [pc, #256]	; (8001568 <HAL_ADC_MspInit+0x21c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d16f      	bne.n	800154a <HAL_ADC_MspInit+0x1fe>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800146a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800146e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001470:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001474:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001476:	f107 0318 	add.w	r3, r7, #24
 800147a:	4618      	mov	r0, r3
 800147c:	f005 faa4 	bl	80069c8 <HAL_RCCEx_PeriphCLKConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 8001486:	f000 fe55 	bl	8002134 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800148a:	4b32      	ldr	r3, [pc, #200]	; (8001554 <HAL_ADC_MspInit+0x208>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	3301      	adds	r3, #1
 8001490:	4a30      	ldr	r2, [pc, #192]	; (8001554 <HAL_ADC_MspInit+0x208>)
 8001492:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001494:	4b2f      	ldr	r3, [pc, #188]	; (8001554 <HAL_ADC_MspInit+0x208>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d10b      	bne.n	80014b4 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800149c:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <HAL_ADC_MspInit+0x20c>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	4a2d      	ldr	r2, [pc, #180]	; (8001558 <HAL_ADC_MspInit+0x20c>)
 80014a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <HAL_ADC_MspInit+0x20c>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b4:	4b28      	ldr	r3, [pc, #160]	; (8001558 <HAL_ADC_MspInit+0x20c>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	4a27      	ldr	r2, [pc, #156]	; (8001558 <HAL_ADC_MspInit+0x20c>)
 80014ba:	f043 0304 	orr.w	r3, r3, #4
 80014be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <HAL_ADC_MspInit+0x20c>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FLY_OUT_I_ADC_Pin;
 80014cc:	2302      	movs	r3, #2
 80014ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d0:	2303      	movs	r3, #3
 80014d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(FLY_OUT_I_ADC_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014dc:	4619      	mov	r1, r3
 80014de:	4823      	ldr	r0, [pc, #140]	; (800156c <HAL_ADC_MspInit+0x220>)
 80014e0:	f004 fade 	bl	8005aa0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <HAL_ADC_MspInit+0x224>)
 80014e6:	4a23      	ldr	r2, [pc, #140]	; (8001574 <HAL_ADC_MspInit+0x228>)
 80014e8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <HAL_ADC_MspInit+0x224>)
 80014ec:	2224      	movs	r2, #36	; 0x24
 80014ee:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <HAL_ADC_MspInit+0x224>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_ADC_MspInit+0x224>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80014fc:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <HAL_ADC_MspInit+0x224>)
 80014fe:	2280      	movs	r2, #128	; 0x80
 8001500:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_ADC_MspInit+0x224>)
 8001504:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001508:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_ADC_MspInit+0x224>)
 800150c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001510:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_ADC_MspInit+0x224>)
 8001514:	2220      	movs	r2, #32
 8001516:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_ADC_MspInit+0x224>)
 800151a:	2200      	movs	r2, #0
 800151c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <HAL_ADC_MspInit+0x224>)
 8001520:	f003 ff8c 	bl	800543c <HAL_DMA_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_ADC_MspInit+0x1e2>
      Error_Handler();
 800152a:	f000 fe03 	bl	8002134 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <HAL_ADC_MspInit+0x224>)
 8001532:	655a      	str	r2, [r3, #84]	; 0x54
 8001534:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_ADC_MspInit+0x224>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2012      	movs	r0, #18
 8001540:	f003 ff47 	bl	80053d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001544:	2012      	movs	r0, #18
 8001546:	f003 ff5e 	bl	8005406 <HAL_NVIC_EnableIRQ>
}
 800154a:	bf00      	nop
 800154c:	3780      	adds	r7, #128	; 0x80
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000394 	.word	0x20000394
 8001558:	40021000 	.word	0x40021000
 800155c:	48000400 	.word	0x48000400
 8001560:	200002d4 	.word	0x200002d4
 8001564:	40020008 	.word	0x40020008
 8001568:	50000100 	.word	0x50000100
 800156c:	48000800 	.word	0x48000800
 8001570:	20000334 	.word	0x20000334
 8001574:	4002001c 	.word	0x4002001c

08001578 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_DMA_Init+0x60>)
 8001580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001582:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <MX_DMA_Init+0x60>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6493      	str	r3, [r2, #72]	; 0x48
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <MX_DMA_Init+0x60>)
 800158c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <MX_DMA_Init+0x60>)
 8001598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800159a:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <MX_DMA_Init+0x60>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6493      	str	r3, [r2, #72]	; 0x48
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <MX_DMA_Init+0x60>)
 80015a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	200b      	movs	r0, #11
 80015b4:	f003 ff0d 	bl	80053d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015b8:	200b      	movs	r0, #11
 80015ba:	f003 ff24 	bl	8005406 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	200c      	movs	r0, #12
 80015c4:	f003 ff05 	bl	80053d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80015c8:	200c      	movs	r0, #12
 80015ca:	f003 ff1c 	bl	8005406 <HAL_NVIC_EnableIRQ>

}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000
 80015dc:	00000000 	.word	0x00000000

080015e0 <flyback_1A_balance>:
uint16_t balancing_current_ADC[1];
uint8_t buffer_ADC[32];  // Buffer for transmitting data


void flyback_1A_balance()
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af02      	add	r7, sp, #8
	int duty_cycle_1A = 28;
 80015e6:	231c      	movs	r3, #28
 80015e8:	60fb      	str	r3, [r7, #12]

	printf("\n********** Flyback Converter Activated **********\n");
 80015ea:	4829      	ldr	r0, [pc, #164]	; (8001690 <flyback_1A_balance+0xb0>)
 80015ec:	f009 fae4 	bl	800abb8 <puts>
	TIM1->CCR1 = duty_cycle_1A;
 80015f0:	4a28      	ldr	r2, [pc, #160]	; (8001694 <flyback_1A_balance+0xb4>)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015f6:	2100      	movs	r1, #0
 80015f8:	4827      	ldr	r0, [pc, #156]	; (8001698 <flyback_1A_balance+0xb8>)
 80015fa:	f005 fc8b 	bl	8006f14 <HAL_TIM_PWM_Start>

	HAL_Delay(1000);
 80015fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001602:	f001 febd 	bl	8003380 <HAL_Delay>

	// Feedback loop to adjust PWM duty cycle for 1A output
	for (int i = 0; i < 5; i++)
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	e031      	b.n	8001670 <flyback_1A_balance+0x90>
	{
		float balancing_current = read_balancing_current();
 800160c:	f000 f848 	bl	80016a0 <read_balancing_current>
 8001610:	ed87 0a01 	vstr	s0, [r7, #4]

		printf("Balancing Current: %.2f A | PWM Duty Cycle: %d%%\n", balancing_current, duty_cycle_1A);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7fe ffbf 	bl	8000598 <__aeabi_f2d>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	68f9      	ldr	r1, [r7, #12]
 8001620:	9100      	str	r1, [sp, #0]
 8001622:	481e      	ldr	r0, [pc, #120]	; (800169c <flyback_1A_balance+0xbc>)
 8001624:	f009 fa42 	bl	800aaac <iprintf>

		if (balancing_current < 0.96)
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7fe ffb5 	bl	8000598 <__aeabi_f2d>
 800162e:	a314      	add	r3, pc, #80	; (adr r3, 8001680 <flyback_1A_balance+0xa0>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7ff fa7a 	bl	8000b2c <__aeabi_dcmplt>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <flyback_1A_balance+0x66>
		{
			duty_cycle_1A += 1;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3301      	adds	r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	e00d      	b.n	8001662 <flyback_1A_balance+0x82>
		} else if (balancing_current > 1.04)
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7fe ffa6 	bl	8000598 <__aeabi_f2d>
 800164c:	a30e      	add	r3, pc, #56	; (adr r3, 8001688 <flyback_1A_balance+0xa8>)
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	f7ff fa89 	bl	8000b68 <__aeabi_dcmpgt>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <flyback_1A_balance+0x82>
		{
			duty_cycle_1A -=1;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3b01      	subs	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
		}

		HAL_Delay(1000);
 8001662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001666:	f001 fe8b 	bl	8003380 <HAL_Delay>
	for (int i = 0; i < 5; i++)
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	3301      	adds	r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	2b04      	cmp	r3, #4
 8001674:	ddca      	ble.n	800160c <flyback_1A_balance+0x2c>
	}

}
 8001676:	bf00      	nop
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	eb851eb8 	.word	0xeb851eb8
 8001684:	3feeb851 	.word	0x3feeb851
 8001688:	0a3d70a4 	.word	0x0a3d70a4
 800168c:	3ff0a3d7 	.word	0x3ff0a3d7
 8001690:	0800d480 	.word	0x0800d480
 8001694:	40012c00 	.word	0x40012c00
 8001698:	200004d4 	.word	0x200004d4
 800169c:	0800d4b4 	.word	0x0800d4b4

080016a0 <read_balancing_current>:

}


float read_balancing_current()
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
	uint16_t balancing_current_ADC[1];
	float current;

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80016a6:	217f      	movs	r1, #127	; 0x7f
 80016a8:	4829      	ldr	r0, [pc, #164]	; (8001750 <read_balancing_current+0xb0>)
 80016aa:	f003 fc1b 	bl	8004ee4 <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)&balancing_current_ADC, 1);
 80016ae:	463b      	mov	r3, r7
 80016b0:	2201      	movs	r2, #1
 80016b2:	4619      	mov	r1, r3
 80016b4:	4826      	ldr	r0, [pc, #152]	; (8001750 <read_balancing_current+0xb0>)
 80016b6:	f002 faa7 	bl	8003c08 <HAL_ADC_Start_DMA>

	balancing_current_ADC_voltage = ((float)(*balancing_current_ADC) / 4096.0) * 3.3;
 80016ba:	883b      	ldrh	r3, [r7, #0]
 80016bc:	ee07 3a90 	vmov	s15, r3
 80016c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016c4:	ee17 0a90 	vmov	r0, s15
 80016c8:	f7fe ff66 	bl	8000598 <__aeabi_f2d>
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <read_balancing_current+0xb4>)
 80016d2:	f7ff f8e3 	bl	800089c <__aeabi_ddiv>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	a318      	add	r3, pc, #96	; (adr r3, 8001740 <read_balancing_current+0xa0>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe ffb0 	bl	8000648 <__aeabi_dmul>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f7ff fa82 	bl	8000bf8 <__aeabi_d2f>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a18      	ldr	r2, [pc, #96]	; (8001758 <read_balancing_current+0xb8>)
 80016f8:	6013      	str	r3, [r2, #0]

	current = (balancing_current_ADC_voltage / 20) / 0.005; // change to 0.005 ohms, 20 is gain
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <read_balancing_current+0xb8>)
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001704:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001708:	ee16 0a90 	vmov	r0, s13
 800170c:	f7fe ff44 	bl	8000598 <__aeabi_f2d>
 8001710:	a30d      	add	r3, pc, #52	; (adr r3, 8001748 <read_balancing_current+0xa8>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	f7ff f8c1 	bl	800089c <__aeabi_ddiv>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f7ff fa69 	bl	8000bf8 <__aeabi_d2f>
 8001726:	4603      	mov	r3, r0
 8001728:	607b      	str	r3, [r7, #4]

	return current;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	ee07 3a90 	vmov	s15, r3
}
 8001730:	eeb0 0a67 	vmov.f32	s0, s15
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	f3af 8000 	nop.w
 8001740:	66666666 	.word	0x66666666
 8001744:	400a6666 	.word	0x400a6666
 8001748:	47ae147b 	.word	0x47ae147b
 800174c:	3f747ae1 	.word	0x3f747ae1
 8001750:	20000268 	.word	0x20000268
 8001754:	40b00000 	.word	0x40b00000
 8001758:	20000398 	.word	0x20000398

0800175c <terminate_flyback>:


void terminate_flyback()
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001760:	2100      	movs	r1, #0
 8001762:	4806      	ldr	r0, [pc, #24]	; (800177c <terminate_flyback+0x20>)
 8001764:	f005 fce8 	bl	8007138 <HAL_TIM_PWM_Stop>
	printf("PWM Terminated!\n");
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <terminate_flyback+0x24>)
 800176a:	f009 fa25 	bl	800abb8 <puts>

	HAL_Delay(500);
 800176e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001772:	f001 fe05 	bl	8003380 <HAL_Delay>
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200004d4 	.word	0x200004d4
 8001780:	0800d540 	.word	0x0800d540

08001784 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	4b4c      	ldr	r3, [pc, #304]	; (80018cc <MX_GPIO_Init+0x148>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	4a4b      	ldr	r2, [pc, #300]	; (80018cc <MX_GPIO_Init+0x148>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a6:	4b49      	ldr	r3, [pc, #292]	; (80018cc <MX_GPIO_Init+0x148>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017b2:	4b46      	ldr	r3, [pc, #280]	; (80018cc <MX_GPIO_Init+0x148>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	4a45      	ldr	r2, [pc, #276]	; (80018cc <MX_GPIO_Init+0x148>)
 80017b8:	f043 0320 	orr.w	r3, r3, #32
 80017bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017be:	4b43      	ldr	r3, [pc, #268]	; (80018cc <MX_GPIO_Init+0x148>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	f003 0320 	and.w	r3, r3, #32
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	4b40      	ldr	r3, [pc, #256]	; (80018cc <MX_GPIO_Init+0x148>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	4a3f      	ldr	r2, [pc, #252]	; (80018cc <MX_GPIO_Init+0x148>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d6:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <MX_GPIO_Init+0x148>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <MX_GPIO_Init+0x148>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	4a39      	ldr	r2, [pc, #228]	; (80018cc <MX_GPIO_Init+0x148>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ee:	4b37      	ldr	r3, [pc, #220]	; (80018cc <MX_GPIO_Init+0x148>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MCU_SW_MOS2_Pin|MCU_SW_MOS3_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	210c      	movs	r1, #12
 80017fe:	4834      	ldr	r0, [pc, #208]	; (80018d0 <MX_GPIO_Init+0x14c>)
 8001800:	f004 fad0 	bl	8005da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IC_WAKEUP_Pin|PACK_ENABLE_Pin|LD2_Pin|MCU_SW_MOS7_Pin
 8001804:	2200      	movs	r2, #0
 8001806:	f648 21f1 	movw	r1, #35569	; 0x8af1
 800180a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180e:	f004 fac9 	bl	8005da4 <HAL_GPIO_WritePin>
                          |MCU_SW_MOS8_Pin|MCU_SW_MOS1_Pin|MCU_SW_MOS11_Pin|MCU_SW_MOS4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_SW_MOS9_Pin|MCU_SW_MOS10_Pin|MCU_SW_MOS5_Pin|MCU_SW_MOS6_Pin, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	f640 4103 	movw	r1, #3075	; 0xc03
 8001818:	482e      	ldr	r0, [pc, #184]	; (80018d4 <MX_GPIO_Init+0x150>)
 800181a:	f004 fac3 	bl	8005da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800181e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001824:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	4826      	ldr	r0, [pc, #152]	; (80018d0 <MX_GPIO_Init+0x14c>)
 8001836:	f004 f933 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MCU_SW_MOS2_Pin|MCU_SW_MOS3_Pin;
 800183a:	230c      	movs	r3, #12
 800183c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001842:	2302      	movs	r3, #2
 8001844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	481f      	ldr	r0, [pc, #124]	; (80018d0 <MX_GPIO_Init+0x14c>)
 8001852:	f004 f925 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IC_WAKEUP_Pin|PACK_ENABLE_Pin|MCU_SW_MOS7_Pin|MCU_SW_MOS8_Pin
 8001856:	f648 23d1 	movw	r3, #35537	; 0x8ad1
 800185a:	617b      	str	r3, [r7, #20]
                          |MCU_SW_MOS1_Pin|MCU_SW_MOS11_Pin|MCU_SW_MOS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185c:	2301      	movs	r3, #1
 800185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001860:	2302      	movs	r3, #2
 8001862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4619      	mov	r1, r3
 800186e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001872:	f004 f915 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001876:	2320      	movs	r3, #32
 8001878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2301      	movs	r3, #1
 800187c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001890:	f004 f906 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_SW_MOS9_Pin|MCU_SW_MOS10_Pin|MCU_SW_MOS5_Pin|MCU_SW_MOS6_Pin;
 8001894:	f640 4303 	movw	r3, #3075	; 0xc03
 8001898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189a:	2301      	movs	r3, #1
 800189c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800189e:	2302      	movs	r3, #2
 80018a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	4809      	ldr	r0, [pc, #36]	; (80018d4 <MX_GPIO_Init+0x150>)
 80018ae:	f004 f8f7 	bl	8005aa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	2028      	movs	r0, #40	; 0x28
 80018b8:	f003 fd8b 	bl	80053d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018bc:	2028      	movs	r0, #40	; 0x28
 80018be:	f003 fda2 	bl	8005406 <HAL_NVIC_EnableIRQ>

}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	; 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000
 80018d0:	48000800 	.word	0x48000800
 80018d4:	48000400 	.word	0x48000400

080018d8 <init_chip>:

/** @brief  Function to initialise the cell monitor IC
  *         - Configures fault registers, voltage thresholds, pack configuration and auto-addressing
  */
void init_chip()
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af02      	add	r7, sp, #8
    printf("IC initialisation\n"); // Print initialisation message to serial monitor
 80018de:	486a      	ldr	r0, [pc, #424]	; (8001a88 <init_chip+0x1b0>)
 80018e0:	f009 f96a 	bl	800abb8 <puts>

	// Mask and clear IC fault registers
	WriteReg(0, 107, 0x8000, 2, FRMWRT_SGL_NR); // Mask chip FAULT
 80018e4:	2310      	movs	r3, #16
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	2302      	movs	r3, #2
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	216b      	movs	r1, #107	; 0x6b
 80018f6:	2000      	movs	r0, #0
 80018f8:	f000 fcee 	bl	80022d8 <WriteReg>
	WriteReg(0, 82, 0xFFC0, 2, FRMWRT_SGL_NR); // Clear fault summary flags
 80018fc:	2310      	movs	r3, #16
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	2302      	movs	r3, #2
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	2152      	movs	r1, #82	; 0x52
 800190e:	2000      	movs	r0, #0
 8001910:	f000 fce2 	bl	80022d8 <WriteReg>
	WriteReg(0, 81, 0x38, 1, FRMWRT_SGL_NR); // Clear system status fault flags
 8001914:	2310      	movs	r3, #16
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	2301      	movs	r3, #1
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	f04f 0238 	mov.w	r2, #56	; 0x38
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	2151      	movs	r1, #81	; 0x51
 8001926:	2000      	movs	r0, #0
 8001928:	f000 fcd6 	bl	80022d8 <WriteReg>

	// Set cell over-voltage and cell under-voltage thresholds (also later done in print_cell_voltages() function)
	WriteReg(0, 144, 0xD1EC, 2, FRMWRT_SGL_NR); // set OV threshold = 4.1000V
 800192c:	2310      	movs	r3, #16
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	2302      	movs	r3, #2
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	f24d 12ec 	movw	r2, #53740	; 0xd1ec
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	2190      	movs	r1, #144	; 0x90
 800193e:	2000      	movs	r0, #0
 8001940:	f000 fcca 	bl	80022d8 <WriteReg>
	WriteReg(0, 142, 0x6148, 2, FRMWRT_SGL_NR); // set UV threshold = 1.9000V
 8001944:	2310      	movs	r3, #16
 8001946:	9301      	str	r3, [sp, #4]
 8001948:	2302      	movs	r3, #2
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	f246 1248 	movw	r2, #24904	; 0x6148
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	218e      	movs	r1, #142	; 0x8e
 8001956:	2000      	movs	r0, #0
 8001958:	f000 fcbe 	bl	80022d8 <WriteReg>

	// Auto-address all boards
	WriteReg(0, 14, 0x38, 1, FRMWRT_ALL_NR); // Set auto-address mode, internal regulator NPN disabled
 800195c:	2370      	movs	r3, #112	; 0x70
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	2301      	movs	r3, #1
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	f04f 0238 	mov.w	r2, #56	; 0x38
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	210e      	movs	r1, #14
 800196e:	2000      	movs	r0, #0
 8001970:	f000 fcb2 	bl	80022d8 <WriteReg>
	WriteReg(0, 12, 0x08, 1, FRMWRT_ALL_NR); // Enter auto-address mode
 8001974:	2370      	movs	r3, #112	; 0x70
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	2301      	movs	r3, #1
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	f04f 0208 	mov.w	r2, #8
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	210c      	movs	r1, #12
 8001986:	2000      	movs	r0, #0
 8001988:	f000 fca6 	bl	80022d8 <WriteReg>

	WriteReg(0, 16, 0x1080, 2, FRMWRT_SGL_NR);	// Enable single-end communication
 800198c:	2310      	movs	r3, #16
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	2302      	movs	r3, #2
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	f44f 5284 	mov.w	r2, #4224	; 0x1080
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	2110      	movs	r1, #16
 800199e:	2000      	movs	r0, #0
 80019a0:	f000 fc9a 	bl	80022d8 <WriteReg>

	delayms(10); // 10ms delay for settings to take effect
 80019a4:	200a      	movs	r0, #10
 80019a6:	f000 ffa1 	bl	80028ec <delayms>

	WriteReg(0, 60, 0x00, 1, FRMWRT_SGL_NR); // Set 0 mux delay
 80019aa:	2310      	movs	r3, #16
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	2301      	movs	r3, #1
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	213c      	movs	r1, #60	; 0x3c
 80019bc:	2000      	movs	r0, #0
 80019be:	f000 fc8b 	bl	80022d8 <WriteReg>
	WriteReg(0, 61, 0x00, 1, FRMWRT_SGL_NR); // Set 0 initial delay
 80019c2:	2310      	movs	r3, #16
 80019c4:	9301      	str	r3, [sp, #4]
 80019c6:	2301      	movs	r3, #1
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	213d      	movs	r1, #61	; 0x3d
 80019d4:	2000      	movs	r0, #0
 80019d6:	f000 fc7f 	bl	80022d8 <WriteReg>
	WriteReg(0, 62, 0xCC, 1, FRMWRT_SGL_NR); // Set 99.92us ADC sampling period
 80019da:	2310      	movs	r3, #16
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	2301      	movs	r3, #1
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	f04f 02cc 	mov.w	r2, #204	; 0xcc
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	213e      	movs	r1, #62	; 0x3e
 80019ec:	2000      	movs	r0, #0
 80019ee:	f000 fc73 	bl	80022d8 <WriteReg>
	WriteReg(0, 7, 0x00, 1, FRMWRT_SGL_NR); // Set no oversampling period
 80019f2:	2310      	movs	r3, #16
 80019f4:	9301      	str	r3, [sp, #4]
 80019f6:	2301      	movs	r3, #1
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	2107      	movs	r1, #7
 8001a04:	2000      	movs	r0, #0
 8001a06:	f000 fc67 	bl	80022d8 <WriteReg>

	// Select number of cells to sample
	WriteReg(0, 13, 0x06, 1, FRMWRT_SGL_NR); // Set number of cells to 6
 8001a0a:	2310      	movs	r3, #16
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	f04f 0206 	mov.w	r2, #6
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	210d      	movs	r1, #13
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f000 fc5b 	bl	80022d8 <WriteReg>
	WriteReg(0, 3, 0x003F0000, 4, FRMWRT_SGL_NR); // Enable 6 cell voltage measurements only
 8001a22:	2310      	movs	r3, #16
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	2304      	movs	r3, #4
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	f44f 127c 	mov.w	r2, #4128768	; 0x3f0000
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	2103      	movs	r1, #3
 8001a34:	2000      	movs	r0, #0
 8001a36:	f000 fc4f 	bl	80022d8 <WriteReg>

	WriteReg(0, 107, 0x8000, 2, FRMWRT_SGL_NR); // Mask chip FAULT
 8001a3a:	2310      	movs	r3, #16
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	2302      	movs	r3, #2
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	216b      	movs	r1, #107	; 0x6b
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f000 fc43 	bl	80022d8 <WriteReg>
	WriteReg(0, 82, 0xFFC0, 2, FRMWRT_ALL_NR); // clear all fault summary flags
 8001a52:	2370      	movs	r3, #112	; 0x70
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	2302      	movs	r3, #2
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	2152      	movs	r1, #82	; 0x52
 8001a64:	2000      	movs	r0, #0
 8001a66:	f000 fc37 	bl	80022d8 <WriteReg>
	WriteReg(0, 81, 0x38, 1, FRMWRT_ALL_NR); // clear fault flags in the system status register
 8001a6a:	2370      	movs	r3, #112	; 0x70
 8001a6c:	9301      	str	r3, [sp, #4]
 8001a6e:	2301      	movs	r3, #1
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	f04f 0238 	mov.w	r2, #56	; 0x38
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	2151      	movs	r1, #81	; 0x51
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f000 fc2b 	bl	80022d8 <WriteReg>
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	0800d550 	.word	0x0800d550

08001a8c <_write>:

/**
  * @brief  Function to redirect printf() output to serial monitor via UART 1
  */
int _write(int file, char *ptr, int len)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&hlpuart1, (uint8_t*) ptr, len, 100); // transmit over UART 1 (USB port)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	2364      	movs	r3, #100	; 0x64
 8001a9e:	68b9      	ldr	r1, [r7, #8]
 8001aa0:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <_write+0x24>)
 8001aa2:	f006 fa77 	bl	8007f94 <HAL_UART_Transmit>
    return len;
 8001aa6:	687b      	ldr	r3, [r7, #4]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000520 	.word	0x20000520

08001ab4 <req_cell_volt>:

/**
  * @brief  Function to request cell voltage readings from the monitoring IC
  */
void req_cell_volt()
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af02      	add	r7, sp, #8
	WriteReg(0, 2, 0x01, 1, FRMWRT_SGL_R); // Send command to IC to request voltage readings
 8001aba:	2300      	movs	r3, #0
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	2301      	movs	r3, #1
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	f04f 0201 	mov.w	r2, #1
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	2102      	movs	r1, #2
 8001acc:	2000      	movs	r0, #0
 8001ace:	f000 fc03 	bl	80022d8 <WriteReg>
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  Callback function for handling external GPIO interrupts
 * 		   - Function triggered for external GPIO interrupt (use button press)
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) // If user blue button is pressed
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ae8:	d10e      	bne.n	8001b08 <HAL_GPIO_EXTI_Callback+0x30>
	{
		button_press = 1; // Set button press flag
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x38>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, PACK_ENABLE_Pin, GPIO_PIN_SET); // Close pack relay
 8001af0:	2201      	movs	r2, #1
 8001af2:	2110      	movs	r1, #16
 8001af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af8:	f004 f954 	bl	8005da4 <HAL_GPIO_WritePin>
		printf("Pack relay closed...\n"); // Print message to serial monitor
 8001afc:	4805      	ldr	r0, [pc, #20]	; (8001b14 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001afe:	f009 f85b 	bl	800abb8 <puts>
		printf("---------------------\n"); // Print line break for readability
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x40>)
 8001b04:	f009 f858 	bl	800abb8 <puts>
	}
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	2000048c 	.word	0x2000048c
 8001b14:	0800d564 	.word	0x0800d564
 8001b18:	0800d57c 	.word	0x0800d57c

08001b1c <HAL_UART_RxCpltCallback>:
/**
 * @brief  Callback function for handling UART reception completion
 *         - Function triggered to process data once UART receives a complete frame
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, recFrame, 15); // Re-enable UART receive interrupt for continuous data reception
 8001b24:	220f      	movs	r2, #15
 8001b26:	4904      	ldr	r1, [pc, #16]	; (8001b38 <HAL_UART_RxCpltCallback+0x1c>)
 8001b28:	4804      	ldr	r0, [pc, #16]	; (8001b3c <HAL_UART_RxCpltCallback+0x20>)
 8001b2a:	f006 fac1 	bl	80080b0 <HAL_UART_Receive_IT>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000039c 	.word	0x2000039c
 8001b3c:	200005b4 	.word	0x200005b4

08001b40 <fault_flag_status>:

/**
 * @brief  Checks if a critical fault has been detected and takes necessary action
 */
void fault_flag_status()
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	if (fault_status) // Check fault status flag
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <fault_flag_status+0x28>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00b      	beq.n	8001b64 <fault_flag_status+0x24>
	{
		printf("CRITICAL Fault Detected! Relay Opened ... Program Terminated\n"); // Print error message
 8001b4c:	4807      	ldr	r0, [pc, #28]	; (8001b6c <fault_flag_status+0x2c>)
 8001b4e:	f009 f833 	bl	800abb8 <puts>
		HAL_GPIO_WritePin(GPIOA, PACK_ENABLE_Pin, GPIO_PIN_RESET); // Open pack relay (disable relay GPIO)
 8001b52:	2200      	movs	r2, #0
 8001b54:	2110      	movs	r1, #16
 8001b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5a:	f004 f923 	bl	8005da4 <HAL_GPIO_WritePin>
		exit(1); // Terminate program execution, microcontroller must be reset to restart
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f008 fafa 	bl	800a158 <exit>
	}
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000488 	.word	0x20000488
 8001b6c:	0800d594 	.word	0x0800d594

08001b70 <print_cell_voltages>:
/**
 * @brief  Print cell voltages and SOC values to the serial monitor
 * 		   - Also check for under/overvoltage and update fault status flag
 */
void print_cell_voltages()
{
 8001b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af02      	add	r7, sp, #8
	printf("\n**************** MONITORING STATUS ****************\n"); // Print message for readability
 8001b76:	484e      	ldr	r0, [pc, #312]	; (8001cb0 <print_cell_voltages+0x140>)
 8001b78:	f009 f81e 	bl	800abb8 <puts>

	for (int i = 0; i < NOC; i++) // Iterate through all monitored cells
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	e08c      	b.n	8001c9c <print_cell_voltages+0x12c>
	{
		soc_values[i] = volt_to_soc(volt[i]); // Convert voltage reading to SOC (see molicel_soc_lookup.c)
 8001b82:	4a4c      	ldr	r2, [pc, #304]	; (8001cb4 <print_cell_voltages+0x144>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b92:	f000 fad5 	bl	8002140 <volt_to_soc>
 8001b96:	ee07 0a90 	vmov	s15, r0
 8001b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9e:	4a46      	ldr	r2, [pc, #280]	; (8001cb8 <print_cell_voltages+0x148>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	edc3 7a00 	vstr	s15, [r3]

		printf( "Cell %d Voltage: %.3fV | SOC = %.1f%%\n", NOC - i, volt[i], soc_values[i]); // Print cell voltages 1 to 6
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f1c3 0606 	rsb	r6, r3, #6
 8001bb0:	4a40      	ldr	r2, [pc, #256]	; (8001cb4 <print_cell_voltages+0x144>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fcec 	bl	8000598 <__aeabi_f2d>
 8001bc0:	4604      	mov	r4, r0
 8001bc2:	460d      	mov	r5, r1
 8001bc4:	4a3c      	ldr	r2, [pc, #240]	; (8001cb8 <print_cell_voltages+0x148>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fce2 	bl	8000598 <__aeabi_f2d>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	e9cd 2300 	strd	r2, r3, [sp]
 8001bdc:	4622      	mov	r2, r4
 8001bde:	462b      	mov	r3, r5
 8001be0:	4631      	mov	r1, r6
 8001be2:	4836      	ldr	r0, [pc, #216]	; (8001cbc <print_cell_voltages+0x14c>)
 8001be4:	f008 ff62 	bl	800aaac <iprintf>

		if (volt[i] > overvolt_thresh) // If cell voltage is greater than overvoltage threshold
 8001be8:	4a32      	ldr	r2, [pc, #200]	; (8001cb4 <print_cell_voltages+0x144>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	edd3 7a00 	vldr	s15, [r3]
 8001bf4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001cc0 <print_cell_voltages+0x150>
 8001bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c00:	dd1e      	ble.n	8001c40 <print_cell_voltages+0xd0>
		{
			printf("Cell %d OVERVOLTAGE ERROR: %.3fV (Threshold: %.1fV)\n", NOC - i, volt[i], overvolt_thresh); // Print error message
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f1c3 0606 	rsb	r6, r3, #6
 8001c08:	4a2a      	ldr	r2, [pc, #168]	; (8001cb4 <print_cell_voltages+0x144>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fcc0 	bl	8000598 <__aeabi_f2d>
 8001c18:	4604      	mov	r4, r0
 8001c1a:	460d      	mov	r5, r1
 8001c1c:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <print_cell_voltages+0x154>)
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fcba 	bl	8000598 <__aeabi_f2d>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	e9cd 2300 	strd	r2, r3, [sp]
 8001c2c:	4622      	mov	r2, r4
 8001c2e:	462b      	mov	r3, r5
 8001c30:	4631      	mov	r1, r6
 8001c32:	4825      	ldr	r0, [pc, #148]	; (8001cc8 <print_cell_voltages+0x158>)
 8001c34:	f008 ff3a 	bl	800aaac <iprintf>
			fault_status = 1; // Update fault status flag
 8001c38:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <print_cell_voltages+0x15c>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e02a      	b.n	8001c96 <print_cell_voltages+0x126>
		} else if (volt[i] < undervolt_thresh) {
 8001c40:	4a1c      	ldr	r2, [pc, #112]	; (8001cb4 <print_cell_voltages+0x144>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8001c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c58:	d51d      	bpl.n	8001c96 <print_cell_voltages+0x126>
			printf("Cell %d UNDERVOLTAGE ERROR: %.3fV (Threshold: %.1fV)\n", NOC - i, volt[i], undervolt_thresh); // Print error message
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f1c3 0606 	rsb	r6, r3, #6
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <print_cell_voltages+0x144>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc94 	bl	8000598 <__aeabi_f2d>
 8001c70:	4604      	mov	r4, r0
 8001c72:	460d      	mov	r5, r1
 8001c74:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <print_cell_voltages+0x160>)
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fc8e 	bl	8000598 <__aeabi_f2d>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	e9cd 2300 	strd	r2, r3, [sp]
 8001c84:	4622      	mov	r2, r4
 8001c86:	462b      	mov	r3, r5
 8001c88:	4631      	mov	r1, r6
 8001c8a:	4812      	ldr	r0, [pc, #72]	; (8001cd4 <print_cell_voltages+0x164>)
 8001c8c:	f008 ff0e 	bl	800aaac <iprintf>
			fault_status = 1; // Update fault status flag
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <print_cell_voltages+0x15c>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NOC; i++) // Iterate through all monitored cells
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b05      	cmp	r3, #5
 8001ca0:	f77f af6f 	ble.w	8001b82 <print_cell_voltages+0x12>
		}
	}
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	0800d5d4 	.word	0x0800d5d4
 8001cb4:	20000490 	.word	0x20000490
 8001cb8:	200004b0 	.word	0x200004b0
 8001cbc:	0800d60c 	.word	0x0800d60c
 8001cc0:	40866666 	.word	0x40866666
 8001cc4:	40866666 	.word	0x40866666
 8001cc8:	0800d634 	.word	0x0800d634
 8001ccc:	20000488 	.word	0x20000488
 8001cd0:	40200000 	.word	0x40200000
 8001cd4:	0800d66c 	.word	0x0800d66c

08001cd8 <measure_pack_current>:

/**
 * @brief  Measure pack current using an ADC reading
 */
void measure_pack_current()
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
	if (button_press) // If button_press flag is set to 1 (from interrupt)
 8001cdc:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <measure_pack_current+0xb0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d049      	beq.n	8001d78 <measure_pack_current+0xa0>
	{
		HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED); // Calibrate ADC1
 8001ce4:	217f      	movs	r1, #127	; 0x7f
 8001ce6:	4829      	ldr	r0, [pc, #164]	; (8001d8c <measure_pack_current+0xb4>)
 8001ce8:	f003 f8fc 	bl	8004ee4 <HAL_ADCEx_Calibration_Start>

		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&pack_current_ADC, 1); // Start ADC conversion via direct memory allocation (DMA)
 8001cec:	2201      	movs	r2, #1
 8001cee:	4928      	ldr	r1, [pc, #160]	; (8001d90 <measure_pack_current+0xb8>)
 8001cf0:	4826      	ldr	r0, [pc, #152]	; (8001d8c <measure_pack_current+0xb4>)
 8001cf2:	f001 ff89 	bl	8003c08 <HAL_ADC_Start_DMA>

		pack_ADC_voltage = ((float)(*pack_current_ADC) / 4096.0) * 3.3; // Calculate voltage: 4096 for 12-bit, 3.3 for STM32 input range
 8001cf6:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <measure_pack_current+0xb8>)
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d02:	ee17 0a90 	vmov	r0, s15
 8001d06:	f7fe fc47 	bl	8000598 <__aeabi_f2d>
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <measure_pack_current+0xbc>)
 8001d10:	f7fe fdc4 	bl	800089c <__aeabi_ddiv>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	a318      	add	r3, pc, #96	; (adr r3, 8001d80 <measure_pack_current+0xa8>)
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	f7fe fc91 	bl	8000648 <__aeabi_dmul>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe ff63 	bl	8000bf8 <__aeabi_d2f>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4a18      	ldr	r2, [pc, #96]	; (8001d98 <measure_pack_current+0xc0>)
 8001d36:	6013      	str	r3, [r2, #0]

		pack_current = pack_ADC_voltage / 0.5; // Calculate pack current in Amps (20V/V gain from current sense amplifier)
 8001d38:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <measure_pack_current+0xc0>)
 8001d3a:	ed93 7a00 	vldr	s14, [r3]
 8001d3e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001d42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <measure_pack_current+0xc4>)
 8001d48:	edc3 7a00 	vstr	s15, [r3]

		sprintf((char*)buffer, "\n************* Pack current: %.3fA\r *************\n", pack_current); // Store pack_current in UART buffer
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <measure_pack_current+0xc4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fc21 	bl	8000598 <__aeabi_f2d>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4911      	ldr	r1, [pc, #68]	; (8001da0 <measure_pack_current+0xc8>)
 8001d5c:	4811      	ldr	r0, [pc, #68]	; (8001da4 <measure_pack_current+0xcc>)
 8001d5e:	f008 ff33 	bl	800abc8 <siprintf>
		HAL_UART_Transmit(&hlpuart1, buffer, strlen((char*)buffer), HAL_MAX_DELAY); // Transmit to serial monitor via UART 1
 8001d62:	4810      	ldr	r0, [pc, #64]	; (8001da4 <measure_pack_current+0xcc>)
 8001d64:	f7fe fa5c 	bl	8000220 <strlen>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d70:	490c      	ldr	r1, [pc, #48]	; (8001da4 <measure_pack_current+0xcc>)
 8001d72:	480d      	ldr	r0, [pc, #52]	; (8001da8 <measure_pack_current+0xd0>)
 8001d74:	f006 f90e 	bl	8007f94 <HAL_UART_Transmit>
	}
}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	f3af 8000 	nop.w
 8001d80:	66666666 	.word	0x66666666
 8001d84:	400a6666 	.word	0x400a6666
 8001d88:	2000048c 	.word	0x2000048c
 8001d8c:	200001fc 	.word	0x200001fc
 8001d90:	20000420 	.word	0x20000420
 8001d94:	40b00000 	.word	0x40b00000
 8001d98:	200004a8 	.word	0x200004a8
 8001d9c:	200004ac 	.word	0x200004ac
 8001da0:	0800d6a4 	.word	0x0800d6a4
 8001da4:	20000424 	.word	0x20000424
 8001da8:	20000520 	.word	0x20000520

08001dac <pack_overcurrent_check>:

/**
 * @brief  Check if the pack current exceeds the predefined threshold
 */
void pack_overcurrent_check()
{
 8001dac:	b5b0      	push	{r4, r5, r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af02      	add	r7, sp, #8
	if (pack_current > current_thresh) // If measured current is greater than threshold (set to 1A)
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <pack_overcurrent_check+0x54>)
 8001db4:	edd3 7a00 	vldr	s15, [r3]
 8001db8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc4:	dc00      	bgt.n	8001dc8 <pack_overcurrent_check+0x1c>
	{
		printf("PACK OVERCURRENT ERROR: %.3fA (Threshold: %.1fA)\n", pack_current, current_thresh); // Print error message
		fault_status = 1; // Set fault flag to 1
	}
}
 8001dc6:	e017      	b.n	8001df8 <pack_overcurrent_check+0x4c>
		printf("PACK OVERCURRENT ERROR: %.3fA (Threshold: %.1fA)\n", pack_current, current_thresh); // Print error message
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <pack_overcurrent_check+0x54>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fbe3 	bl	8000598 <__aeabi_f2d>
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	460d      	mov	r5, r1
 8001dd6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fbdc 	bl	8000598 <__aeabi_f2d>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	e9cd 2300 	strd	r2, r3, [sp]
 8001de8:	4622      	mov	r2, r4
 8001dea:	462b      	mov	r3, r5
 8001dec:	4805      	ldr	r0, [pc, #20]	; (8001e04 <pack_overcurrent_check+0x58>)
 8001dee:	f008 fe5d 	bl	800aaac <iprintf>
		fault_status = 1; // Set fault flag to 1
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <pack_overcurrent_check+0x5c>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	601a      	str	r2, [r3, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200004ac 	.word	0x200004ac
 8001e04:	0800d6d8 	.word	0x0800d6d8
 8001e08:	20000488 	.word	0x20000488

08001e0c <check_first_reading>:
 * @brief  Skips the first reading from the cell monitor IC
 *         - First reading is always invalid (returns 0)
 *         - Triggers undervoltage fault even when not present
 */
int check_first_reading(int *first_reading)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	if (*first_reading) // Check if first reading flag is set
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00b      	beq.n	8001e34 <check_first_reading+0x28>
	{
		*first_reading = 0; // Clear flag to indicate first reading has been handled
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
		printf("Skipping initial invalid readings...\n"); // Print status message
 8001e22:	4807      	ldr	r0, [pc, #28]	; (8001e40 <check_first_reading+0x34>)
 8001e24:	f008 fec8 	bl	800abb8 <puts>
		HAL_Delay(500); // 500ms delay for system stabilisation
 8001e28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e2c:	f001 faa8 	bl	8003380 <HAL_Delay>
		return 1; // Indicate to skip this iteration of while loop
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <check_first_reading+0x2a>
	}
	return 0; // Proceed normally with the next while loop iteration
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	0800d70c 	.word	0x0800d70c

08001e44 <HAL_ADC_ConvCpltCallback>:

/**
 * @brief  Callback function required for ADC conversion
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) // callback for ADC DMA
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <compute_soc_stats>:

/**
 * @brief  Compute mean and standard deviation of the values across all cells
] */
void compute_soc_stats()
{
 8001e58:	b5b0      	push	{r4, r5, r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af02      	add	r7, sp, #8
	float soc_sum = 0.0; // Initialise variable for sum of SOCs and set to 0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
	float sum_sq = 0.0; // Initialise variable for sum of squared differences and set to 0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]

	// Compute the sum of all SOC values
	for (int i = 0; i < NOC; i++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	e00e      	b.n	8001e8e <compute_soc_stats+0x36>
	{
		soc_sum += soc_values[i];
 8001e70:	4a39      	ldr	r2, [pc, #228]	; (8001f58 <compute_soc_stats+0x100>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e84:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < NOC; i++)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	dded      	ble.n	8001e70 <compute_soc_stats+0x18>
	}

	mean_soc = soc_sum / NOC; // Calculate mean SOC
 8001e94:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e98:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001e9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ea0:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <compute_soc_stats+0x104>)
 8001ea2:	edc3 7a00 	vstr	s15, [r3]

	// Compute sum of squared differences from the mean
	for (int i = 0; i < NOC; i++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	e020      	b.n	8001eee <compute_soc_stats+0x96>
	{
		sum_sq += (soc_values[i] - mean_soc) * (soc_values[i] - mean_soc);
 8001eac:	4a2a      	ldr	r2, [pc, #168]	; (8001f58 <compute_soc_stats+0x100>)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	ed93 7a00 	vldr	s14, [r3]
 8001eb8:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <compute_soc_stats+0x104>)
 8001eba:	edd3 7a00 	vldr	s15, [r3]
 8001ebe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ec2:	4a25      	ldr	r2, [pc, #148]	; (8001f58 <compute_soc_stats+0x100>)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	edd3 6a00 	vldr	s13, [r3]
 8001ece:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <compute_soc_stats+0x104>)
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001edc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee4:	edc7 7a02 	vstr	s15, [r7, #8]
	for (int i = 0; i < NOC; i++)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	3301      	adds	r3, #1
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b05      	cmp	r3, #5
 8001ef2:	dddb      	ble.n	8001eac <compute_soc_stats+0x54>
	}

	// Compute standard deviation
	std_dev_soc = sqrt(sum_sq / NOC); // Square root of sum of squared differences divided by number of cells (6)
 8001ef4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ef8:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001efc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f00:	ee16 0a90 	vmov	r0, s13
 8001f04:	f7fe fb48 	bl	8000598 <__aeabi_f2d>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	ec43 2b10 	vmov	d0, r2, r3
 8001f10:	f00b f8d2 	bl	800d0b8 <sqrt>
 8001f14:	ec53 2b10 	vmov	r2, r3, d0
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f7fe fe6c 	bl	8000bf8 <__aeabi_d2f>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <compute_soc_stats+0x108>)
 8001f24:	6013      	str	r3, [r2, #0]

	printf("\n***** SOC Mean: %.2f%% | Standard Deviation: %.2f%% *****\n", mean_soc, std_dev_soc); // Print calculated statistics
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <compute_soc_stats+0x104>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fb34 	bl	8000598 <__aeabi_f2d>
 8001f30:	4604      	mov	r4, r0
 8001f32:	460d      	mov	r5, r1
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <compute_soc_stats+0x108>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fb2d 	bl	8000598 <__aeabi_f2d>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	e9cd 2300 	strd	r2, r3, [sp]
 8001f46:	4622      	mov	r2, r4
 8001f48:	462b      	mov	r3, r5
 8001f4a:	4806      	ldr	r0, [pc, #24]	; (8001f64 <compute_soc_stats+0x10c>)
 8001f4c:	f008 fdae 	bl	800aaac <iprintf>
}
 8001f50:	bf00      	nop
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bdb0      	pop	{r4, r5, r7, pc}
 8001f58:	200004b0 	.word	0x200004b0
 8001f5c:	200004c8 	.word	0x200004c8
 8001f60:	200004cc 	.word	0x200004cc
 8001f64:	0800d734 	.word	0x0800d734

08001f68 <assess_equalisation>:

/**
 * @brief  Evaluate whether balancing is required based on SOC standard deviation
 */
void assess_equalisation()
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af02      	add	r7, sp, #8
	printf("\n              ---------------------\n"); // Print line break for readability
 8001f6e:	481a      	ldr	r0, [pc, #104]	; (8001fd8 <assess_equalisation+0x70>)
 8001f70:	f008 fe22 	bl	800abb8 <puts>
	printf("\n**************** BALANCING STATUS ****************\n");
 8001f74:	4819      	ldr	r0, [pc, #100]	; (8001fdc <assess_equalisation+0x74>)
 8001f76:	f008 fe1f 	bl	800abb8 <puts>
	if (std_dev_soc > STD_DEV_SOC_THRESH) // If calculated std dev is greater than predefined threshold (5%)
 8001f7a:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <assess_equalisation+0x78>)
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8c:	dd11      	ble.n	8001fb2 <assess_equalisation+0x4a>
	{
		printf("Balancing Needed - SOC Std Dev: %.2f%% (Threshold: %.2f%%)\n", std_dev_soc, STD_DEV_SOC_THRESH); // Balancing required message
 8001f8e:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <assess_equalisation+0x78>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fb00 	bl	8000598 <__aeabi_f2d>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	f04f 0000 	mov.w	r0, #0
 8001fa0:	4910      	ldr	r1, [pc, #64]	; (8001fe4 <assess_equalisation+0x7c>)
 8001fa2:	e9cd 0100 	strd	r0, r1, [sp]
 8001fa6:	4810      	ldr	r0, [pc, #64]	; (8001fe8 <assess_equalisation+0x80>)
 8001fa8:	f008 fd80 	bl	800aaac <iprintf>

		active_balance_trigger(); // Trigger active balancing mechanisms (see active_balancing.c)
 8001fac:	f7fe fff6 	bl	8000f9c <active_balance_trigger>
	} else {
		printf("No Balancing Needed - SOC Std Dev: %.2f%% (Threshold: %.2f%%)\n", std_dev_soc, STD_DEV_SOC_THRESH); // Print no balancing required message
	}
}
 8001fb0:	e00e      	b.n	8001fd0 <assess_equalisation+0x68>
		printf("No Balancing Needed - SOC Std Dev: %.2f%% (Threshold: %.2f%%)\n", std_dev_soc, STD_DEV_SOC_THRESH); // Print no balancing required message
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <assess_equalisation+0x78>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe faee 	bl	8000598 <__aeabi_f2d>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	f04f 0000 	mov.w	r0, #0
 8001fc4:	4907      	ldr	r1, [pc, #28]	; (8001fe4 <assess_equalisation+0x7c>)
 8001fc6:	e9cd 0100 	strd	r0, r1, [sp]
 8001fca:	4808      	ldr	r0, [pc, #32]	; (8001fec <assess_equalisation+0x84>)
 8001fcc:	f008 fd6e 	bl	800aaac <iprintf>
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	0800d770 	.word	0x0800d770
 8001fdc:	0800d798 	.word	0x0800d798
 8001fe0:	200004cc 	.word	0x200004cc
 8001fe4:	40140000 	.word	0x40140000
 8001fe8:	0800d7cc 	.word	0x0800d7cc
 8001fec:	0800d808 	.word	0x0800d808

08001ff0 <main>:

/**
  * @brief  Main function where program execution begins
  */
int main(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b0a2      	sub	sp, #136	; 0x88
 8001ff4:	af00      	add	r7, sp, #0
	HAL_Init(); // Initialise HAL library
 8001ff6:	f001 f952 	bl	800329e <HAL_Init>

	SystemClock_Config(); // Configure system clock
 8001ffa:	f000 f84f 	bl	800209c <SystemClock_Config>

	// Initialise peripherals
	MX_GPIO_Init(); // GPIOs for IC wakeup & MOSFET switching
 8001ffe:	f7ff fbc1 	bl	8001784 <MX_GPIO_Init>
	MX_DMA_Init(); // DMA to process ADC readings
 8002002:	f7ff fab9 	bl	8001578 <MX_DMA_Init>
	MX_LPUART1_UART_Init(); // LPUART1 for Serial Monitor
 8002006:	f000 ffe9 	bl	8002fdc <MX_LPUART1_UART_Init>
	MX_USART3_UART_Init(); // UART 3 for cell monitor IC communication
 800200a:	f001 f831 	bl	8003070 <MX_USART3_UART_Init>
	MX_ADC1_Init(); // ADC1 for pack current readings
 800200e:	f7ff f8bf 	bl	8001190 <MX_ADC1_Init>
	MX_TIM1_Init(); // Timer for PWM generation
 8002012:	f000 fef9 	bl	8002e08 <MX_TIM1_Init>
	MX_ADC2_Init(); // ADC2 for flyback balancing current output readings
 8002016:	f7ff f933 	bl	8001280 <MX_ADC2_Init>

	// Initialise local variable
	BYTE  bFrame[132]; // Buffer for UART receive from cell monitor IC of length 132 bytes

	powerDown(); // Power down IC initially for soft reset (see pl455.c)
 800201a:	f000 f917 	bl	800224c <powerDown>

	WakePL455(); // Wakeup sequence for IC (see pl455.c)
 800201e:	f000 f92b 	bl	8002278 <WakePL455>

	delayms(100); // Small 100ms delay after wakeup
 8002022:	2064      	movs	r0, #100	; 0x64
 8002024:	f000 fc62 	bl	80028ec <delayms>

	init_chip(); // Initialise IC registers
 8002028:	f7ff fc56 	bl	80018d8 <init_chip>

	HAL_Delay(1000); // Additional 1 second delay for stability
 800202c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002030:	f001 f9a6 	bl	8003380 <HAL_Delay>


	// Infinite loop for continuous monitoring and balancing
	while (1)
	{
		req_cell_volt(); // Request cell voltage readings
 8002034:	f7ff fd3e 	bl	8001ab4 <req_cell_volt>

		ReadResp(bFrame, 15); // Trigger UART receive from IC, 15 bytes of data expected (see pl455.c)
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	210f      	movs	r1, #15
 800203c:	4618      	mov	r0, r3
 800203e:	f000 fbd7 	bl	80027f0 <ReadResp>

		HAL_Delay(10); // Small 10ms delay after receiving data
 8002042:	200a      	movs	r0, #10
 8002044:	f001 f99c 	bl	8003380 <HAL_Delay>

		getcellVoltages(recFrame, NOC, volt); // Extract voltage readings from message and store to volt array (see pl455.c)
 8002048:	4a10      	ldr	r2, [pc, #64]	; (800208c <main+0x9c>)
 800204a:	2106      	movs	r1, #6
 800204c:	4810      	ldr	r0, [pc, #64]	; (8002090 <main+0xa0>)
 800204e:	f000 fbe3 	bl	8002818 <getcellVoltages>

		// Skip processing of first reading as it always returns invalid
		if (check_first_reading(&first_reading)) {
 8002052:	4810      	ldr	r0, [pc, #64]	; (8002094 <main+0xa4>)
 8002054:	f7ff feda 	bl	8001e0c <check_first_reading>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d113      	bne.n	8002086 <main+0x96>
			continue;  // Skip this iteration of the loop
		}

		print_cell_voltages(); // Print cell voltage readings and calculate SOCs, detect under/overvoltage faults
 800205e:	f7ff fd87 	bl	8001b70 <print_cell_voltages>

		compute_soc_stats(); // Compute mean and standard deviation of SOCs
 8002062:	f7ff fef9 	bl	8001e58 <compute_soc_stats>

		measure_pack_current(); // Measure and print pack current
 8002066:	f7ff fe37 	bl	8001cd8 <measure_pack_current>

		pack_overcurrent_check(); // Check for pack overcurrent condition
 800206a:	f7ff fe9f 	bl	8001dac <pack_overcurrent_check>

		fault_flag_status(); // Open relay and terminate program if a fault is detected
 800206e:	f7ff fd67 	bl	8001b40 <fault_flag_status>

		assess_equalisation(); // Determine if balancing is needed, trigger algorithm if needed
 8002072:	f7ff ff79 	bl	8001f68 <assess_equalisation>

		// Print separator for readability before next reading
		printf("\n----------------------------------------------------------------------------------------------------------------------------\n");
 8002076:	4808      	ldr	r0, [pc, #32]	; (8002098 <main+0xa8>)
 8002078:	f008 fd9e 	bl	800abb8 <puts>

		HAL_Delay(2000); // 2 second delay before next iteration
 800207c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002080:	f001 f97e 	bl	8003380 <HAL_Delay>
 8002084:	e7d6      	b.n	8002034 <main+0x44>
			continue;  // Skip this iteration of the loop
 8002086:	bf00      	nop
		req_cell_volt(); // Request cell voltage readings
 8002088:	e7d4      	b.n	8002034 <main+0x44>
 800208a:	bf00      	nop
 800208c:	20000490 	.word	0x20000490
 8002090:	2000039c 	.word	0x2000039c
 8002094:	20000000 	.word	0x20000000
 8002098:	0800d848 	.word	0x0800d848

0800209c <SystemClock_Config>:

/**
 * @brief Configures the system clock settings
 */
void SystemClock_Config(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b094      	sub	sp, #80	; 0x50
 80020a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020a2:	f107 0318 	add.w	r3, r7, #24
 80020a6:	2238      	movs	r2, #56	; 0x38
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f008 f88c 	bl	800a1c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]
 80020bc:	611a      	str	r2, [r3, #16]

  //Configure the main internal regulator output voltage

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80020c2:	f003 fe9f 	bl	8005e04 <HAL_PWREx_ControlVoltageScaling>

  /** Initialise the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020c6:	2302      	movs	r3, #2
 80020c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020d0:	2340      	movs	r3, #64	; 0x40
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020d4:	2302      	movs	r3, #2
 80020d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020d8:	2302      	movs	r3, #2
 80020da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80020dc:	2302      	movs	r3, #2
 80020de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 80020e0:	2319      	movs	r3, #25
 80020e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020e4:	2302      	movs	r3, #2
 80020e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020e8:	2302      	movs	r3, #2
 80020ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020ec:	2302      	movs	r3, #2
 80020ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020f0:	f107 0318 	add.w	r3, r7, #24
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 ff39 	bl	8005f6c <HAL_RCC_OscConfig>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8002100:	f000 f818 	bl	8002134 <Error_Handler>
  }

  /** Initialises the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002104:	230f      	movs	r3, #15
 8002106:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002108:	2303      	movs	r3, #3
 800210a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	2103      	movs	r1, #3
 800211c:	4618      	mov	r0, r3
 800211e:	f004 fa37 	bl	8006590 <HAL_RCC_ClockConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <SystemClock_Config+0x90>
  {
    Error_Handler(); // Call error handler if configuration fails
 8002128:	f000 f804 	bl	8002134 <Error_Handler>
  }
}
 800212c:	bf00      	nop
 800212e:	3750      	adds	r7, #80	; 0x50
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <Error_Handler>:


void Error_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002138:	b672      	cpsid	i
}
 800213a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq(); // Disable all interrupts
  while (1) // Infinite loop to indicate error state
 800213c:	e7fe      	b.n	800213c <Error_Handler+0x8>
	...

08002140 <volt_to_soc>:
#include "molicel_soc_lookup.h"

// Function to find the SOC based on voltage
int volt_to_soc(float voltage) {
 8002140:	b480      	push	{r7}
 8002142:	b089      	sub	sp, #36	; 0x24
 8002144:	af00      	add	r7, sp, #0
 8002146:	ed87 0a01 	vstr	s0, [r7, #4]
    // If voltage is below the lowest threshold, return 0% SOC
    if (voltage <= soc_table[0].voltage) {
 800214a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002240 <volt_to_soc+0x100>
 800214e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215a:	d801      	bhi.n	8002160 <volt_to_soc+0x20>
        return soc_table[0].soc;
 800215c:	2300      	movs	r3, #0
 800215e:	e068      	b.n	8002232 <volt_to_soc+0xf2>
    }
    // If voltage is above the highest threshold, return 100% SOC
    if (voltage >= soc_table[SOC_TABLE_SIZE - 1].voltage) {
 8002160:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002244 <volt_to_soc+0x104>
 8002164:	edd7 7a01 	vldr	s15, [r7, #4]
 8002168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800216c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002170:	db01      	blt.n	8002176 <volt_to_soc+0x36>
        return soc_table[SOC_TABLE_SIZE - 1].soc;
 8002172:	2364      	movs	r3, #100	; 0x64
 8002174:	e05d      	b.n	8002232 <volt_to_soc+0xf2>
    }

    // Perform linear interpolation between two nearest voltage points
    for (int i = 0; i < SOC_TABLE_SIZE - 1; i++) {
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	e055      	b.n	8002228 <volt_to_soc+0xe8>
        if (voltage >= soc_table[i].voltage && voltage <= soc_table[i + 1].voltage) {
 800217c:	4a32      	ldr	r2, [pc, #200]	; (8002248 <volt_to_soc+0x108>)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	ed97 7a01 	vldr	s14, [r7, #4]
 800218c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002194:	db45      	blt.n	8002222 <volt_to_soc+0xe2>
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3301      	adds	r3, #1
 800219a:	4a2b      	ldr	r2, [pc, #172]	; (8002248 <volt_to_soc+0x108>)
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80021a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b0:	d837      	bhi.n	8002222 <volt_to_soc+0xe2>
            float v1 = soc_table[i].voltage;
 80021b2:	4a25      	ldr	r2, [pc, #148]	; (8002248 <volt_to_soc+0x108>)
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	61bb      	str	r3, [r7, #24]
            float v2 = soc_table[i + 1].voltage;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3301      	adds	r3, #1
 80021c2:	4a21      	ldr	r2, [pc, #132]	; (8002248 <volt_to_soc+0x108>)
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	617b      	str	r3, [r7, #20]
            int soc1 = soc_table[i].soc;
 80021cc:	4a1e      	ldr	r2, [pc, #120]	; (8002248 <volt_to_soc+0x108>)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	613b      	str	r3, [r7, #16]
            int soc2 = soc_table[i + 1].soc;
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	3301      	adds	r3, #1
 80021dc:	4a1a      	ldr	r2, [pc, #104]	; (8002248 <volt_to_soc+0x108>)
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	60fb      	str	r3, [r7, #12]

            // Linear interpolation formula
            return soc1 + (int)((voltage - v1) / (v2 - v1) * (soc2 - soc1));
 80021e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80021ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80021ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80021f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80021fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	ee07 3a90 	vmov	s15, r3
 800220c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002214:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002218:	ee17 2a90 	vmov	r2, s15
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	e007      	b.n	8002232 <volt_to_soc+0xf2>
    for (int i = 0; i < SOC_TABLE_SIZE - 1; i++) {
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3301      	adds	r3, #1
 8002226:	61fb      	str	r3, [r7, #28]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	2b15      	cmp	r3, #21
 800222c:	dda6      	ble.n	800217c <volt_to_soc+0x3c>
        }
    }

    // Default case (should never reach here)
    return -1;
 800222e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002232:	4618      	mov	r0, r3
 8002234:	3724      	adds	r7, #36	; 0x24
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40266666 	.word	0x40266666
 8002244:	4086147b 	.word	0x4086147b
 8002248:	0800d998 	.word	0x0800d998

0800224c <powerDown>:

/**
 * @brief  Power down the PL455 monitoring IC
 */
void powerDown(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af02      	add	r7, sp, #8
	HAL_Delay(2000); // 2 second delay
 8002252:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002256:	f001 f893 	bl	8003380 <HAL_Delay>
	WriteReg(0,12,0x40,1,FRMWRT_SGL_NR); // Write to register to power down chip
 800225a:	2310      	movs	r3, #16
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	2301      	movs	r3, #1
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	f04f 0240 	mov.w	r2, #64	; 0x40
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	210c      	movs	r1, #12
 800226c:	2000      	movs	r0, #0
 800226e:	f000 f833 	bl	80022d8 <WriteReg>
}
 8002272:	bf00      	nop
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <WakePL455>:

/**
 * @brief Wake up the PL455 monitoring IC
 */
void WakePL455(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
    printf("Waking IC...\n"); // Print wakeup message to serial monitor
 800227e:	4815      	ldr	r0, [pc, #84]	; (80022d4 <WakePL455+0x5c>)
 8002280:	f008 fc9a 	bl	800abb8 <puts>

	// Toggle wake signal using GPIO pin PA0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Assert wakeup pulse (set low)
 8002284:	2200      	movs	r2, #0
 8002286:	2101      	movs	r1, #1
 8002288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800228c:	f003 fd8a 	bl	8005da4 <HAL_GPIO_WritePin>
	HAL_Delay(0.01); // 10 microsecond delay to meet wakeup timing requirements
 8002290:	2000      	movs	r0, #0
 8002292:	f001 f875 	bl	8003380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET); // Drive wakeup signal high
 8002296:	2201      	movs	r2, #1
 8002298:	2101      	movs	r1, #1
 800229a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800229e:	f003 fd81 	bl	8005da4 <HAL_GPIO_WritePin>

	GPIO_InitTypeDef GPIO_InitStruct = {0}; // Initialise GPIO structure for wakeup functionality
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022b0:	2301      	movs	r3, #1
 80022b2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Set pin as push-pull output
 80022b4:	2301      	movs	r3, #1
 80022b6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP; // Enable internal pull-up resistor
 80022b8:	2301      	movs	r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Set speed to low (reduce processing power)
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); // Apply GPIO configuration
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	4619      	mov	r1, r3
 80022c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c8:	f003 fbea 	bl	8005aa0 <HAL_GPIO_Init>
}
 80022cc:	bf00      	nop
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	0800d8c8 	.word	0x0800d8c8

080022d8 <WriteReg>:
 *        - dwData -> Data value to write
 *        - bLen -> Number of bytes to write
 *        - bWriteType -> Write mode (single / group write, read only, write & only)
 */
int  WriteReg(BYTE bID, uint16_t wAddr, uint64_t dwData, BYTE bLen, BYTE bWriteType)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af02      	add	r7, sp, #8
 80022de:	e9c7 2300 	strd	r2, r3, [r7]
 80022e2:	4603      	mov	r3, r0
 80022e4:	73fb      	strb	r3, [r7, #15]
 80022e6:	460b      	mov	r3, r1
 80022e8:	81bb      	strh	r3, [r7, #12]
	int bRes = 0;  // Result variable
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
	BYTE bBuf[4] = {0, 0, 0, 0}; // Buffer to store data before transmission
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]

	// Write data based on length (1 to 8)
	switch(bLen)
 80022f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	2b07      	cmp	r3, #7
 80022fa:	f200 81bf 	bhi.w	800267c <WriteReg+0x3a4>
 80022fe:	a201      	add	r2, pc, #4	; (adr r2, 8002304 <WriteReg+0x2c>)
 8002300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002304:	08002325 	.word	0x08002325
 8002308:	08002341 	.word	0x08002341
 800230c:	08002375 	.word	0x08002375
 8002310:	080023c1 	.word	0x080023c1
 8002314:	08002425 	.word	0x08002425
 8002318:	0800249d 	.word	0x0800249d
 800231c:	08002529 	.word	0x08002529
 8002320:	080025c9 	.word	0x080025c9
	{
	case 1: // write 1 byte of data to IC
		bBuf[0] =  dwData & 0x00000000000000FF;
 8002324:	783b      	ldrb	r3, [r7, #0]
 8002326:	743b      	strb	r3, [r7, #16]
		bRes = WriteFrame(bID, wAddr, bBuf, 1, bWriteType);
 8002328:	f107 0210 	add.w	r2, r7, #16
 800232c:	89b9      	ldrh	r1, [r7, #12]
 800232e:	7bf8      	ldrb	r0, [r7, #15]
 8002330:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	2301      	movs	r3, #1
 8002338:	f000 f9a6 	bl	8002688 <WriteFrame>
 800233c:	6178      	str	r0, [r7, #20]
		break;
 800233e:	e19e      	b.n	800267e <WriteReg+0x3a6>
	case 2: // write 2 byte of data to IC
		bBuf[0] = (dwData & 0x000000000000FF00) >> 8;
 8002340:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	0a02      	lsrs	r2, r0, #8
 800234e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002352:	0a0b      	lsrs	r3, r1, #8
 8002354:	b2d3      	uxtb	r3, r2
 8002356:	743b      	strb	r3, [r7, #16]
		bBuf[1] =  dwData & 0x00000000000000FF;
 8002358:	783b      	ldrb	r3, [r7, #0]
 800235a:	747b      	strb	r3, [r7, #17]
		bRes = WriteFrame(bID, wAddr, bBuf, 2, bWriteType);
 800235c:	f107 0210 	add.w	r2, r7, #16
 8002360:	89b9      	ldrh	r1, [r7, #12]
 8002362:	7bf8      	ldrb	r0, [r7, #15]
 8002364:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	2302      	movs	r3, #2
 800236c:	f000 f98c 	bl	8002688 <WriteFrame>
 8002370:	6178      	str	r0, [r7, #20]
		break;
 8002372:	e184      	b.n	800267e <WriteReg+0x3a6>
	case 3: // write 3 byte of data to IC
		bBuf[0] = (dwData & 0x0000000000FF0000) >> 16;
 8002374:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	0c02      	lsrs	r2, r0, #16
 8002382:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002386:	0c0b      	lsrs	r3, r1, #16
 8002388:	b2d3      	uxtb	r3, r2
 800238a:	743b      	strb	r3, [r7, #16]
		bBuf[1] = (dwData & 0x000000000000FF00) >> 8;
 800238c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	0a02      	lsrs	r2, r0, #8
 800239a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800239e:	0a0b      	lsrs	r3, r1, #8
 80023a0:	b2d3      	uxtb	r3, r2
 80023a2:	747b      	strb	r3, [r7, #17]
		bBuf[2] =  dwData & 0x00000000000000FF;
 80023a4:	783b      	ldrb	r3, [r7, #0]
 80023a6:	74bb      	strb	r3, [r7, #18]
		bRes = WriteFrame(bID, wAddr, bBuf, 3, bWriteType);
 80023a8:	f107 0210 	add.w	r2, r7, #16
 80023ac:	89b9      	ldrh	r1, [r7, #12]
 80023ae:	7bf8      	ldrb	r0, [r7, #15]
 80023b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2303      	movs	r3, #3
 80023b8:	f000 f966 	bl	8002688 <WriteFrame>
 80023bc:	6178      	str	r0, [r7, #20]
		break;
 80023be:	e15e      	b.n	800267e <WriteReg+0x3a6>
	case 4: // write 4 byte of data to IC
		bBuf[0] = (dwData & 0x00000000FF000000) >> 24;
 80023c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	0e02      	lsrs	r2, r0, #24
 80023ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023d2:	0e0b      	lsrs	r3, r1, #24
 80023d4:	b2d3      	uxtb	r3, r2
 80023d6:	743b      	strb	r3, [r7, #16]
		bBuf[1] = (dwData & 0x0000000000FF0000) >> 16;
 80023d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	0c02      	lsrs	r2, r0, #16
 80023e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80023ea:	0c0b      	lsrs	r3, r1, #16
 80023ec:	b2d3      	uxtb	r3, r2
 80023ee:	747b      	strb	r3, [r7, #17]
		bBuf[2] = (dwData & 0x000000000000FF00) >> 8;
 80023f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	0a02      	lsrs	r2, r0, #8
 80023fe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002402:	0a0b      	lsrs	r3, r1, #8
 8002404:	b2d3      	uxtb	r3, r2
 8002406:	74bb      	strb	r3, [r7, #18]
		bBuf[3] =  dwData & 0x00000000000000FF;
 8002408:	783b      	ldrb	r3, [r7, #0]
 800240a:	74fb      	strb	r3, [r7, #19]
		bRes = WriteFrame(bID, wAddr, bBuf, 4, bWriteType);
 800240c:	f107 0210 	add.w	r2, r7, #16
 8002410:	89b9      	ldrh	r1, [r7, #12]
 8002412:	7bf8      	ldrb	r0, [r7, #15]
 8002414:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	2304      	movs	r3, #4
 800241c:	f000 f934 	bl	8002688 <WriteFrame>
 8002420:	6178      	str	r0, [r7, #20]
		break;
 8002422:	e12c      	b.n	800267e <WriteReg+0x3a6>
	case 5: // write 5 byte of data to IC
		bBuf[0] = (dwData & 0x000000FF00000000) >> 32;
 8002424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	000a      	movs	r2, r1
 8002432:	2300      	movs	r3, #0
 8002434:	b2d3      	uxtb	r3, r2
 8002436:	743b      	strb	r3, [r7, #16]
		bBuf[1] = (dwData & 0x00000000FF000000) >> 24;
 8002438:	e9d7 0100 	ldrd	r0, r1, [r7]
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	0e02      	lsrs	r2, r0, #24
 8002446:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800244a:	0e0b      	lsrs	r3, r1, #24
 800244c:	b2d3      	uxtb	r3, r2
 800244e:	747b      	strb	r3, [r7, #17]
		bBuf[2] = (dwData & 0x0000000000FF0000) >> 16;
 8002450:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	0c02      	lsrs	r2, r0, #16
 800245e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002462:	0c0b      	lsrs	r3, r1, #16
 8002464:	b2d3      	uxtb	r3, r2
 8002466:	74bb      	strb	r3, [r7, #18]
		bBuf[3] = (dwData & 0x000000000000FF00) >> 8;
 8002468:	e9d7 0100 	ldrd	r0, r1, [r7]
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	0a02      	lsrs	r2, r0, #8
 8002476:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800247a:	0a0b      	lsrs	r3, r1, #8
 800247c:	b2d3      	uxtb	r3, r2
 800247e:	74fb      	strb	r3, [r7, #19]
		bBuf[4] =  dwData & 0x00000000000000FF;
 8002480:	783b      	ldrb	r3, [r7, #0]
 8002482:	753b      	strb	r3, [r7, #20]
		bRes = WriteFrame(bID, wAddr, bBuf, 5, bWriteType);
 8002484:	f107 0210 	add.w	r2, r7, #16
 8002488:	89b9      	ldrh	r1, [r7, #12]
 800248a:	7bf8      	ldrb	r0, [r7, #15]
 800248c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	2305      	movs	r3, #5
 8002494:	f000 f8f8 	bl	8002688 <WriteFrame>
 8002498:	6178      	str	r0, [r7, #20]
		break;
 800249a:	e0f0      	b.n	800267e <WriteReg+0x3a6>
	case 6: // write 6 byte of data to IC
		bBuf[0] = (dwData & 0x0000FF0000000000) >> 40;
 800249c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	0a0a      	lsrs	r2, r1, #8
 80024aa:	2300      	movs	r3, #0
 80024ac:	b2d3      	uxtb	r3, r2
 80024ae:	743b      	strb	r3, [r7, #16]
		bBuf[1] = (dwData & 0x000000FF00000000) >> 32;
 80024b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	000a      	movs	r2, r1
 80024be:	2300      	movs	r3, #0
 80024c0:	b2d3      	uxtb	r3, r2
 80024c2:	747b      	strb	r3, [r7, #17]
		bBuf[2] = (dwData & 0x00000000FF000000) >> 24;
 80024c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	0e02      	lsrs	r2, r0, #24
 80024d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024d6:	0e0b      	lsrs	r3, r1, #24
 80024d8:	b2d3      	uxtb	r3, r2
 80024da:	74bb      	strb	r3, [r7, #18]
		bBuf[3] = (dwData & 0x0000000000FF0000) >> 16;
 80024dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	0c02      	lsrs	r2, r0, #16
 80024ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80024ee:	0c0b      	lsrs	r3, r1, #16
 80024f0:	b2d3      	uxtb	r3, r2
 80024f2:	74fb      	strb	r3, [r7, #19]
		bBuf[4] = (dwData & 0x000000000000FF00) >> 8;
 80024f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	0a02      	lsrs	r2, r0, #8
 8002502:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002506:	0a0b      	lsrs	r3, r1, #8
 8002508:	b2d3      	uxtb	r3, r2
 800250a:	753b      	strb	r3, [r7, #20]
		bBuf[5] =  dwData & 0x00000000000000FF;
 800250c:	783b      	ldrb	r3, [r7, #0]
 800250e:	757b      	strb	r3, [r7, #21]
		bRes = WriteFrame(bID, wAddr, bBuf, 6, bWriteType);
 8002510:	f107 0210 	add.w	r2, r7, #16
 8002514:	89b9      	ldrh	r1, [r7, #12]
 8002516:	7bf8      	ldrb	r0, [r7, #15]
 8002518:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	2306      	movs	r3, #6
 8002520:	f000 f8b2 	bl	8002688 <WriteFrame>
 8002524:	6178      	str	r0, [r7, #20]
		break;
 8002526:	e0aa      	b.n	800267e <WriteReg+0x3a6>
	case 7: // write 7 byte of data to IC
		bBuf[0] = (dwData & 0x00FF000000000000) >> 48;
 8002528:	e9d7 0100 	ldrd	r0, r1, [r7]
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	0c0a      	lsrs	r2, r1, #16
 8002536:	2300      	movs	r3, #0
 8002538:	b2d3      	uxtb	r3, r2
 800253a:	743b      	strb	r3, [r7, #16]
		bBuf[1] = (dwData & 0x0000FF0000000000) >> 40;
 800253c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	0a0a      	lsrs	r2, r1, #8
 800254a:	2300      	movs	r3, #0
 800254c:	b2d3      	uxtb	r3, r2
 800254e:	747b      	strb	r3, [r7, #17]
		bBuf[2] = (dwData & 0x000000FF00000000) >> 32;
 8002550:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	000a      	movs	r2, r1
 800255e:	2300      	movs	r3, #0
 8002560:	b2d3      	uxtb	r3, r2
 8002562:	74bb      	strb	r3, [r7, #18]
		bBuf[3] = (dwData & 0x00000000FF000000) >> 24;
 8002564:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	0e02      	lsrs	r2, r0, #24
 8002572:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002576:	0e0b      	lsrs	r3, r1, #24
 8002578:	b2d3      	uxtb	r3, r2
 800257a:	74fb      	strb	r3, [r7, #19]
		bBuf[4] = (dwData & 0x0000000000FF0000) >> 16;
 800257c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	0c02      	lsrs	r2, r0, #16
 800258a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800258e:	0c0b      	lsrs	r3, r1, #16
 8002590:	b2d3      	uxtb	r3, r2
 8002592:	753b      	strb	r3, [r7, #20]
		bBuf[5] = (dwData & 0x000000000000FF00) >> 8;
 8002594:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	0a02      	lsrs	r2, r0, #8
 80025a2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80025a6:	0a0b      	lsrs	r3, r1, #8
 80025a8:	b2d3      	uxtb	r3, r2
 80025aa:	757b      	strb	r3, [r7, #21]
		bBuf[6] =  dwData & 0x00000000000000FF;;
 80025ac:	783b      	ldrb	r3, [r7, #0]
 80025ae:	75bb      	strb	r3, [r7, #22]
		bRes = WriteFrame(bID, wAddr, bBuf, 7, bWriteType);
 80025b0:	f107 0210 	add.w	r2, r7, #16
 80025b4:	89b9      	ldrh	r1, [r7, #12]
 80025b6:	7bf8      	ldrb	r0, [r7, #15]
 80025b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2307      	movs	r3, #7
 80025c0:	f000 f862 	bl	8002688 <WriteFrame>
 80025c4:	6178      	str	r0, [r7, #20]
		break;
 80025c6:	e05a      	b.n	800267e <WriteReg+0x3a6>
	case 8: // write 8 byte of data to IC
		bBuf[0] = (dwData & 0xFF00000000000000) >> 56;
 80025c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	0e0a      	lsrs	r2, r1, #24
 80025d6:	2300      	movs	r3, #0
 80025d8:	b2d3      	uxtb	r3, r2
 80025da:	743b      	strb	r3, [r7, #16]
		bBuf[1] = (dwData & 0x00FF000000000000) >> 48;
 80025dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	0c0a      	lsrs	r2, r1, #16
 80025ea:	2300      	movs	r3, #0
 80025ec:	b2d3      	uxtb	r3, r2
 80025ee:	747b      	strb	r3, [r7, #17]
		bBuf[2] = (dwData & 0x0000FF0000000000) >> 40;
 80025f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	0a0a      	lsrs	r2, r1, #8
 80025fe:	2300      	movs	r3, #0
 8002600:	b2d3      	uxtb	r3, r2
 8002602:	74bb      	strb	r3, [r7, #18]
		bBuf[3] = (dwData & 0x000000FF00000000) >> 32;
 8002604:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	000a      	movs	r2, r1
 8002612:	2300      	movs	r3, #0
 8002614:	b2d3      	uxtb	r3, r2
 8002616:	74fb      	strb	r3, [r7, #19]
		bBuf[4] = (dwData & 0x00000000FF000000) >> 24;
 8002618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	0e02      	lsrs	r2, r0, #24
 8002626:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800262a:	0e0b      	lsrs	r3, r1, #24
 800262c:	b2d3      	uxtb	r3, r2
 800262e:	753b      	strb	r3, [r7, #20]
		bBuf[5] = (dwData & 0x0000000000FF0000) >> 16;
 8002630:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	0c02      	lsrs	r2, r0, #16
 800263e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002642:	0c0b      	lsrs	r3, r1, #16
 8002644:	b2d3      	uxtb	r3, r2
 8002646:	757b      	strb	r3, [r7, #21]
		bBuf[6] = (dwData & 0x000000000000FF00) >> 8;
 8002648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	0a02      	lsrs	r2, r0, #8
 8002656:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800265a:	0a0b      	lsrs	r3, r1, #8
 800265c:	b2d3      	uxtb	r3, r2
 800265e:	75bb      	strb	r3, [r7, #22]
		bBuf[7] =  dwData & 0x00000000000000FF;
 8002660:	783b      	ldrb	r3, [r7, #0]
 8002662:	75fb      	strb	r3, [r7, #23]
		bRes = WriteFrame(bID, wAddr, bBuf, 8, bWriteType);
 8002664:	f107 0210 	add.w	r2, r7, #16
 8002668:	89b9      	ldrh	r1, [r7, #12]
 800266a:	7bf8      	ldrb	r0, [r7, #15]
 800266c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	2308      	movs	r3, #8
 8002674:	f000 f808 	bl	8002688 <WriteFrame>
 8002678:	6178      	str	r0, [r7, #20]
		break;
 800267a:	e000      	b.n	800267e <WriteReg+0x3a6>
	default:
		break;
 800267c:	bf00      	nop
	}
	return bRes; // Return success or failure status
 800267e:	697b      	ldr	r3, [r7, #20]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <WriteFrame>:
 *         - pData -> Pointer to data to be written
 *         - bLen -> Number of bytes to write
 * 		   - bWriteType -> Write mode (single / group write, read only, write & only)
 */
int  WriteFrame(BYTE bID, uint16_t wAddr, BYTE * pData, BYTE bLen, BYTE bWriteType)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08e      	sub	sp, #56	; 0x38
 800268c:	af00      	add	r7, sp, #0
 800268e:	603a      	str	r2, [r7, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
 8002696:	460b      	mov	r3, r1
 8002698:	80bb      	strh	r3, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	71bb      	strb	r3, [r7, #6]
	int	   bPktLen = 0; // Packet length
 800269e:	2300      	movs	r3, #0
 80026a0:	633b      	str	r3, [r7, #48]	; 0x30
	BYTE   pFrame[32]; // Frame buffer of 32 bytes
	BYTE * pBuf = pFrame; // Pointer to frame buffer
 80026a2:	f107 030c 	add.w	r3, r7, #12
 80026a6:	637b      	str	r3, [r7, #52]	; 0x34
	uint16_t   wCRC; // CRC checksum variable

	if (bLen == 7 || bLen > 8) // Return 0 if invalid length
 80026a8:	79bb      	ldrb	r3, [r7, #6]
 80026aa:	2b07      	cmp	r3, #7
 80026ac:	d002      	beq.n	80026b4 <WriteFrame+0x2c>
 80026ae:	79bb      	ldrb	r3, [r7, #6]
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d901      	bls.n	80026b8 <WriteFrame+0x30>
		return 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e095      	b.n	80027e4 <WriteFrame+0x15c>

	memset(pFrame, 0x7F, sizeof(pFrame)); // Initialise frame with default values
 80026b8:	f107 030c 	add.w	r3, r7, #12
 80026bc:	2220      	movs	r2, #32
 80026be:	217f      	movs	r1, #127	; 0x7f
 80026c0:	4618      	mov	r0, r3
 80026c2:	f007 fd81 	bl	800a1c8 <memset>

	// Deduce whether to use 8-bit or 16-bit address mode
	if (wAddr > 255)	{
 80026c6:	88bb      	ldrh	r3, [r7, #4]
 80026c8:	2bff      	cmp	r3, #255	; 0xff
 80026ca:	d92f      	bls.n	800272c <WriteFrame+0xa4>
		*pBuf++ = 0x88 | bWriteType | bLen;	// Use 16-bit address mode
 80026cc:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80026d0:	79bb      	ldrb	r3, [r7, #6]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d8:	1c59      	adds	r1, r3, #1
 80026da:	6379      	str	r1, [r7, #52]	; 0x34
 80026dc:	f062 0277 	orn	r2, r2, #119	; 0x77
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	701a      	strb	r2, [r3, #0]
		if (bWriteType == FRMWRT_SGL_R || bWriteType == FRMWRT_SGL_NR || bWriteType == FRMWRT_GRP_R || bWriteType == FRMWRT_GRP_NR)
 80026e4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00b      	beq.n	8002704 <WriteFrame+0x7c>
 80026ec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80026f0:	2b10      	cmp	r3, #16
 80026f2:	d007      	beq.n	8002704 <WriteFrame+0x7c>
 80026f4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80026f8:	2b20      	cmp	r3, #32
 80026fa:	d003      	beq.n	8002704 <WriteFrame+0x7c>
 80026fc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002700:	2b30      	cmp	r3, #48	; 0x30
 8002702:	d104      	bne.n	800270e <WriteFrame+0x86>
		{
			*pBuf++ = (bID & 0x00FF);
 8002704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	637a      	str	r2, [r7, #52]	; 0x34
 800270a:	79fa      	ldrb	r2, [r7, #7]
 800270c:	701a      	strb	r2, [r3, #0]
		}
		*pBuf++ = (wAddr & 0xFF00) >> 8;
 800270e:	88bb      	ldrh	r3, [r7, #4]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	b299      	uxth	r1, r3
 8002714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	637a      	str	r2, [r7, #52]	; 0x34
 800271a:	b2ca      	uxtb	r2, r1
 800271c:	701a      	strb	r2, [r3, #0]
		*pBuf++ =  wAddr & 0x00FF;
 800271e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	637a      	str	r2, [r7, #52]	; 0x34
 8002724:	88ba      	ldrh	r2, [r7, #4]
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	e02f      	b.n	800278c <WriteFrame+0x104>
	}
	else {
		*pBuf++ = 0x80 | bWriteType | bLen;	// use 8-bit address mode
 800272c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002730:	79bb      	ldrb	r3, [r7, #6]
 8002732:	4313      	orrs	r3, r2
 8002734:	b2da      	uxtb	r2, r3
 8002736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002738:	1c59      	adds	r1, r3, #1
 800273a:	6379      	str	r1, [r7, #52]	; 0x34
 800273c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]
		if (bWriteType == FRMWRT_SGL_R || bWriteType == FRMWRT_SGL_NR || bWriteType == FRMWRT_GRP_R || bWriteType == FRMWRT_GRP_NR)
 8002744:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00b      	beq.n	8002764 <WriteFrame+0xdc>
 800274c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002750:	2b10      	cmp	r3, #16
 8002752:	d007      	beq.n	8002764 <WriteFrame+0xdc>
 8002754:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002758:	2b20      	cmp	r3, #32
 800275a:	d003      	beq.n	8002764 <WriteFrame+0xdc>
 800275c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002760:	2b30      	cmp	r3, #48	; 0x30
 8002762:	d104      	bne.n	800276e <WriteFrame+0xe6>
		{
			*pBuf++ = (bID & 0x00FF);
 8002764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	637a      	str	r2, [r7, #52]	; 0x34
 800276a:	79fa      	ldrb	r2, [r7, #7]
 800276c:	701a      	strb	r2, [r3, #0]
		}
		*pBuf++ = wAddr & 0x00FF;
 800276e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	637a      	str	r2, [r7, #52]	; 0x34
 8002774:	88ba      	ldrh	r2, [r7, #4]
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	701a      	strb	r2, [r3, #0]
	}

	// Copy data to frame buffer
	while(bLen--)
 800277a:	e007      	b.n	800278c <WriteFrame+0x104>
		*pBuf++ = *pData++;
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	1c53      	adds	r3, r2, #1
 8002780:	603b      	str	r3, [r7, #0]
 8002782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002784:	1c59      	adds	r1, r3, #1
 8002786:	6379      	str	r1, [r7, #52]	; 0x34
 8002788:	7812      	ldrb	r2, [r2, #0]
 800278a:	701a      	strb	r2, [r3, #0]
	while(bLen--)
 800278c:	79bb      	ldrb	r3, [r7, #6]
 800278e:	1e5a      	subs	r2, r3, #1
 8002790:	71ba      	strb	r2, [r7, #6]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f2      	bne.n	800277c <WriteFrame+0xf4>

	// Compute and append CRC checksum to frame
	bPktLen = pBuf - pFrame;
 8002796:	f107 030c 	add.w	r3, r7, #12
 800279a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	633b      	str	r3, [r7, #48]	; 0x30

	wCRC = CRC16(pFrame, bPktLen);
 80027a0:	f107 030c 	add.w	r3, r7, #12
 80027a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f872 	bl	8002890 <CRC16>
 80027ac:	4603      	mov	r3, r0
 80027ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
	*pBuf++ = wCRC & 0x00FF;
 80027b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	637a      	str	r2, [r7, #52]	; 0x34
 80027b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	701a      	strb	r2, [r3, #0]
	*pBuf++ = (wCRC & 0xFF00) >> 8;
 80027bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	b299      	uxth	r1, r3
 80027c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	637a      	str	r2, [r7, #52]	; 0x34
 80027c8:	b2ca      	uxtb	r2, r1
 80027ca:	701a      	strb	r2, [r3, #0]
	bPktLen += 2;
 80027cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ce:	3302      	adds	r3, #2
 80027d0:	633b      	str	r3, [r7, #48]	; 0x30

	// Transmit frame over UART 3
	HAL_UART_Transmit(&huart3, pFrame, (uint16_t)bPktLen, 100);
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	f107 010c 	add.w	r1, r7, #12
 80027da:	2364      	movs	r3, #100	; 0x64
 80027dc:	4803      	ldr	r0, [pc, #12]	; (80027ec <WriteFrame+0x164>)
 80027de:	f005 fbd9 	bl	8007f94 <HAL_UART_Transmit>

	return bPktLen;
 80027e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3738      	adds	r7, #56	; 0x38
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	200005b4 	.word	0x200005b4

080027f0 <ReadResp>:

/**
 * @brief  Triggers UART receive interrupt for PL455 response.
 */
int ReadResp(BYTE * pData, uint16_t bLen)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_IT(&huart3, pData, bLen); // Trigger UART interrupt-based receive
 80027fc:	887b      	ldrh	r3, [r7, #2]
 80027fe:	461a      	mov	r2, r3
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4804      	ldr	r0, [pc, #16]	; (8002814 <ReadResp+0x24>)
 8002804:	f005 fc54 	bl	80080b0 <HAL_UART_Receive_IT>
	return 0;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	200005b4 	.word	0x200005b4

08002818 <getcellVoltages>:
 * 		   - data -> pointer to received data buffer
 * 		   - NOC -> number of cells (6)
 * 		   - volt -> pointer to array where extracted voltages are stored
 */
void getcellVoltages(uint8_t *data, uint8_t NOC, float *volt)
{
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	460b      	mov	r3, r1
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	72fb      	strb	r3, [r7, #11]
	for(int i=1;i<=NOC;i++) // Iterate through each cell
 8002826:	2301      	movs	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	e023      	b.n	8002874 <getcellVoltages+0x5c>
	{
	*volt ++= (data[2*i-1] << 8 | data[i*2]) * 0.00007666; // Extract and convert raw 16-bit ADC to floating voltage value
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	3b01      	subs	r3, #1
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4413      	add	r3, r2
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	0052      	lsls	r2, r2, #1
 800283e:	4611      	mov	r1, r2
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	440a      	add	r2, r1
 8002844:	7812      	ldrb	r2, [r2, #0]
 8002846:	4313      	orrs	r3, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fe93 	bl	8000574 <__aeabi_i2d>
 800284e:	a30e      	add	r3, pc, #56	; (adr r3, 8002888 <getcellVoltages+0x70>)
 8002850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002854:	f7fd fef8 	bl	8000648 <__aeabi_dmul>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	687c      	ldr	r4, [r7, #4]
 8002862:	1d23      	adds	r3, r4, #4
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	f7fe f9c7 	bl	8000bf8 <__aeabi_d2f>
 800286a:	4603      	mov	r3, r0
 800286c:	6023      	str	r3, [r4, #0]
	for(int i=1;i<=NOC;i++) // Iterate through each cell
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	3301      	adds	r3, #1
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	7afb      	ldrb	r3, [r7, #11]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	429a      	cmp	r2, r3
 800287a:	ddd7      	ble.n	800282c <getcellVoltages+0x14>
	}
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	bd90      	pop	{r4, r7, pc}
 8002886:	bf00      	nop
 8002888:	c58a8e39 	.word	0xc58a8e39
 800288c:	3f141890 	.word	0x3f141890

08002890 <CRC16>:
 * @brief  Compute CRC16 checksum for a given buffer
 *         - pBuf -> Pointer to buffer
 *         - nLen -> Length of buffer
 */
uint16_t CRC16(BYTE *pBuf, int nLen)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
	uint16_t wCRC = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	81fb      	strh	r3, [r7, #14]
	int i;

	for (i = 0; i < nLen; i++)
 800289e:	2300      	movs	r3, #0
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	e016      	b.n	80028d2 <CRC16+0x42>
	{
		wCRC ^= (*pBuf++) & 0x00FF;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	b21a      	sxth	r2, r3
 80028ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028b2:	4053      	eors	r3, r2
 80028b4:	b21b      	sxth	r3, r3
 80028b6:	81fb      	strh	r3, [r7, #14]
		wCRC = crc16_table[wCRC & 0x00FF] ^ (wCRC >> 8);
 80028b8:	89fb      	ldrh	r3, [r7, #14]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <CRC16+0x58>)
 80028be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80028c2:	89fb      	ldrh	r3, [r7, #14]
 80028c4:	0a1b      	lsrs	r3, r3, #8
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	4053      	eors	r3, r2
 80028ca:	81fb      	strh	r3, [r7, #14]
	for (i = 0; i < nLen; i++)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	3301      	adds	r3, #1
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	dbe4      	blt.n	80028a4 <CRC16+0x14>
	}
	return wCRC;
 80028da:	89fb      	ldrh	r3, [r7, #14]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	0800da50 	.word	0x0800da50

080028ec <delayms>:


/**
 * @brief  Software function for delay in milliseconds
 */
void delayms(uint16_t ms) {
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	80fb      	strh	r3, [r7, #6]
	  volatile unsigned int delayval;
	  delayval = ms * 8400;   // 8400 are about 1ms
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80028fc:	fb02 f303 	mul.w	r3, r2, r3
 8002900:	60fb      	str	r3, [r7, #12]
	  while(delayval--);
 8002902:	bf00      	nop
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1e5a      	subs	r2, r3, #1
 8002908:	60fa      	str	r2, [r7, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1fa      	bne.n	8002904 <delayms+0x18>
}
 800290e:	bf00      	nop
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_MspInit+0x44>)
 8002924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002926:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <HAL_MspInit+0x44>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6613      	str	r3, [r2, #96]	; 0x60
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <HAL_MspInit+0x44>)
 8002930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_MspInit+0x44>)
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	4a08      	ldr	r2, [pc, #32]	; (8002960 <HAL_MspInit+0x44>)
 8002940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002944:	6593      	str	r3, [r2, #88]	; 0x58
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_MspInit+0x44>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002952:	f003 fafb 	bl	8005f4c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000

08002964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002968:	e7fe      	b.n	8002968 <NMI_Handler+0x4>

0800296a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800296e:	e7fe      	b.n	800296e <HardFault_Handler+0x4>

08002970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002974:	e7fe      	b.n	8002974 <MemManage_Handler+0x4>

08002976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800297a:	e7fe      	b.n	800297a <BusFault_Handler+0x4>

0800297c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002980:	e7fe      	b.n	8002980 <UsageFault_Handler+0x4>

08002982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b0:	f000 fcc8 	bl	8003344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029bc:	4802      	ldr	r0, [pc, #8]	; (80029c8 <DMA1_Channel1_IRQHandler+0x10>)
 80029be:	f002 ff20 	bl	8005802 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200002d4 	.word	0x200002d4

080029cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <DMA1_Channel2_IRQHandler+0x10>)
 80029d2:	f002 ff16 	bl	8005802 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000334 	.word	0x20000334

080029e0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029e4:	4803      	ldr	r0, [pc, #12]	; (80029f4 <ADC1_2_IRQHandler+0x14>)
 80029e6:	f001 f9e3 	bl	8003db0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80029ea:	4803      	ldr	r0, [pc, #12]	; (80029f8 <ADC1_2_IRQHandler+0x18>)
 80029ec:	f001 f9e0 	bl	8003db0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	200001fc 	.word	0x200001fc
 80029f8:	20000268 	.word	0x20000268

080029fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a00:	4802      	ldr	r0, [pc, #8]	; (8002a0c <USART3_IRQHandler+0x10>)
 8002a02:	f005 fba1 	bl	8008148 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200005b4 	.word	0x200005b4

08002a10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002a14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a18:	f003 f9dc 	bl	8005dd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <enable_cell_path>:
#include "switch_matrix.h"
#include <stdio.h>

void enable_cell_path(int target_cell)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	switch (target_cell)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	2b05      	cmp	r3, #5
 8002a2e:	f200 80cc 	bhi.w	8002bca <enable_cell_path+0x1aa>
 8002a32:	a201      	add	r2, pc, #4	; (adr r2, 8002a38 <enable_cell_path+0x18>)
 8002a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a38:	08002a51 	.word	0x08002a51
 8002a3c:	08002a91 	.word	0x08002a91
 8002a40:	08002acd 	.word	0x08002acd
 8002a44:	08002b0b 	.word	0x08002b0b
 8002a48:	08002b4b 	.word	0x08002b4b
 8002a4c:	08002b8b 	.word	0x08002b8b
	{
		case 1:
			HAL_GPIO_WritePin(MCU_SW_MOS2_GPIO_Port, MCU_SW_MOS2_Pin, GPIO_PIN_SET);
 8002a50:	2201      	movs	r2, #1
 8002a52:	2104      	movs	r1, #4
 8002a54:	485f      	ldr	r0, [pc, #380]	; (8002bd4 <enable_cell_path+0x1b4>)
 8002a56:	f003 f9a5 	bl	8005da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_SW_MOS4_GPIO_Port, MCU_SW_MOS4_Pin, GPIO_PIN_SET);
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a64:	f003 f99e 	bl	8005da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_SW_MOS10_GPIO_Port, MCU_SW_MOS10_Pin, GPIO_PIN_SET);
 8002a68:	2201      	movs	r2, #1
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	485a      	ldr	r0, [pc, #360]	; (8002bd8 <enable_cell_path+0x1b8>)
 8002a6e:	f003 f999 	bl	8005da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_SW_MOS11_GPIO_Port, MCU_SW_MOS11_Pin, GPIO_PIN_SET);
 8002a72:	2201      	movs	r2, #1
 8002a74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a7c:	f003 f992 	bl	8005da4 <HAL_GPIO_WritePin>

			HAL_Delay(500);
 8002a80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a84:	f000 fc7c 	bl	8003380 <HAL_Delay>
			printf("Cell 1 target path enabled...\n");
 8002a88:	4854      	ldr	r0, [pc, #336]	; (8002bdc <enable_cell_path+0x1bc>)
 8002a8a:	f008 f895 	bl	800abb8 <puts>
			break;
 8002a8e:	e09c      	b.n	8002bca <enable_cell_path+0x1aa>

		case 2:
			HAL_GPIO_WritePin(MCU_SW_MOS1_GPIO_Port, MCU_SW_MOS1_Pin, GPIO_PIN_SET);
 8002a90:	2201      	movs	r2, #1
 8002a92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a9a:	f003 f983 	bl	8005da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_SW_MOS3_GPIO_Port, MCU_SW_MOS3_Pin, GPIO_PIN_SET);
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	2108      	movs	r1, #8
 8002aa2:	484c      	ldr	r0, [pc, #304]	; (8002bd4 <enable_cell_path+0x1b4>)
 8002aa4:	f003 f97e 	bl	8005da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_SW_MOS9_GPIO_Port, MCU_SW_MOS9_Pin, GPIO_PIN_SET);
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	2101      	movs	r1, #1
 8002aac:	484a      	ldr	r0, [pc, #296]	; (8002bd8 <enable_cell_path+0x1b8>)
 8002aae:	f003 f979 	bl	8005da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_SW_MOS10_GPIO_Port, MCU_SW_MOS10_Pin, GPIO_PIN_SET);
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	4848      	ldr	r0, [pc, #288]	; (8002bd8 <enable_cell_path+0x1b8>)
 8002ab8:	f003 f974 	bl	8005da4 <HAL_GPIO_WritePin>

			HAL_Delay(500);
 8002abc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ac0:	f000 fc5e 	bl	8003380 <HAL_Delay>
			printf("Cell 2 target path enabled...\n");
 8002ac4:	4846      	ldr	r0, [pc, #280]	; (8002be0 <enable_cell_path+0x1c0>)
 8002ac6:	f008 f877 	bl	800abb8 <puts>
			break;
 8002aca:	e07e      	b.n	8002bca <enable_cell_path+0x1aa>

		case 3:
			HAL_GPIO_WritePin(MCU_SW_MOS2_GPIO_Port, MCU_SW_MOS2_Pin, GPIO_PIN_SET);
 8002acc:	2201      	movs	r2, #1
 8002ace:	2104      	movs	r1, #4
 8002ad0:	4840      	ldr	r0, [pc, #256]	; (8002bd4 <enable_cell_path+0x1b4>)
 8002ad2:	f003 f967 	bl	8005da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_SW_MOS4_GPIO_Port, MCU_SW_MOS4_Pin, GPIO_PIN_SET);
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ae0:	f003 f960 	bl	8005da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_SW_MOS8_GPIO_Port, MCU_SW_MOS8_Pin, GPIO_PIN_SET);
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	2180      	movs	r1, #128	; 0x80
 8002ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aec:	f003 f95a 	bl	8005da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_SW_MOS9_GPIO_Port, MCU_SW_MOS9_Pin, GPIO_PIN_SET);
 8002af0:	2201      	movs	r2, #1
 8002af2:	2101      	movs	r1, #1
 8002af4:	4838      	ldr	r0, [pc, #224]	; (8002bd8 <enable_cell_path+0x1b8>)
 8002af6:	f003 f955 	bl	8005da4 <HAL_GPIO_WritePin>

			HAL_Delay(500);
 8002afa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002afe:	f000 fc3f 	bl	8003380 <HAL_Delay>
			printf("Cell 3 target path enabled...\n");
 8002b02:	4838      	ldr	r0, [pc, #224]	; (8002be4 <enable_cell_path+0x1c4>)
 8002b04:	f008 f858 	bl	800abb8 <puts>
			break;
 8002b08:	e05f      	b.n	8002bca <enable_cell_path+0x1aa>

		case 4:
			HAL_GPIO_WritePin(MCU_SW_MOS1_GPIO_Port, MCU_SW_MOS1_Pin, GPIO_PIN_SET);
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b14:	f003 f946 	bl	8005da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_SW_MOS3_GPIO_Port, MCU_SW_MOS3_Pin, GPIO_PIN_SET);
 8002b18:	2201      	movs	r2, #1
 8002b1a:	2108      	movs	r1, #8
 8002b1c:	482d      	ldr	r0, [pc, #180]	; (8002bd4 <enable_cell_path+0x1b4>)
 8002b1e:	f003 f941 	bl	8005da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_SW_MOS7_GPIO_Port, MCU_SW_MOS7_Pin, GPIO_PIN_SET);
 8002b22:	2201      	movs	r2, #1
 8002b24:	2140      	movs	r1, #64	; 0x40
 8002b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b2a:	f003 f93b 	bl	8005da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_SW_MOS8_GPIO_Port, MCU_SW_MOS8_Pin, GPIO_PIN_SET);
 8002b2e:	2201      	movs	r2, #1
 8002b30:	2180      	movs	r1, #128	; 0x80
 8002b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b36:	f003 f935 	bl	8005da4 <HAL_GPIO_WritePin>

			HAL_Delay(500);
 8002b3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b3e:	f000 fc1f 	bl	8003380 <HAL_Delay>
			printf("Cell 4 target path enabled...\n");
 8002b42:	4829      	ldr	r0, [pc, #164]	; (8002be8 <enable_cell_path+0x1c8>)
 8002b44:	f008 f838 	bl	800abb8 <puts>
			break;
 8002b48:	e03f      	b.n	8002bca <enable_cell_path+0x1aa>

		case 5:
			HAL_GPIO_WritePin(MCU_SW_MOS2_GPIO_Port, MCU_SW_MOS2_Pin, GPIO_PIN_SET);
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	2104      	movs	r1, #4
 8002b4e:	4821      	ldr	r0, [pc, #132]	; (8002bd4 <enable_cell_path+0x1b4>)
 8002b50:	f003 f928 	bl	8005da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_SW_MOS4_GPIO_Port, MCU_SW_MOS4_Pin, GPIO_PIN_SET);
 8002b54:	2201      	movs	r2, #1
 8002b56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b5e:	f003 f921 	bl	8005da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_SW_MOS6_GPIO_Port, MCU_SW_MOS6_Pin, GPIO_PIN_SET);
 8002b62:	2201      	movs	r2, #1
 8002b64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b68:	481b      	ldr	r0, [pc, #108]	; (8002bd8 <enable_cell_path+0x1b8>)
 8002b6a:	f003 f91b 	bl	8005da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_SW_MOS7_GPIO_Port, MCU_SW_MOS7_Pin, GPIO_PIN_SET);
 8002b6e:	2201      	movs	r2, #1
 8002b70:	2140      	movs	r1, #64	; 0x40
 8002b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b76:	f003 f915 	bl	8005da4 <HAL_GPIO_WritePin>

			HAL_Delay(500);
 8002b7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b7e:	f000 fbff 	bl	8003380 <HAL_Delay>
			printf("Cell 5 target path enabled...\n");
 8002b82:	481a      	ldr	r0, [pc, #104]	; (8002bec <enable_cell_path+0x1cc>)
 8002b84:	f008 f818 	bl	800abb8 <puts>
			break;
 8002b88:	e01f      	b.n	8002bca <enable_cell_path+0x1aa>

		case 6:
			HAL_GPIO_WritePin(MCU_SW_MOS1_GPIO_Port, MCU_SW_MOS1_Pin, GPIO_PIN_SET);
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b94:	f003 f906 	bl	8005da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_SW_MOS3_GPIO_Port, MCU_SW_MOS3_Pin, GPIO_PIN_SET);
 8002b98:	2201      	movs	r2, #1
 8002b9a:	2108      	movs	r1, #8
 8002b9c:	480d      	ldr	r0, [pc, #52]	; (8002bd4 <enable_cell_path+0x1b4>)
 8002b9e:	f003 f901 	bl	8005da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_SW_MOS5_GPIO_Port, MCU_SW_MOS5_Pin, GPIO_PIN_SET);
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ba8:	480b      	ldr	r0, [pc, #44]	; (8002bd8 <enable_cell_path+0x1b8>)
 8002baa:	f003 f8fb 	bl	8005da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_SW_MOS6_GPIO_Port, MCU_SW_MOS6_Pin, GPIO_PIN_SET);
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bb4:	4808      	ldr	r0, [pc, #32]	; (8002bd8 <enable_cell_path+0x1b8>)
 8002bb6:	f003 f8f5 	bl	8005da4 <HAL_GPIO_WritePin>

			HAL_Delay(500);
 8002bba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bbe:	f000 fbdf 	bl	8003380 <HAL_Delay>
			printf("Cell 6 target path enabled...\n");
 8002bc2:	480b      	ldr	r0, [pc, #44]	; (8002bf0 <enable_cell_path+0x1d0>)
 8002bc4:	f007 fff8 	bl	800abb8 <puts>
			break;
 8002bc8:	bf00      	nop
	}
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	48000800 	.word	0x48000800
 8002bd8:	48000400 	.word	0x48000400
 8002bdc:	0800d8d8 	.word	0x0800d8d8
 8002be0:	0800d8f8 	.word	0x0800d8f8
 8002be4:	0800d918 	.word	0x0800d918
 8002be8:	0800d938 	.word	0x0800d938
 8002bec:	0800d958 	.word	0x0800d958
 8002bf0:	0800d978 	.word	0x0800d978

08002bf4 <switch_matrix_reset>:

void switch_matrix_reset()
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8002bf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bfc:	f000 fbc0 	bl	8003380 <HAL_Delay>

	HAL_GPIO_WritePin(MCU_SW_MOS1_GPIO_Port, MCU_SW_MOS1_Pin, GPIO_PIN_RESET);
 8002c00:	2200      	movs	r2, #0
 8002c02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c0a:	f003 f8cb 	bl	8005da4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MCU_SW_MOS2_GPIO_Port, MCU_SW_MOS2_Pin, GPIO_PIN_RESET);
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2104      	movs	r1, #4
 8002c12:	481d      	ldr	r0, [pc, #116]	; (8002c88 <switch_matrix_reset+0x94>)
 8002c14:	f003 f8c6 	bl	8005da4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MCU_SW_MOS3_GPIO_Port, MCU_SW_MOS3_Pin, GPIO_PIN_RESET);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2108      	movs	r1, #8
 8002c1c:	481a      	ldr	r0, [pc, #104]	; (8002c88 <switch_matrix_reset+0x94>)
 8002c1e:	f003 f8c1 	bl	8005da4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MCU_SW_MOS4_GPIO_Port, MCU_SW_MOS4_Pin, GPIO_PIN_RESET);
 8002c22:	2200      	movs	r2, #0
 8002c24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c2c:	f003 f8ba 	bl	8005da4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MCU_SW_MOS5_GPIO_Port, MCU_SW_MOS5_Pin, GPIO_PIN_RESET);
 8002c30:	2200      	movs	r2, #0
 8002c32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c36:	4815      	ldr	r0, [pc, #84]	; (8002c8c <switch_matrix_reset+0x98>)
 8002c38:	f003 f8b4 	bl	8005da4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MCU_SW_MOS6_GPIO_Port, MCU_SW_MOS6_Pin, GPIO_PIN_RESET);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c42:	4812      	ldr	r0, [pc, #72]	; (8002c8c <switch_matrix_reset+0x98>)
 8002c44:	f003 f8ae 	bl	8005da4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MCU_SW_MOS7_GPIO_Port, MCU_SW_MOS7_Pin, GPIO_PIN_RESET);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2140      	movs	r1, #64	; 0x40
 8002c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c50:	f003 f8a8 	bl	8005da4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MCU_SW_MOS8_GPIO_Port, MCU_SW_MOS8_Pin, GPIO_PIN_RESET);
 8002c54:	2200      	movs	r2, #0
 8002c56:	2180      	movs	r1, #128	; 0x80
 8002c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c5c:	f003 f8a2 	bl	8005da4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MCU_SW_MOS9_GPIO_Port, MCU_SW_MOS9_Pin, GPIO_PIN_RESET);
 8002c60:	2200      	movs	r2, #0
 8002c62:	2101      	movs	r1, #1
 8002c64:	4809      	ldr	r0, [pc, #36]	; (8002c8c <switch_matrix_reset+0x98>)
 8002c66:	f003 f89d 	bl	8005da4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MCU_SW_MOS10_GPIO_Port, MCU_SW_MOS10_Pin, GPIO_PIN_RESET);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	4807      	ldr	r0, [pc, #28]	; (8002c8c <switch_matrix_reset+0x98>)
 8002c70:	f003 f898 	bl	8005da4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MCU_SW_MOS11_GPIO_Port, MCU_SW_MOS11_Pin, GPIO_PIN_RESET);
 8002c74:	2200      	movs	r2, #0
 8002c76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c7e:	f003 f891 	bl	8005da4 <HAL_GPIO_WritePin>
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	48000800 	.word	0x48000800
 8002c8c:	48000400 	.word	0x48000400

08002c90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return 1;
 8002c94:	2301      	movs	r3, #1
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <_kill>:

int _kill(int pid, int sig)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002caa:	f007 fa4f 	bl	800a14c <__errno>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2216      	movs	r2, #22
 8002cb2:	601a      	str	r2, [r3, #0]
  return -1;
 8002cb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <_exit>:

void _exit (int status)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ffe7 	bl	8002ca0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cd2:	e7fe      	b.n	8002cd2 <_exit+0x12>

08002cd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	e00a      	b.n	8002cfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ce6:	f3af 8000 	nop.w
 8002cea:	4601      	mov	r1, r0
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	60ba      	str	r2, [r7, #8]
 8002cf2:	b2ca      	uxtb	r2, r1
 8002cf4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	dbf0      	blt.n	8002ce6 <_read+0x12>
  }

  return len;
 8002d04:	687b      	ldr	r3, [r7, #4]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <_close>:
  }
  return len;
}

int _close(int file)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d36:	605a      	str	r2, [r3, #4]
  return 0;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <_isatty>:

int _isatty(int file)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d4e:	2301      	movs	r3, #1
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d80:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <_sbrk+0x5c>)
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <_sbrk+0x60>)
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d8c:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <_sbrk+0x64>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d102      	bne.n	8002d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d94:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <_sbrk+0x64>)
 8002d96:	4a12      	ldr	r2, [pc, #72]	; (8002de0 <_sbrk+0x68>)
 8002d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d9a:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <_sbrk+0x64>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d207      	bcs.n	8002db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002da8:	f007 f9d0 	bl	800a14c <__errno>
 8002dac:	4603      	mov	r3, r0
 8002dae:	220c      	movs	r2, #12
 8002db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002db2:	f04f 33ff 	mov.w	r3, #4294967295
 8002db6:	e009      	b.n	8002dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <_sbrk+0x64>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dbe:	4b07      	ldr	r3, [pc, #28]	; (8002ddc <_sbrk+0x64>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	4a05      	ldr	r2, [pc, #20]	; (8002ddc <_sbrk+0x64>)
 8002dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dca:	68fb      	ldr	r3, [r7, #12]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20020000 	.word	0x20020000
 8002dd8:	00000400 	.word	0x00000400
 8002ddc:	200004d0 	.word	0x200004d0
 8002de0:	20000660 	.word	0x20000660

08002de4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <SystemInit+0x20>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dee:	4a05      	ldr	r2, [pc, #20]	; (8002e04 <SystemInit+0x20>)
 8002df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b098      	sub	sp, #96	; 0x60
 8002e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	60da      	str	r2, [r3, #12]
 8002e28:	611a      	str	r2, [r3, #16]
 8002e2a:	615a      	str	r2, [r3, #20]
 8002e2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	2234      	movs	r2, #52	; 0x34
 8002e32:	2100      	movs	r1, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f007 f9c7 	bl	800a1c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e3a:	4b3a      	ldr	r3, [pc, #232]	; (8002f24 <MX_TIM1_Init+0x11c>)
 8002e3c:	4a3a      	ldr	r2, [pc, #232]	; (8002f28 <MX_TIM1_Init+0x120>)
 8002e3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8002e40:	4b38      	ldr	r3, [pc, #224]	; (8002f24 <MX_TIM1_Init+0x11c>)
 8002e42:	2209      	movs	r2, #9
 8002e44:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e46:	4b37      	ldr	r3, [pc, #220]	; (8002f24 <MX_TIM1_Init+0x11c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8002e4c:	4b35      	ldr	r3, [pc, #212]	; (8002f24 <MX_TIM1_Init+0x11c>)
 8002e4e:	2263      	movs	r2, #99	; 0x63
 8002e50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e52:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <MX_TIM1_Init+0x11c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e58:	4b32      	ldr	r3, [pc, #200]	; (8002f24 <MX_TIM1_Init+0x11c>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e5e:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <MX_TIM1_Init+0x11c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002e64:	482f      	ldr	r0, [pc, #188]	; (8002f24 <MX_TIM1_Init+0x11c>)
 8002e66:	f003 fffd 	bl	8006e64 <HAL_TIM_PWM_Init>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002e70:	f7ff f960 	bl	8002134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e74:	2300      	movs	r3, #0
 8002e76:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e84:	4619      	mov	r1, r3
 8002e86:	4827      	ldr	r0, [pc, #156]	; (8002f24 <MX_TIM1_Init+0x11c>)
 8002e88:	f004 ff0a 	bl	8007ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002e92:	f7ff f94f 	bl	8002134 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e96:	2360      	movs	r3, #96	; 0x60
 8002e98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002eb2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	4619      	mov	r1, r3
 8002eba:	481a      	ldr	r0, [pc, #104]	; (8002f24 <MX_TIM1_Init+0x11c>)
 8002ebc:	f004 f9d8 	bl	8007270 <HAL_TIM_PWM_ConfigChannel>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002ec6:	f7ff f935 	bl	8002134 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ede:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ee2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002ef0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002efa:	2300      	movs	r3, #0
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002efe:	2300      	movs	r3, #0
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f02:	1d3b      	adds	r3, r7, #4
 8002f04:	4619      	mov	r1, r3
 8002f06:	4807      	ldr	r0, [pc, #28]	; (8002f24 <MX_TIM1_Init+0x11c>)
 8002f08:	f004 ff60 	bl	8007dcc <HAL_TIMEx_ConfigBreakDeadTime>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002f12:	f7ff f90f 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002f16:	4803      	ldr	r0, [pc, #12]	; (8002f24 <MX_TIM1_Init+0x11c>)
 8002f18:	f000 f828 	bl	8002f6c <HAL_TIM_MspPostInit>

}
 8002f1c:	bf00      	nop
 8002f1e:	3760      	adds	r7, #96	; 0x60
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	200004d4 	.word	0x200004d4
 8002f28:	40012c00 	.word	0x40012c00

08002f2c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <HAL_TIM_PWM_MspInit+0x38>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d10b      	bne.n	8002f56 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f42:	4a09      	ldr	r2, [pc, #36]	; (8002f68 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f48:	6613      	str	r3, [r2, #96]	; 0x60
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40021000 	.word	0x40021000

08002f6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 030c 	add.w	r3, r7, #12
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a12      	ldr	r2, [pc, #72]	; (8002fd4 <HAL_TIM_MspPostInit+0x68>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d11d      	bne.n	8002fca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f8e:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <HAL_TIM_MspPostInit+0x6c>)
 8002f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f92:	4a11      	ldr	r2, [pc, #68]	; (8002fd8 <HAL_TIM_MspPostInit+0x6c>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f9a:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <HAL_TIM_MspPostInit+0x6c>)
 8002f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MCU_FLY_PWM_Pin;
 8002fa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002faa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002fb8:	2306      	movs	r3, #6
 8002fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MCU_FLY_PWM_GPIO_Port, &GPIO_InitStruct);
 8002fbc:	f107 030c 	add.w	r3, r7, #12
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fc6:	f002 fd6b 	bl	8005aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002fca:	bf00      	nop
 8002fcc:	3720      	adds	r7, #32
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40012c00 	.word	0x40012c00
 8002fd8:	40021000 	.word	0x40021000

08002fdc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002fe0:	4b21      	ldr	r3, [pc, #132]	; (8003068 <MX_LPUART1_UART_Init+0x8c>)
 8002fe2:	4a22      	ldr	r2, [pc, #136]	; (800306c <MX_LPUART1_UART_Init+0x90>)
 8002fe4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002fe6:	4b20      	ldr	r3, [pc, #128]	; (8003068 <MX_LPUART1_UART_Init+0x8c>)
 8002fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fee:	4b1e      	ldr	r3, [pc, #120]	; (8003068 <MX_LPUART1_UART_Init+0x8c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002ff4:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <MX_LPUART1_UART_Init+0x8c>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <MX_LPUART1_UART_Init+0x8c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <MX_LPUART1_UART_Init+0x8c>)
 8003002:	220c      	movs	r2, #12
 8003004:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003006:	4b18      	ldr	r3, [pc, #96]	; (8003068 <MX_LPUART1_UART_Init+0x8c>)
 8003008:	2200      	movs	r2, #0
 800300a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800300c:	4b16      	ldr	r3, [pc, #88]	; (8003068 <MX_LPUART1_UART_Init+0x8c>)
 800300e:	2200      	movs	r2, #0
 8003010:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <MX_LPUART1_UART_Init+0x8c>)
 8003014:	2200      	movs	r2, #0
 8003016:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003018:	4b13      	ldr	r3, [pc, #76]	; (8003068 <MX_LPUART1_UART_Init+0x8c>)
 800301a:	2200      	movs	r2, #0
 800301c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800301e:	4812      	ldr	r0, [pc, #72]	; (8003068 <MX_LPUART1_UART_Init+0x8c>)
 8003020:	f004 ff68 	bl	8007ef4 <HAL_UART_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800302a:	f7ff f883 	bl	8002134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800302e:	2100      	movs	r1, #0
 8003030:	480d      	ldr	r0, [pc, #52]	; (8003068 <MX_LPUART1_UART_Init+0x8c>)
 8003032:	f006 ffc0 	bl	8009fb6 <HAL_UARTEx_SetTxFifoThreshold>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800303c:	f7ff f87a 	bl	8002134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003040:	2100      	movs	r1, #0
 8003042:	4809      	ldr	r0, [pc, #36]	; (8003068 <MX_LPUART1_UART_Init+0x8c>)
 8003044:	f006 fff5 	bl	800a032 <HAL_UARTEx_SetRxFifoThreshold>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800304e:	f7ff f871 	bl	8002134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003052:	4805      	ldr	r0, [pc, #20]	; (8003068 <MX_LPUART1_UART_Init+0x8c>)
 8003054:	f006 ff76 	bl	8009f44 <HAL_UARTEx_DisableFifoMode>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800305e:	f7ff f869 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000520 	.word	0x20000520
 800306c:	40008000 	.word	0x40008000

08003070 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003074:	4b22      	ldr	r3, [pc, #136]	; (8003100 <MX_USART3_UART_Init+0x90>)
 8003076:	4a23      	ldr	r2, [pc, #140]	; (8003104 <MX_USART3_UART_Init+0x94>)
 8003078:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 250000;
 800307a:	4b21      	ldr	r3, [pc, #132]	; (8003100 <MX_USART3_UART_Init+0x90>)
 800307c:	4a22      	ldr	r2, [pc, #136]	; (8003108 <MX_USART3_UART_Init+0x98>)
 800307e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003080:	4b1f      	ldr	r3, [pc, #124]	; (8003100 <MX_USART3_UART_Init+0x90>)
 8003082:	2200      	movs	r2, #0
 8003084:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003086:	4b1e      	ldr	r3, [pc, #120]	; (8003100 <MX_USART3_UART_Init+0x90>)
 8003088:	2200      	movs	r2, #0
 800308a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800308c:	4b1c      	ldr	r3, [pc, #112]	; (8003100 <MX_USART3_UART_Init+0x90>)
 800308e:	2200      	movs	r2, #0
 8003090:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003092:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <MX_USART3_UART_Init+0x90>)
 8003094:	220c      	movs	r2, #12
 8003096:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003098:	4b19      	ldr	r3, [pc, #100]	; (8003100 <MX_USART3_UART_Init+0x90>)
 800309a:	2200      	movs	r2, #0
 800309c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800309e:	4b18      	ldr	r3, [pc, #96]	; (8003100 <MX_USART3_UART_Init+0x90>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030a4:	4b16      	ldr	r3, [pc, #88]	; (8003100 <MX_USART3_UART_Init+0x90>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030aa:	4b15      	ldr	r3, [pc, #84]	; (8003100 <MX_USART3_UART_Init+0x90>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030b0:	4b13      	ldr	r3, [pc, #76]	; (8003100 <MX_USART3_UART_Init+0x90>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030b6:	4812      	ldr	r0, [pc, #72]	; (8003100 <MX_USART3_UART_Init+0x90>)
 80030b8:	f004 ff1c 	bl	8007ef4 <HAL_UART_Init>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80030c2:	f7ff f837 	bl	8002134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030c6:	2100      	movs	r1, #0
 80030c8:	480d      	ldr	r0, [pc, #52]	; (8003100 <MX_USART3_UART_Init+0x90>)
 80030ca:	f006 ff74 	bl	8009fb6 <HAL_UARTEx_SetTxFifoThreshold>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80030d4:	f7ff f82e 	bl	8002134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030d8:	2100      	movs	r1, #0
 80030da:	4809      	ldr	r0, [pc, #36]	; (8003100 <MX_USART3_UART_Init+0x90>)
 80030dc:	f006 ffa9 	bl	800a032 <HAL_UARTEx_SetRxFifoThreshold>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80030e6:	f7ff f825 	bl	8002134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80030ea:	4805      	ldr	r0, [pc, #20]	; (8003100 <MX_USART3_UART_Init+0x90>)
 80030ec:	f006 ff2a 	bl	8009f44 <HAL_UARTEx_DisableFifoMode>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80030f6:	f7ff f81d 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	200005b4 	.word	0x200005b4
 8003104:	40004800 	.word	0x40004800
 8003108:	0003d090 	.word	0x0003d090

0800310c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b0a0      	sub	sp, #128	; 0x80
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003114:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003124:	f107 0318 	add.w	r3, r7, #24
 8003128:	2254      	movs	r2, #84	; 0x54
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f007 f84b 	bl	800a1c8 <memset>
  if(uartHandle->Instance==LPUART1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a41      	ldr	r2, [pc, #260]	; (800323c <HAL_UART_MspInit+0x130>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d137      	bne.n	80031ac <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800313c:	2320      	movs	r3, #32
 800313e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003140:	2300      	movs	r3, #0
 8003142:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003144:	f107 0318 	add.w	r3, r7, #24
 8003148:	4618      	mov	r0, r3
 800314a:	f003 fc3d 	bl	80069c8 <HAL_RCCEx_PeriphCLKConfig>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003154:	f7fe ffee 	bl	8002134 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003158:	4b39      	ldr	r3, [pc, #228]	; (8003240 <HAL_UART_MspInit+0x134>)
 800315a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315c:	4a38      	ldr	r2, [pc, #224]	; (8003240 <HAL_UART_MspInit+0x134>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003164:	4b36      	ldr	r3, [pc, #216]	; (8003240 <HAL_UART_MspInit+0x134>)
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003170:	4b33      	ldr	r3, [pc, #204]	; (8003240 <HAL_UART_MspInit+0x134>)
 8003172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003174:	4a32      	ldr	r2, [pc, #200]	; (8003240 <HAL_UART_MspInit+0x134>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800317c:	4b30      	ldr	r3, [pc, #192]	; (8003240 <HAL_UART_MspInit+0x134>)
 800317e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003188:	230c      	movs	r3, #12
 800318a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318c:	2302      	movs	r3, #2
 800318e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2300      	movs	r3, #0
 8003192:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003194:	2300      	movs	r3, #0
 8003196:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003198:	230c      	movs	r3, #12
 800319a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80031a0:	4619      	mov	r1, r3
 80031a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031a6:	f002 fc7b 	bl	8005aa0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80031aa:	e043      	b.n	8003234 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a24      	ldr	r2, [pc, #144]	; (8003244 <HAL_UART_MspInit+0x138>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d13e      	bne.n	8003234 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80031b6:	2304      	movs	r3, #4
 80031b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80031ba:	2300      	movs	r3, #0
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031be:	f107 0318 	add.w	r3, r7, #24
 80031c2:	4618      	mov	r0, r3
 80031c4:	f003 fc00 	bl	80069c8 <HAL_RCCEx_PeriphCLKConfig>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80031ce:	f7fe ffb1 	bl	8002134 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031d2:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <HAL_UART_MspInit+0x134>)
 80031d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d6:	4a1a      	ldr	r2, [pc, #104]	; (8003240 <HAL_UART_MspInit+0x134>)
 80031d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031dc:	6593      	str	r3, [r2, #88]	; 0x58
 80031de:	4b18      	ldr	r3, [pc, #96]	; (8003240 <HAL_UART_MspInit+0x134>)
 80031e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <HAL_UART_MspInit+0x134>)
 80031ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ee:	4a14      	ldr	r2, [pc, #80]	; (8003240 <HAL_UART_MspInit+0x134>)
 80031f0:	f043 0304 	orr.w	r3, r3, #4
 80031f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_UART_MspInit+0x134>)
 80031f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003202:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003206:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003208:	2302      	movs	r3, #2
 800320a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003210:	2300      	movs	r3, #0
 8003212:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003214:	2307      	movs	r3, #7
 8003216:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003218:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800321c:	4619      	mov	r1, r3
 800321e:	480a      	ldr	r0, [pc, #40]	; (8003248 <HAL_UART_MspInit+0x13c>)
 8003220:	f002 fc3e 	bl	8005aa0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003224:	2200      	movs	r2, #0
 8003226:	2100      	movs	r1, #0
 8003228:	2027      	movs	r0, #39	; 0x27
 800322a:	f002 f8d2 	bl	80053d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800322e:	2027      	movs	r0, #39	; 0x27
 8003230:	f002 f8e9 	bl	8005406 <HAL_NVIC_EnableIRQ>
}
 8003234:	bf00      	nop
 8003236:	3780      	adds	r7, #128	; 0x80
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40008000 	.word	0x40008000
 8003240:	40021000 	.word	0x40021000
 8003244:	40004800 	.word	0x40004800
 8003248:	48000800 	.word	0x48000800

0800324c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800324c:	480d      	ldr	r0, [pc, #52]	; (8003284 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800324e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003250:	f7ff fdc8 	bl	8002de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003254:	480c      	ldr	r0, [pc, #48]	; (8003288 <LoopForever+0x6>)
  ldr r1, =_edata
 8003256:	490d      	ldr	r1, [pc, #52]	; (800328c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003258:	4a0d      	ldr	r2, [pc, #52]	; (8003290 <LoopForever+0xe>)
  movs r3, #0
 800325a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800325c:	e002      	b.n	8003264 <LoopCopyDataInit>

0800325e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800325e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003262:	3304      	adds	r3, #4

08003264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003268:	d3f9      	bcc.n	800325e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800326a:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <LoopForever+0x12>)
  ldr r4, =_ebss
 800326c:	4c0a      	ldr	r4, [pc, #40]	; (8003298 <LoopForever+0x16>)
  movs r3, #0
 800326e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003270:	e001      	b.n	8003276 <LoopFillZerobss>

08003272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003274:	3204      	adds	r2, #4

08003276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003278:	d3fb      	bcc.n	8003272 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800327a:	f006 ff81 	bl	800a180 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800327e:	f7fe feb7 	bl	8001ff0 <main>

08003282 <LoopForever>:

LoopForever:
    b LoopForever
 8003282:	e7fe      	b.n	8003282 <LoopForever>
  ldr   r0, =_estack
 8003284:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800328c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003290:	0800e07c 	.word	0x0800e07c
  ldr r2, =_sbss
 8003294:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003298:	2000065c 	.word	0x2000065c

0800329c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800329c:	e7fe      	b.n	800329c <ADC3_IRQHandler>

0800329e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032a8:	2003      	movs	r0, #3
 80032aa:	f002 f887 	bl	80053bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032ae:	2000      	movs	r0, #0
 80032b0:	f000 f80e 	bl	80032d0 <HAL_InitTick>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	71fb      	strb	r3, [r7, #7]
 80032be:	e001      	b.n	80032c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032c0:	f7ff fb2c 	bl	800291c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032c4:	79fb      	ldrb	r3, [r7, #7]

}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80032dc:	4b16      	ldr	r3, [pc, #88]	; (8003338 <HAL_InitTick+0x68>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d022      	beq.n	800332a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80032e4:	4b15      	ldr	r3, [pc, #84]	; (800333c <HAL_InitTick+0x6c>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b13      	ldr	r3, [pc, #76]	; (8003338 <HAL_InitTick+0x68>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80032f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	4618      	mov	r0, r3
 80032fa:	f002 f892 	bl	8005422 <HAL_SYSTICK_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10f      	bne.n	8003324 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b0f      	cmp	r3, #15
 8003308:	d809      	bhi.n	800331e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800330a:	2200      	movs	r2, #0
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	f04f 30ff 	mov.w	r0, #4294967295
 8003312:	f002 f85e 	bl	80053d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003316:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <HAL_InitTick+0x70>)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	e007      	b.n	800332e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	73fb      	strb	r3, [r7, #15]
 8003322:	e004      	b.n	800332e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
 8003328:	e001      	b.n	800332e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800332e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	2000000c 	.word	0x2000000c
 800333c:	20000004 	.word	0x20000004
 8003340:	20000008 	.word	0x20000008

08003344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <HAL_IncTick+0x1c>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4b05      	ldr	r3, [pc, #20]	; (8003364 <HAL_IncTick+0x20>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4413      	add	r3, r2
 8003352:	4a03      	ldr	r2, [pc, #12]	; (8003360 <HAL_IncTick+0x1c>)
 8003354:	6013      	str	r3, [r2, #0]
}
 8003356:	bf00      	nop
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	20000648 	.word	0x20000648
 8003364:	2000000c 	.word	0x2000000c

08003368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return uwTick;
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <HAL_GetTick+0x14>)
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	20000648 	.word	0x20000648

08003380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003388:	f7ff ffee 	bl	8003368 <HAL_GetTick>
 800338c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d004      	beq.n	80033a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_Delay+0x40>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4413      	add	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033a4:	bf00      	nop
 80033a6:	f7ff ffdf 	bl	8003368 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d8f7      	bhi.n	80033a6 <HAL_Delay+0x26>
  {
  }
}
 80033b6:	bf00      	nop
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	2000000c 	.word	0x2000000c

080033c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	609a      	str	r2, [r3, #8]
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	609a      	str	r2, [r3, #8]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3360      	adds	r3, #96	; 0x60
 800343e:	461a      	mov	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4b08      	ldr	r3, [pc, #32]	; (8003470 <LL_ADC_SetOffset+0x44>)
 800344e:	4013      	ands	r3, r2
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	4313      	orrs	r3, r2
 800345c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003464:	bf00      	nop
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	03fff000 	.word	0x03fff000

08003474 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3360      	adds	r3, #96	; 0x60
 8003482:	461a      	mov	r2, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003494:	4618      	mov	r0, r3
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3360      	adds	r3, #96	; 0x60
 80034b0:	461a      	mov	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	431a      	orrs	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80034ca:	bf00      	nop
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b087      	sub	sp, #28
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	3360      	adds	r3, #96	; 0x60
 80034e6:	461a      	mov	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003500:	bf00      	nop
 8003502:	371c      	adds	r7, #28
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3360      	adds	r3, #96	; 0x60
 800351c:	461a      	mov	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	431a      	orrs	r2, r3
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003536:	bf00      	nop
 8003538:	371c      	adds	r7, #28
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	615a      	str	r2, [r3, #20]
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800358e:	b480      	push	{r7}
 8003590:	b087      	sub	sp, #28
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3330      	adds	r3, #48	; 0x30
 800359e:	461a      	mov	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	0a1b      	lsrs	r3, r3, #8
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	4413      	add	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	211f      	movs	r1, #31
 80035ba:	fa01 f303 	lsl.w	r3, r1, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	401a      	ands	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	0e9b      	lsrs	r3, r3, #26
 80035c6:	f003 011f 	and.w	r1, r3, #31
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	fa01 f303 	lsl.w	r3, r1, r3
 80035d4:	431a      	orrs	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3314      	adds	r3, #20
 800361c:	461a      	mov	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	0e5b      	lsrs	r3, r3, #25
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	4413      	add	r3, r2
 800362a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	0d1b      	lsrs	r3, r3, #20
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	2107      	movs	r1, #7
 800363a:	fa01 f303 	lsl.w	r3, r1, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	401a      	ands	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	0d1b      	lsrs	r3, r3, #20
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	fa01 f303 	lsl.w	r3, r1, r3
 8003650:	431a      	orrs	r2, r3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367c:	43db      	mvns	r3, r3
 800367e:	401a      	ands	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f003 0318 	and.w	r3, r3, #24
 8003686:	4908      	ldr	r1, [pc, #32]	; (80036a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003688:	40d9      	lsrs	r1, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	400b      	ands	r3, r1
 800368e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003692:	431a      	orrs	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800369a:	bf00      	nop
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	0007ffff 	.word	0x0007ffff

080036ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 031f 	and.w	r3, r3, #31
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80036f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6093      	str	r3, [r2, #8]
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800371c:	d101      	bne.n	8003722 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003740:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003744:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003768:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800376c:	d101      	bne.n	8003772 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003790:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003794:	f043 0201 	orr.w	r2, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037bc:	f043 0202 	orr.w	r2, r3, #2
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <LL_ADC_IsEnabled+0x18>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <LL_ADC_IsEnabled+0x1a>
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b02      	cmp	r3, #2
 8003808:	d101      	bne.n	800380e <LL_ADC_IsDisableOngoing+0x18>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <LL_ADC_IsDisableOngoing+0x1a>
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800382c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003830:	f043 0204 	orr.w	r2, r3, #4
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b04      	cmp	r3, #4
 8003856:	d101      	bne.n	800385c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b08      	cmp	r3, #8
 800387c:	d101      	bne.n	8003882 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003890:	b590      	push	{r4, r7, lr}
 8003892:	b089      	sub	sp, #36	; 0x24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e1a9      	b.n	8003bfe <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d109      	bne.n	80038cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7fd fd47 	bl	800134c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ff19 	bl	8003708 <LL_ADC_IsDeepPowerDownEnabled>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d004      	beq.n	80038e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff feff 	bl	80036e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff ff34 	bl	8003758 <LL_ADC_IsInternalRegulatorEnabled>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d115      	bne.n	8003922 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff ff18 	bl	8003730 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003900:	4b9c      	ldr	r3, [pc, #624]	; (8003b74 <HAL_ADC_Init+0x2e4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	099b      	lsrs	r3, r3, #6
 8003906:	4a9c      	ldr	r2, [pc, #624]	; (8003b78 <HAL_ADC_Init+0x2e8>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	099b      	lsrs	r3, r3, #6
 800390e:	3301      	adds	r3, #1
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003914:	e002      	b.n	800391c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3b01      	subs	r3, #1
 800391a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f9      	bne.n	8003916 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff ff16 	bl	8003758 <LL_ADC_IsInternalRegulatorEnabled>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10d      	bne.n	800394e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003936:	f043 0210 	orr.w	r2, r3, #16
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003942:	f043 0201 	orr.w	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff ff76 	bl	8003844 <LL_ADC_REG_IsConversionOngoing>
 8003958:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	f040 8142 	bne.w	8003bec <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2b00      	cmp	r3, #0
 800396c:	f040 813e 	bne.w	8003bec <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003974:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003978:	f043 0202 	orr.w	r2, r3, #2
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff ff23 	bl	80037d0 <LL_ADC_IsEnabled>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d141      	bne.n	8003a14 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003998:	d004      	beq.n	80039a4 <HAL_ADC_Init+0x114>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a77      	ldr	r2, [pc, #476]	; (8003b7c <HAL_ADC_Init+0x2ec>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d10f      	bne.n	80039c4 <HAL_ADC_Init+0x134>
 80039a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80039a8:	f7ff ff12 	bl	80037d0 <LL_ADC_IsEnabled>
 80039ac:	4604      	mov	r4, r0
 80039ae:	4873      	ldr	r0, [pc, #460]	; (8003b7c <HAL_ADC_Init+0x2ec>)
 80039b0:	f7ff ff0e 	bl	80037d0 <LL_ADC_IsEnabled>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4323      	orrs	r3, r4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf0c      	ite	eq
 80039bc:	2301      	moveq	r3, #1
 80039be:	2300      	movne	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e012      	b.n	80039ea <HAL_ADC_Init+0x15a>
 80039c4:	486e      	ldr	r0, [pc, #440]	; (8003b80 <HAL_ADC_Init+0x2f0>)
 80039c6:	f7ff ff03 	bl	80037d0 <LL_ADC_IsEnabled>
 80039ca:	4604      	mov	r4, r0
 80039cc:	486d      	ldr	r0, [pc, #436]	; (8003b84 <HAL_ADC_Init+0x2f4>)
 80039ce:	f7ff feff 	bl	80037d0 <LL_ADC_IsEnabled>
 80039d2:	4603      	mov	r3, r0
 80039d4:	431c      	orrs	r4, r3
 80039d6:	486c      	ldr	r0, [pc, #432]	; (8003b88 <HAL_ADC_Init+0x2f8>)
 80039d8:	f7ff fefa 	bl	80037d0 <LL_ADC_IsEnabled>
 80039dc:	4603      	mov	r3, r0
 80039de:	4323      	orrs	r3, r4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bf0c      	ite	eq
 80039e4:	2301      	moveq	r3, #1
 80039e6:	2300      	movne	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d012      	beq.n	8003a14 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039f6:	d004      	beq.n	8003a02 <HAL_ADC_Init+0x172>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a5f      	ldr	r2, [pc, #380]	; (8003b7c <HAL_ADC_Init+0x2ec>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d101      	bne.n	8003a06 <HAL_ADC_Init+0x176>
 8003a02:	4a62      	ldr	r2, [pc, #392]	; (8003b8c <HAL_ADC_Init+0x2fc>)
 8003a04:	e000      	b.n	8003a08 <HAL_ADC_Init+0x178>
 8003a06:	4a62      	ldr	r2, [pc, #392]	; (8003b90 <HAL_ADC_Init+0x300>)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	f7ff fcd8 	bl	80033c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	7f5b      	ldrb	r3, [r3, #29]
 8003a18:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a1e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003a24:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003a2a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a32:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d106      	bne.n	8003a50 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a46:	3b01      	subs	r3, #1
 8003a48:	045b      	lsls	r3, r3, #17
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d009      	beq.n	8003a6c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	4b48      	ldr	r3, [pc, #288]	; (8003b94 <HAL_ADC_Init+0x304>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	69b9      	ldr	r1, [r7, #24]
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff fee5 	bl	800386a <LL_ADC_INJ_IsConversionOngoing>
 8003aa0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d17f      	bne.n	8003ba8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d17c      	bne.n	8003ba8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ab2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003aba:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003abc:	4313      	orrs	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aca:	f023 0302 	bic.w	r3, r3, #2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6812      	ldr	r2, [r2, #0]
 8003ad2:	69b9      	ldr	r1, [r7, #24]
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d017      	beq.n	8003b10 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003aee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003af8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003afc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6911      	ldr	r1, [r2, #16]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003b0e:	e013      	b.n	8003b38 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691a      	ldr	r2, [r3, #16]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b34:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d12a      	bne.n	8003b98 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b4c:	f023 0304 	bic.w	r3, r3, #4
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b58:	4311      	orrs	r1, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b5e:	4311      	orrs	r1, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b64:	430a      	orrs	r2, r1
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0201 	orr.w	r2, r2, #1
 8003b70:	611a      	str	r2, [r3, #16]
 8003b72:	e019      	b.n	8003ba8 <HAL_ADC_Init+0x318>
 8003b74:	20000004 	.word	0x20000004
 8003b78:	053e2d63 	.word	0x053e2d63
 8003b7c:	50000100 	.word	0x50000100
 8003b80:	50000400 	.word	0x50000400
 8003b84:	50000500 	.word	0x50000500
 8003b88:	50000600 	.word	0x50000600
 8003b8c:	50000300 	.word	0x50000300
 8003b90:	50000700 	.word	0x50000700
 8003b94:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691a      	ldr	r2, [r3, #16]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d10c      	bne.n	8003bca <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	f023 010f 	bic.w	r1, r3, #15
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	1e5a      	subs	r2, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
 8003bc8:	e007      	b.n	8003bda <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 020f 	bic.w	r2, r2, #15
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bde:	f023 0303 	bic.w	r3, r3, #3
 8003be2:	f043 0201 	orr.w	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bea:	e007      	b.n	8003bfc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf0:	f043 0210 	orr.w	r2, r3, #16
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003bfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3724      	adds	r7, #36	; 0x24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd90      	pop	{r4, r7, pc}
 8003c06:	bf00      	nop

08003c08 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c1c:	d004      	beq.n	8003c28 <HAL_ADC_Start_DMA+0x20>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a5a      	ldr	r2, [pc, #360]	; (8003d8c <HAL_ADC_Start_DMA+0x184>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d101      	bne.n	8003c2c <HAL_ADC_Start_DMA+0x24>
 8003c28:	4b59      	ldr	r3, [pc, #356]	; (8003d90 <HAL_ADC_Start_DMA+0x188>)
 8003c2a:	e000      	b.n	8003c2e <HAL_ADC_Start_DMA+0x26>
 8003c2c:	4b59      	ldr	r3, [pc, #356]	; (8003d94 <HAL_ADC_Start_DMA+0x18c>)
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff fd3c 	bl	80036ac <LL_ADC_GetMultimode>
 8003c34:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff fe02 	bl	8003844 <LL_ADC_REG_IsConversionOngoing>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f040 809b 	bne.w	8003d7e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_ADC_Start_DMA+0x4e>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e096      	b.n	8003d84 <HAL_ADC_Start_DMA+0x17c>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a4d      	ldr	r2, [pc, #308]	; (8003d98 <HAL_ADC_Start_DMA+0x190>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d008      	beq.n	8003c7a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	2b05      	cmp	r3, #5
 8003c72:	d002      	beq.n	8003c7a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2b09      	cmp	r3, #9
 8003c78:	d17a      	bne.n	8003d70 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 ff56 	bl	8004b2c <ADC_Enable>
 8003c80:	4603      	mov	r3, r0
 8003c82:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003c84:	7dfb      	ldrb	r3, [r7, #23]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d16d      	bne.n	8003d66 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a3a      	ldr	r2, [pc, #232]	; (8003d8c <HAL_ADC_Start_DMA+0x184>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d009      	beq.n	8003cbc <HAL_ADC_Start_DMA+0xb4>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a3b      	ldr	r2, [pc, #236]	; (8003d9c <HAL_ADC_Start_DMA+0x194>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d002      	beq.n	8003cb8 <HAL_ADC_Start_DMA+0xb0>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	e003      	b.n	8003cc0 <HAL_ADC_Start_DMA+0xb8>
 8003cb8:	4b39      	ldr	r3, [pc, #228]	; (8003da0 <HAL_ADC_Start_DMA+0x198>)
 8003cba:	e001      	b.n	8003cc0 <HAL_ADC_Start_DMA+0xb8>
 8003cbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d002      	beq.n	8003cce <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d105      	bne.n	8003cda <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d006      	beq.n	8003cf4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cea:	f023 0206 	bic.w	r2, r3, #6
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	661a      	str	r2, [r3, #96]	; 0x60
 8003cf2:	e002      	b.n	8003cfa <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	4a29      	ldr	r2, [pc, #164]	; (8003da4 <HAL_ADC_Start_DMA+0x19c>)
 8003d00:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d06:	4a28      	ldr	r2, [pc, #160]	; (8003da8 <HAL_ADC_Start_DMA+0x1a0>)
 8003d08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0e:	4a27      	ldr	r2, [pc, #156]	; (8003dac <HAL_ADC_Start_DMA+0x1a4>)
 8003d10:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	221c      	movs	r2, #28
 8003d18:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0210 	orr.w	r2, r2, #16
 8003d30:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0201 	orr.w	r2, r2, #1
 8003d40:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3340      	adds	r3, #64	; 0x40
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f001 fc1b 	bl	800558c <HAL_DMA_Start_IT>
 8003d56:	4603      	mov	r3, r0
 8003d58:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff fd5c 	bl	800381c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003d64:	e00d      	b.n	8003d82 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003d6e:	e008      	b.n	8003d82 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003d7c:	e001      	b.n	8003d82 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	50000100 	.word	0x50000100
 8003d90:	50000300 	.word	0x50000300
 8003d94:	50000700 	.word	0x50000700
 8003d98:	50000600 	.word	0x50000600
 8003d9c:	50000500 	.word	0x50000500
 8003da0:	50000400 	.word	0x50000400
 8003da4:	08004d17 	.word	0x08004d17
 8003da8:	08004def 	.word	0x08004def
 8003dac:	08004e0b 	.word	0x08004e0b

08003db0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003db8:	2300      	movs	r3, #0
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dd4:	d004      	beq.n	8003de0 <HAL_ADC_IRQHandler+0x30>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a8e      	ldr	r2, [pc, #568]	; (8004014 <HAL_ADC_IRQHandler+0x264>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d101      	bne.n	8003de4 <HAL_ADC_IRQHandler+0x34>
 8003de0:	4b8d      	ldr	r3, [pc, #564]	; (8004018 <HAL_ADC_IRQHandler+0x268>)
 8003de2:	e000      	b.n	8003de6 <HAL_ADC_IRQHandler+0x36>
 8003de4:	4b8d      	ldr	r3, [pc, #564]	; (800401c <HAL_ADC_IRQHandler+0x26c>)
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff fc60 	bl	80036ac <LL_ADC_GetMultimode>
 8003dec:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d017      	beq.n	8003e28 <HAL_ADC_IRQHandler+0x78>
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d012      	beq.n	8003e28 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d105      	bne.n	8003e1a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e12:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f001 f8ec 	bl	8004ff8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2202      	movs	r2, #2
 8003e26:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d004      	beq.n	8003e3c <HAL_ADC_IRQHandler+0x8c>
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10b      	bne.n	8003e54 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8094 	beq.w	8003f70 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 808e 	beq.w	8003f70 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d105      	bne.n	8003e6c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fb79 	bl	8003568 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d072      	beq.n	8003f62 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a64      	ldr	r2, [pc, #400]	; (8004014 <HAL_ADC_IRQHandler+0x264>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d009      	beq.n	8003e9a <HAL_ADC_IRQHandler+0xea>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a65      	ldr	r2, [pc, #404]	; (8004020 <HAL_ADC_IRQHandler+0x270>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d002      	beq.n	8003e96 <HAL_ADC_IRQHandler+0xe6>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	e003      	b.n	8003e9e <HAL_ADC_IRQHandler+0xee>
 8003e96:	4b63      	ldr	r3, [pc, #396]	; (8004024 <HAL_ADC_IRQHandler+0x274>)
 8003e98:	e001      	b.n	8003e9e <HAL_ADC_IRQHandler+0xee>
 8003e9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d008      	beq.n	8003eb8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2b05      	cmp	r3, #5
 8003eb0:	d002      	beq.n	8003eb8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b09      	cmp	r3, #9
 8003eb6:	d104      	bne.n	8003ec2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	623b      	str	r3, [r7, #32]
 8003ec0:	e014      	b.n	8003eec <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a53      	ldr	r2, [pc, #332]	; (8004014 <HAL_ADC_IRQHandler+0x264>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d009      	beq.n	8003ee0 <HAL_ADC_IRQHandler+0x130>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a53      	ldr	r2, [pc, #332]	; (8004020 <HAL_ADC_IRQHandler+0x270>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d002      	beq.n	8003edc <HAL_ADC_IRQHandler+0x12c>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	e003      	b.n	8003ee4 <HAL_ADC_IRQHandler+0x134>
 8003edc:	4b51      	ldr	r3, [pc, #324]	; (8004024 <HAL_ADC_IRQHandler+0x274>)
 8003ede:	e001      	b.n	8003ee4 <HAL_ADC_IRQHandler+0x134>
 8003ee0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ee4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d135      	bne.n	8003f62 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d12e      	bne.n	8003f62 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff fc9b 	bl	8003844 <LL_ADC_REG_IsConversionOngoing>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d11a      	bne.n	8003f4a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 020c 	bic.w	r2, r2, #12
 8003f22:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d112      	bne.n	8003f62 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f40:	f043 0201 	orr.w	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f48:	e00b      	b.n	8003f62 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4e:	f043 0210 	orr.w	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5a:	f043 0201 	orr.w	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fd ff6e 	bl	8001e44 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	220c      	movs	r2, #12
 8003f6e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <HAL_ADC_IRQHandler+0x1d4>
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10b      	bne.n	8003f9c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 80b3 	beq.w	80040f6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 80ad 	beq.w	80040f6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d105      	bne.n	8003fb4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fb14 	bl	80035e6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003fbe:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff facf 	bl	8003568 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fca:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a10      	ldr	r2, [pc, #64]	; (8004014 <HAL_ADC_IRQHandler+0x264>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d009      	beq.n	8003fea <HAL_ADC_IRQHandler+0x23a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a11      	ldr	r2, [pc, #68]	; (8004020 <HAL_ADC_IRQHandler+0x270>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d002      	beq.n	8003fe6 <HAL_ADC_IRQHandler+0x236>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	e003      	b.n	8003fee <HAL_ADC_IRQHandler+0x23e>
 8003fe6:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <HAL_ADC_IRQHandler+0x274>)
 8003fe8:	e001      	b.n	8003fee <HAL_ADC_IRQHandler+0x23e>
 8003fea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d008      	beq.n	8004008 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2b06      	cmp	r3, #6
 8004000:	d002      	beq.n	8004008 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2b07      	cmp	r3, #7
 8004006:	d10f      	bne.n	8004028 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	623b      	str	r3, [r7, #32]
 8004010:	e01f      	b.n	8004052 <HAL_ADC_IRQHandler+0x2a2>
 8004012:	bf00      	nop
 8004014:	50000100 	.word	0x50000100
 8004018:	50000300 	.word	0x50000300
 800401c:	50000700 	.word	0x50000700
 8004020:	50000500 	.word	0x50000500
 8004024:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a8b      	ldr	r2, [pc, #556]	; (800425c <HAL_ADC_IRQHandler+0x4ac>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_ADC_IRQHandler+0x296>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a8a      	ldr	r2, [pc, #552]	; (8004260 <HAL_ADC_IRQHandler+0x4b0>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d002      	beq.n	8004042 <HAL_ADC_IRQHandler+0x292>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	e003      	b.n	800404a <HAL_ADC_IRQHandler+0x29a>
 8004042:	4b88      	ldr	r3, [pc, #544]	; (8004264 <HAL_ADC_IRQHandler+0x4b4>)
 8004044:	e001      	b.n	800404a <HAL_ADC_IRQHandler+0x29a>
 8004046:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800404a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d047      	beq.n	80040e8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d007      	beq.n	8004072 <HAL_ADC_IRQHandler+0x2c2>
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d03f      	beq.n	80040e8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800406e:	2b00      	cmp	r3, #0
 8004070:	d13a      	bne.n	80040e8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407c:	2b40      	cmp	r3, #64	; 0x40
 800407e:	d133      	bne.n	80040e8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d12e      	bne.n	80040e8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff fbeb 	bl	800386a <LL_ADC_INJ_IsConversionOngoing>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d11a      	bne.n	80040d0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040a8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d112      	bne.n	80040e8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c6:	f043 0201 	orr.w	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80040ce:	e00b      	b.n	80040e8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d4:	f043 0210 	orr.w	r2, r3, #16
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e0:	f043 0201 	orr.w	r2, r3, #1
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 ff5d 	bl	8004fa8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2260      	movs	r2, #96	; 0x60
 80040f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d011      	beq.n	8004124 <HAL_ADC_IRQHandler+0x374>
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00c      	beq.n	8004124 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f8b4 	bl	8004284 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2280      	movs	r2, #128	; 0x80
 8004122:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412a:	2b00      	cmp	r3, #0
 800412c:	d012      	beq.n	8004154 <HAL_ADC_IRQHandler+0x3a4>
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00d      	beq.n	8004154 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 ff43 	bl	8004fd0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004152:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800415a:	2b00      	cmp	r3, #0
 800415c:	d012      	beq.n	8004184 <HAL_ADC_IRQHandler+0x3d4>
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00d      	beq.n	8004184 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 ff35 	bl	8004fe4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004182:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f003 0310 	and.w	r3, r3, #16
 800418a:	2b00      	cmp	r3, #0
 800418c:	d043      	beq.n	8004216 <HAL_ADC_IRQHandler+0x466>
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b00      	cmp	r3, #0
 8004196:	d03e      	beq.n	8004216 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80041a0:	2301      	movs	r3, #1
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
 80041a4:	e021      	b.n	80041ea <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d015      	beq.n	80041d8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041b4:	d004      	beq.n	80041c0 <HAL_ADC_IRQHandler+0x410>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a28      	ldr	r2, [pc, #160]	; (800425c <HAL_ADC_IRQHandler+0x4ac>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d101      	bne.n	80041c4 <HAL_ADC_IRQHandler+0x414>
 80041c0:	4b29      	ldr	r3, [pc, #164]	; (8004268 <HAL_ADC_IRQHandler+0x4b8>)
 80041c2:	e000      	b.n	80041c6 <HAL_ADC_IRQHandler+0x416>
 80041c4:	4b29      	ldr	r3, [pc, #164]	; (800426c <HAL_ADC_IRQHandler+0x4bc>)
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff fa7e 	bl	80036c8 <LL_ADC_GetMultiDMATransfer>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00b      	beq.n	80041ea <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80041d2:	2301      	movs	r3, #1
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
 80041d6:	e008      	b.n	80041ea <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80041e6:	2301      	movs	r3, #1
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d10e      	bne.n	800420e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004200:	f043 0202 	orr.w	r2, r3, #2
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f845 	bl	8004298 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2210      	movs	r2, #16
 8004214:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421c:	2b00      	cmp	r3, #0
 800421e:	d018      	beq.n	8004252 <HAL_ADC_IRQHandler+0x4a2>
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004226:	2b00      	cmp	r3, #0
 8004228:	d013      	beq.n	8004252 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423a:	f043 0208 	orr.w	r2, r3, #8
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800424a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 feb5 	bl	8004fbc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004252:	bf00      	nop
 8004254:	3728      	adds	r7, #40	; 0x28
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	50000100 	.word	0x50000100
 8004260:	50000500 	.word	0x50000500
 8004264:	50000400 	.word	0x50000400
 8004268:	50000300 	.word	0x50000300
 800426c:	50000700 	.word	0x50000700

08004270 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b0b6      	sub	sp, #216	; 0xd8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d102      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x24>
 80042ca:	2302      	movs	r3, #2
 80042cc:	f000 bc13 	b.w	8004af6 <HAL_ADC_ConfigChannel+0x84a>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff fab1 	bl	8003844 <LL_ADC_REG_IsConversionOngoing>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f040 83f3 	bne.w	8004ad0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6859      	ldr	r1, [r3, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	f7ff f949 	bl	800358e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff fa9f 	bl	8003844 <LL_ADC_REG_IsConversionOngoing>
 8004306:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff faab 	bl	800386a <LL_ADC_INJ_IsConversionOngoing>
 8004314:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004318:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800431c:	2b00      	cmp	r3, #0
 800431e:	f040 81d9 	bne.w	80046d4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004322:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 81d4 	bne.w	80046d4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004334:	d10f      	bne.n	8004356 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2200      	movs	r2, #0
 8004340:	4619      	mov	r1, r3
 8004342:	f7ff f963 	bl	800360c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff f8f7 	bl	8003542 <LL_ADC_SetSamplingTimeCommonConfig>
 8004354:	e00e      	b.n	8004374 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6819      	ldr	r1, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	461a      	mov	r2, r3
 8004364:	f7ff f952 	bl	800360c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2100      	movs	r1, #0
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff f8e7 	bl	8003542 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	695a      	ldr	r2, [r3, #20]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	08db      	lsrs	r3, r3, #3
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	2b04      	cmp	r3, #4
 8004394:	d022      	beq.n	80043dc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6919      	ldr	r1, [r3, #16]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043a6:	f7ff f841 	bl	800342c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6919      	ldr	r1, [r3, #16]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	461a      	mov	r2, r3
 80043b8:	f7ff f88d 	bl	80034d6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d102      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x126>
 80043cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043d0:	e000      	b.n	80043d4 <HAL_ADC_ConfigChannel+0x128>
 80043d2:	2300      	movs	r3, #0
 80043d4:	461a      	mov	r2, r3
 80043d6:	f7ff f899 	bl	800350c <LL_ADC_SetOffsetSaturation>
 80043da:	e17b      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2100      	movs	r1, #0
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff f846 	bl	8003474 <LL_ADC_GetOffsetChannel>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x15c>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff f83b 	bl	8003474 <LL_ADC_GetOffsetChannel>
 80043fe:	4603      	mov	r3, r0
 8004400:	0e9b      	lsrs	r3, r3, #26
 8004402:	f003 021f 	and.w	r2, r3, #31
 8004406:	e01e      	b.n	8004446 <HAL_ADC_ConfigChannel+0x19a>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2100      	movs	r1, #0
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff f830 	bl	8003474 <LL_ADC_GetOffsetChannel>
 8004414:	4603      	mov	r3, r0
 8004416:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800441e:	fa93 f3a3 	rbit	r3, r3
 8004422:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004426:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800442a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800442e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004436:	2320      	movs	r3, #32
 8004438:	e004      	b.n	8004444 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800443a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800443e:	fab3 f383 	clz	r3, r3
 8004442:	b2db      	uxtb	r3, r3
 8004444:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800444e:	2b00      	cmp	r3, #0
 8004450:	d105      	bne.n	800445e <HAL_ADC_ConfigChannel+0x1b2>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	0e9b      	lsrs	r3, r3, #26
 8004458:	f003 031f 	and.w	r3, r3, #31
 800445c:	e018      	b.n	8004490 <HAL_ADC_ConfigChannel+0x1e4>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004466:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800446a:	fa93 f3a3 	rbit	r3, r3
 800446e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004476:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800447a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004482:	2320      	movs	r3, #32
 8004484:	e004      	b.n	8004490 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004486:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800448a:	fab3 f383 	clz	r3, r3
 800448e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004490:	429a      	cmp	r2, r3
 8004492:	d106      	bne.n	80044a2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2200      	movs	r2, #0
 800449a:	2100      	movs	r1, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f7fe ffff 	bl	80034a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2101      	movs	r1, #1
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fe ffe3 	bl	8003474 <LL_ADC_GetOffsetChannel>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10a      	bne.n	80044ce <HAL_ADC_ConfigChannel+0x222>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2101      	movs	r1, #1
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe ffd8 	bl	8003474 <LL_ADC_GetOffsetChannel>
 80044c4:	4603      	mov	r3, r0
 80044c6:	0e9b      	lsrs	r3, r3, #26
 80044c8:	f003 021f 	and.w	r2, r3, #31
 80044cc:	e01e      	b.n	800450c <HAL_ADC_ConfigChannel+0x260>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2101      	movs	r1, #1
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fe ffcd 	bl	8003474 <LL_ADC_GetOffsetChannel>
 80044da:	4603      	mov	r3, r0
 80044dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044e4:	fa93 f3a3 	rbit	r3, r3
 80044e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80044ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80044f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80044fc:	2320      	movs	r3, #32
 80044fe:	e004      	b.n	800450a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004500:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004504:	fab3 f383 	clz	r3, r3
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004514:	2b00      	cmp	r3, #0
 8004516:	d105      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x278>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	0e9b      	lsrs	r3, r3, #26
 800451e:	f003 031f 	and.w	r3, r3, #31
 8004522:	e018      	b.n	8004556 <HAL_ADC_ConfigChannel+0x2aa>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004530:	fa93 f3a3 	rbit	r3, r3
 8004534:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004538:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800453c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004540:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004548:	2320      	movs	r3, #32
 800454a:	e004      	b.n	8004556 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800454c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004550:	fab3 f383 	clz	r3, r3
 8004554:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004556:	429a      	cmp	r2, r3
 8004558:	d106      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2200      	movs	r2, #0
 8004560:	2101      	movs	r1, #1
 8004562:	4618      	mov	r0, r3
 8004564:	f7fe ff9c 	bl	80034a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2102      	movs	r1, #2
 800456e:	4618      	mov	r0, r3
 8004570:	f7fe ff80 	bl	8003474 <LL_ADC_GetOffsetChannel>
 8004574:	4603      	mov	r3, r0
 8004576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10a      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x2e8>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2102      	movs	r1, #2
 8004584:	4618      	mov	r0, r3
 8004586:	f7fe ff75 	bl	8003474 <LL_ADC_GetOffsetChannel>
 800458a:	4603      	mov	r3, r0
 800458c:	0e9b      	lsrs	r3, r3, #26
 800458e:	f003 021f 	and.w	r2, r3, #31
 8004592:	e01e      	b.n	80045d2 <HAL_ADC_ConfigChannel+0x326>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2102      	movs	r1, #2
 800459a:	4618      	mov	r0, r3
 800459c:	f7fe ff6a 	bl	8003474 <LL_ADC_GetOffsetChannel>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045aa:	fa93 f3a3 	rbit	r3, r3
 80045ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80045b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80045ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80045c2:	2320      	movs	r3, #32
 80045c4:	e004      	b.n	80045d0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80045c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045ca:	fab3 f383 	clz	r3, r3
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d105      	bne.n	80045ea <HAL_ADC_ConfigChannel+0x33e>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	0e9b      	lsrs	r3, r3, #26
 80045e4:	f003 031f 	and.w	r3, r3, #31
 80045e8:	e016      	b.n	8004618 <HAL_ADC_ConfigChannel+0x36c>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045f6:	fa93 f3a3 	rbit	r3, r3
 80045fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80045fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004602:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800460a:	2320      	movs	r3, #32
 800460c:	e004      	b.n	8004618 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800460e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004612:	fab3 f383 	clz	r3, r3
 8004616:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004618:	429a      	cmp	r2, r3
 800461a:	d106      	bne.n	800462a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2200      	movs	r2, #0
 8004622:	2102      	movs	r1, #2
 8004624:	4618      	mov	r0, r3
 8004626:	f7fe ff3b 	bl	80034a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2103      	movs	r1, #3
 8004630:	4618      	mov	r0, r3
 8004632:	f7fe ff1f 	bl	8003474 <LL_ADC_GetOffsetChannel>
 8004636:	4603      	mov	r3, r0
 8004638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10a      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x3aa>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2103      	movs	r1, #3
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe ff14 	bl	8003474 <LL_ADC_GetOffsetChannel>
 800464c:	4603      	mov	r3, r0
 800464e:	0e9b      	lsrs	r3, r3, #26
 8004650:	f003 021f 	and.w	r2, r3, #31
 8004654:	e017      	b.n	8004686 <HAL_ADC_ConfigChannel+0x3da>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2103      	movs	r1, #3
 800465c:	4618      	mov	r0, r3
 800465e:	f7fe ff09 	bl	8003474 <LL_ADC_GetOffsetChannel>
 8004662:	4603      	mov	r3, r0
 8004664:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004668:	fa93 f3a3 	rbit	r3, r3
 800466c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800466e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004670:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004678:	2320      	movs	r3, #32
 800467a:	e003      	b.n	8004684 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800467c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800467e:	fab3 f383 	clz	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800468e:	2b00      	cmp	r3, #0
 8004690:	d105      	bne.n	800469e <HAL_ADC_ConfigChannel+0x3f2>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	0e9b      	lsrs	r3, r3, #26
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	e011      	b.n	80046c2 <HAL_ADC_ConfigChannel+0x416>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046a6:	fa93 f3a3 	rbit	r3, r3
 80046aa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80046ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80046b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80046b6:	2320      	movs	r3, #32
 80046b8:	e003      	b.n	80046c2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80046ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046bc:	fab3 f383 	clz	r3, r3
 80046c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d106      	bne.n	80046d4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2200      	movs	r2, #0
 80046cc:	2103      	movs	r1, #3
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe fee6 	bl	80034a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff f879 	bl	80037d0 <LL_ADC_IsEnabled>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f040 813d 	bne.w	8004960 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	6819      	ldr	r1, [r3, #0]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	461a      	mov	r2, r3
 80046f4:	f7fe ffb6 	bl	8003664 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4aa2      	ldr	r2, [pc, #648]	; (8004988 <HAL_ADC_ConfigChannel+0x6dc>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	f040 812e 	bne.w	8004960 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10b      	bne.n	800472c <HAL_ADC_ConfigChannel+0x480>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	0e9b      	lsrs	r3, r3, #26
 800471a:	3301      	adds	r3, #1
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	2b09      	cmp	r3, #9
 8004722:	bf94      	ite	ls
 8004724:	2301      	movls	r3, #1
 8004726:	2300      	movhi	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	e019      	b.n	8004760 <HAL_ADC_ConfigChannel+0x4b4>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004734:	fa93 f3a3 	rbit	r3, r3
 8004738:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800473a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800473c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800473e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004744:	2320      	movs	r3, #32
 8004746:	e003      	b.n	8004750 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004748:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800474a:	fab3 f383 	clz	r3, r3
 800474e:	b2db      	uxtb	r3, r3
 8004750:	3301      	adds	r3, #1
 8004752:	f003 031f 	and.w	r3, r3, #31
 8004756:	2b09      	cmp	r3, #9
 8004758:	bf94      	ite	ls
 800475a:	2301      	movls	r3, #1
 800475c:	2300      	movhi	r3, #0
 800475e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004760:	2b00      	cmp	r3, #0
 8004762:	d079      	beq.n	8004858 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800476c:	2b00      	cmp	r3, #0
 800476e:	d107      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x4d4>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	0e9b      	lsrs	r3, r3, #26
 8004776:	3301      	adds	r3, #1
 8004778:	069b      	lsls	r3, r3, #26
 800477a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800477e:	e015      	b.n	80047ac <HAL_ADC_ConfigChannel+0x500>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004788:	fa93 f3a3 	rbit	r3, r3
 800478c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800478e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004790:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004798:	2320      	movs	r3, #32
 800479a:	e003      	b.n	80047a4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800479c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800479e:	fab3 f383 	clz	r3, r3
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	3301      	adds	r3, #1
 80047a6:	069b      	lsls	r3, r3, #26
 80047a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d109      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x520>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	0e9b      	lsrs	r3, r3, #26
 80047be:	3301      	adds	r3, #1
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	2101      	movs	r1, #1
 80047c6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ca:	e017      	b.n	80047fc <HAL_ADC_ConfigChannel+0x550>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d4:	fa93 f3a3 	rbit	r3, r3
 80047d8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80047da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80047de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80047e4:	2320      	movs	r3, #32
 80047e6:	e003      	b.n	80047f0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80047e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ea:	fab3 f383 	clz	r3, r3
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	3301      	adds	r3, #1
 80047f2:	f003 031f 	and.w	r3, r3, #31
 80047f6:	2101      	movs	r1, #1
 80047f8:	fa01 f303 	lsl.w	r3, r1, r3
 80047fc:	ea42 0103 	orr.w	r1, r2, r3
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10a      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x576>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	0e9b      	lsrs	r3, r3, #26
 8004812:	3301      	adds	r3, #1
 8004814:	f003 021f 	and.w	r2, r3, #31
 8004818:	4613      	mov	r3, r2
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	4413      	add	r3, r2
 800481e:	051b      	lsls	r3, r3, #20
 8004820:	e018      	b.n	8004854 <HAL_ADC_ConfigChannel+0x5a8>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482a:	fa93 f3a3 	rbit	r3, r3
 800482e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004832:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800483a:	2320      	movs	r3, #32
 800483c:	e003      	b.n	8004846 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800483e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004840:	fab3 f383 	clz	r3, r3
 8004844:	b2db      	uxtb	r3, r3
 8004846:	3301      	adds	r3, #1
 8004848:	f003 021f 	and.w	r2, r3, #31
 800484c:	4613      	mov	r3, r2
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	4413      	add	r3, r2
 8004852:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004854:	430b      	orrs	r3, r1
 8004856:	e07e      	b.n	8004956 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004860:	2b00      	cmp	r3, #0
 8004862:	d107      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x5c8>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	0e9b      	lsrs	r3, r3, #26
 800486a:	3301      	adds	r3, #1
 800486c:	069b      	lsls	r3, r3, #26
 800486e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004872:	e015      	b.n	80048a0 <HAL_ADC_ConfigChannel+0x5f4>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487c:	fa93 f3a3 	rbit	r3, r3
 8004880:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004884:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800488c:	2320      	movs	r3, #32
 800488e:	e003      	b.n	8004898 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	fab3 f383 	clz	r3, r3
 8004896:	b2db      	uxtb	r3, r3
 8004898:	3301      	adds	r3, #1
 800489a:	069b      	lsls	r3, r3, #26
 800489c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d109      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x614>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	0e9b      	lsrs	r3, r3, #26
 80048b2:	3301      	adds	r3, #1
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	2101      	movs	r1, #1
 80048ba:	fa01 f303 	lsl.w	r3, r1, r3
 80048be:	e017      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x644>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	fa93 f3a3 	rbit	r3, r3
 80048cc:	61fb      	str	r3, [r7, #28]
  return result;
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80048d8:	2320      	movs	r3, #32
 80048da:	e003      	b.n	80048e4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	fab3 f383 	clz	r3, r3
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	3301      	adds	r3, #1
 80048e6:	f003 031f 	and.w	r3, r3, #31
 80048ea:	2101      	movs	r1, #1
 80048ec:	fa01 f303 	lsl.w	r3, r1, r3
 80048f0:	ea42 0103 	orr.w	r1, r2, r3
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10d      	bne.n	800491c <HAL_ADC_ConfigChannel+0x670>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	0e9b      	lsrs	r3, r3, #26
 8004906:	3301      	adds	r3, #1
 8004908:	f003 021f 	and.w	r2, r3, #31
 800490c:	4613      	mov	r3, r2
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	4413      	add	r3, r2
 8004912:	3b1e      	subs	r3, #30
 8004914:	051b      	lsls	r3, r3, #20
 8004916:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800491a:	e01b      	b.n	8004954 <HAL_ADC_ConfigChannel+0x6a8>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	fa93 f3a3 	rbit	r3, r3
 8004928:	613b      	str	r3, [r7, #16]
  return result;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004934:	2320      	movs	r3, #32
 8004936:	e003      	b.n	8004940 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	fab3 f383 	clz	r3, r3
 800493e:	b2db      	uxtb	r3, r3
 8004940:	3301      	adds	r3, #1
 8004942:	f003 021f 	and.w	r2, r3, #31
 8004946:	4613      	mov	r3, r2
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	4413      	add	r3, r2
 800494c:	3b1e      	subs	r3, #30
 800494e:	051b      	lsls	r3, r3, #20
 8004950:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004954:	430b      	orrs	r3, r1
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	6892      	ldr	r2, [r2, #8]
 800495a:	4619      	mov	r1, r3
 800495c:	f7fe fe56 	bl	800360c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	4b09      	ldr	r3, [pc, #36]	; (800498c <HAL_ADC_ConfigChannel+0x6e0>)
 8004966:	4013      	ands	r3, r2
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 80be 	beq.w	8004aea <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004976:	d004      	beq.n	8004982 <HAL_ADC_ConfigChannel+0x6d6>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a04      	ldr	r2, [pc, #16]	; (8004990 <HAL_ADC_ConfigChannel+0x6e4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d10a      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x6ec>
 8004982:	4b04      	ldr	r3, [pc, #16]	; (8004994 <HAL_ADC_ConfigChannel+0x6e8>)
 8004984:	e009      	b.n	800499a <HAL_ADC_ConfigChannel+0x6ee>
 8004986:	bf00      	nop
 8004988:	407f0000 	.word	0x407f0000
 800498c:	80080000 	.word	0x80080000
 8004990:	50000100 	.word	0x50000100
 8004994:	50000300 	.word	0x50000300
 8004998:	4b59      	ldr	r3, [pc, #356]	; (8004b00 <HAL_ADC_ConfigChannel+0x854>)
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe fd38 	bl	8003410 <LL_ADC_GetCommonPathInternalCh>
 80049a0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a56      	ldr	r2, [pc, #344]	; (8004b04 <HAL_ADC_ConfigChannel+0x858>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <HAL_ADC_ConfigChannel+0x70c>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a55      	ldr	r2, [pc, #340]	; (8004b08 <HAL_ADC_ConfigChannel+0x85c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d13a      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d134      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049cc:	d005      	beq.n	80049da <HAL_ADC_ConfigChannel+0x72e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a4e      	ldr	r2, [pc, #312]	; (8004b0c <HAL_ADC_ConfigChannel+0x860>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	f040 8085 	bne.w	8004ae4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049e2:	d004      	beq.n	80049ee <HAL_ADC_ConfigChannel+0x742>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a49      	ldr	r2, [pc, #292]	; (8004b10 <HAL_ADC_ConfigChannel+0x864>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d101      	bne.n	80049f2 <HAL_ADC_ConfigChannel+0x746>
 80049ee:	4a49      	ldr	r2, [pc, #292]	; (8004b14 <HAL_ADC_ConfigChannel+0x868>)
 80049f0:	e000      	b.n	80049f4 <HAL_ADC_ConfigChannel+0x748>
 80049f2:	4a43      	ldr	r2, [pc, #268]	; (8004b00 <HAL_ADC_ConfigChannel+0x854>)
 80049f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049fc:	4619      	mov	r1, r3
 80049fe:	4610      	mov	r0, r2
 8004a00:	f7fe fcf3 	bl	80033ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a04:	4b44      	ldr	r3, [pc, #272]	; (8004b18 <HAL_ADC_ConfigChannel+0x86c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	099b      	lsrs	r3, r3, #6
 8004a0a:	4a44      	ldr	r2, [pc, #272]	; (8004b1c <HAL_ADC_ConfigChannel+0x870>)
 8004a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a10:	099b      	lsrs	r3, r3, #6
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	4613      	mov	r3, r2
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a1e:	e002      	b.n	8004a26 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f9      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a2c:	e05a      	b.n	8004ae4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a3b      	ldr	r2, [pc, #236]	; (8004b20 <HAL_ADC_ConfigChannel+0x874>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d125      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d11f      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a31      	ldr	r2, [pc, #196]	; (8004b10 <HAL_ADC_ConfigChannel+0x864>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d104      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x7ac>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a34      	ldr	r2, [pc, #208]	; (8004b24 <HAL_ADC_ConfigChannel+0x878>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d047      	beq.n	8004ae8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a60:	d004      	beq.n	8004a6c <HAL_ADC_ConfigChannel+0x7c0>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a2a      	ldr	r2, [pc, #168]	; (8004b10 <HAL_ADC_ConfigChannel+0x864>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d101      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x7c4>
 8004a6c:	4a29      	ldr	r2, [pc, #164]	; (8004b14 <HAL_ADC_ConfigChannel+0x868>)
 8004a6e:	e000      	b.n	8004a72 <HAL_ADC_ConfigChannel+0x7c6>
 8004a70:	4a23      	ldr	r2, [pc, #140]	; (8004b00 <HAL_ADC_ConfigChannel+0x854>)
 8004a72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	f7fe fcb4 	bl	80033ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a82:	e031      	b.n	8004ae8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a27      	ldr	r2, [pc, #156]	; (8004b28 <HAL_ADC_ConfigChannel+0x87c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d12d      	bne.n	8004aea <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d127      	bne.n	8004aea <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1c      	ldr	r2, [pc, #112]	; (8004b10 <HAL_ADC_ConfigChannel+0x864>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d022      	beq.n	8004aea <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004aac:	d004      	beq.n	8004ab8 <HAL_ADC_ConfigChannel+0x80c>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a17      	ldr	r2, [pc, #92]	; (8004b10 <HAL_ADC_ConfigChannel+0x864>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d101      	bne.n	8004abc <HAL_ADC_ConfigChannel+0x810>
 8004ab8:	4a16      	ldr	r2, [pc, #88]	; (8004b14 <HAL_ADC_ConfigChannel+0x868>)
 8004aba:	e000      	b.n	8004abe <HAL_ADC_ConfigChannel+0x812>
 8004abc:	4a10      	ldr	r2, [pc, #64]	; (8004b00 <HAL_ADC_ConfigChannel+0x854>)
 8004abe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ac2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4610      	mov	r0, r2
 8004aca:	f7fe fc8e 	bl	80033ea <LL_ADC_SetCommonPathInternalCh>
 8004ace:	e00c      	b.n	8004aea <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad4:	f043 0220 	orr.w	r2, r3, #32
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004ae2:	e002      	b.n	8004aea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ae4:	bf00      	nop
 8004ae6:	e000      	b.n	8004aea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ae8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004af2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	37d8      	adds	r7, #216	; 0xd8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	50000700 	.word	0x50000700
 8004b04:	c3210000 	.word	0xc3210000
 8004b08:	90c00010 	.word	0x90c00010
 8004b0c:	50000600 	.word	0x50000600
 8004b10:	50000100 	.word	0x50000100
 8004b14:	50000300 	.word	0x50000300
 8004b18:	20000004 	.word	0x20000004
 8004b1c:	053e2d63 	.word	0x053e2d63
 8004b20:	c7520000 	.word	0xc7520000
 8004b24:	50000500 	.word	0x50000500
 8004b28:	cb840000 	.word	0xcb840000

08004b2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004b34:	2300      	movs	r3, #0
 8004b36:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fe fe47 	bl	80037d0 <LL_ADC_IsEnabled>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d176      	bne.n	8004c36 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	4b3c      	ldr	r3, [pc, #240]	; (8004c40 <ADC_Enable+0x114>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00d      	beq.n	8004b72 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5a:	f043 0210 	orr.w	r2, r3, #16
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b66:	f043 0201 	orr.w	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e062      	b.n	8004c38 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fe fe02 	bl	8003780 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b84:	d004      	beq.n	8004b90 <ADC_Enable+0x64>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a2e      	ldr	r2, [pc, #184]	; (8004c44 <ADC_Enable+0x118>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d101      	bne.n	8004b94 <ADC_Enable+0x68>
 8004b90:	4b2d      	ldr	r3, [pc, #180]	; (8004c48 <ADC_Enable+0x11c>)
 8004b92:	e000      	b.n	8004b96 <ADC_Enable+0x6a>
 8004b94:	4b2d      	ldr	r3, [pc, #180]	; (8004c4c <ADC_Enable+0x120>)
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fe fc3a 	bl	8003410 <LL_ADC_GetCommonPathInternalCh>
 8004b9c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d013      	beq.n	8004bce <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ba6:	4b2a      	ldr	r3, [pc, #168]	; (8004c50 <ADC_Enable+0x124>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	099b      	lsrs	r3, r3, #6
 8004bac:	4a29      	ldr	r2, [pc, #164]	; (8004c54 <ADC_Enable+0x128>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	099b      	lsrs	r3, r3, #6
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004bc0:	e002      	b.n	8004bc8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f9      	bne.n	8004bc2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004bce:	f7fe fbcb 	bl	8003368 <HAL_GetTick>
 8004bd2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bd4:	e028      	b.n	8004c28 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe fdf8 	bl	80037d0 <LL_ADC_IsEnabled>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d104      	bne.n	8004bf0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fe fdc8 	bl	8003780 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004bf0:	f7fe fbba 	bl	8003368 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d914      	bls.n	8004c28 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d00d      	beq.n	8004c28 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c10:	f043 0210 	orr.w	r2, r3, #16
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1c:	f043 0201 	orr.w	r2, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e007      	b.n	8004c38 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d1cf      	bne.n	8004bd6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	8000003f 	.word	0x8000003f
 8004c44:	50000100 	.word	0x50000100
 8004c48:	50000300 	.word	0x50000300
 8004c4c:	50000700 	.word	0x50000700
 8004c50:	20000004 	.word	0x20000004
 8004c54:	053e2d63 	.word	0x053e2d63

08004c58 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fe fdc6 	bl	80037f6 <LL_ADC_IsDisableOngoing>
 8004c6a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fe fdad 	bl	80037d0 <LL_ADC_IsEnabled>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d047      	beq.n	8004d0c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d144      	bne.n	8004d0c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 030d 	and.w	r3, r3, #13
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d10c      	bne.n	8004caa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fe fd87 	bl	80037a8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ca2:	f7fe fb61 	bl	8003368 <HAL_GetTick>
 8004ca6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ca8:	e029      	b.n	8004cfe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cae:	f043 0210 	orr.w	r2, r3, #16
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cba:	f043 0201 	orr.w	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e023      	b.n	8004d0e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004cc6:	f7fe fb4f 	bl	8003368 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d914      	bls.n	8004cfe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00d      	beq.n	8004cfe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce6:	f043 0210 	orr.w	r2, r3, #16
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf2:	f043 0201 	orr.w	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e007      	b.n	8004d0e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1dc      	bne.n	8004cc6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d14b      	bne.n	8004dc8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d021      	beq.n	8004d8e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe fc0a 	bl	8003568 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d032      	beq.n	8004dc0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d12b      	bne.n	8004dc0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d11f      	bne.n	8004dc0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d84:	f043 0201 	orr.w	r2, r3, #1
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d8c:	e018      	b.n	8004dc0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d111      	bne.n	8004dc0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d105      	bne.n	8004dc0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db8:	f043 0201 	orr.w	r2, r3, #1
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f7fd f83f 	bl	8001e44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004dc6:	e00e      	b.n	8004de6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dcc:	f003 0310 	and.w	r3, r3, #16
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f7ff fa5f 	bl	8004298 <HAL_ADC_ErrorCallback>
}
 8004dda:	e004      	b.n	8004de6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	4798      	blx	r3
}
 8004de6:	bf00      	nop
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f7ff fa37 	bl	8004270 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e02:	bf00      	nop
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e28:	f043 0204 	orr.w	r2, r3, #4
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff fa31 	bl	8004298 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e36:	bf00      	nop
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <LL_ADC_IsEnabled>:
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <LL_ADC_IsEnabled+0x18>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <LL_ADC_IsEnabled+0x1a>
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <LL_ADC_StartCalibration>:
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004e76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	609a      	str	r2, [r3, #8]
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <LL_ADC_IsCalibrationOnGoing>:
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eaa:	d101      	bne.n	8004eb0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <LL_ADC_REG_IsConversionOngoing>:
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d101      	bne.n	8004ed6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d101      	bne.n	8004f00 <HAL_ADCEx_Calibration_Start+0x1c>
 8004efc:	2302      	movs	r3, #2
 8004efe:	e04d      	b.n	8004f9c <HAL_ADCEx_Calibration_Start+0xb8>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff fea5 	bl	8004c58 <ADC_Disable>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d136      	bne.n	8004f86 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004f20:	f023 0302 	bic.w	r3, r3, #2
 8004f24:	f043 0202 	orr.w	r2, r3, #2
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6839      	ldr	r1, [r7, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff ff96 	bl	8004e64 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004f38:	e014      	b.n	8004f64 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d90d      	bls.n	8004f64 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4c:	f023 0312 	bic.w	r3, r3, #18
 8004f50:	f043 0210 	orr.w	r2, r3, #16
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e01b      	b.n	8004f9c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff ff94 	bl	8004e96 <LL_ADC_IsCalibrationOnGoing>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e2      	bne.n	8004f3a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f78:	f023 0303 	bic.w	r3, r3, #3
 8004f7c:	f043 0201 	orr.w	r2, r3, #1
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f84:	e005      	b.n	8004f92 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8a:	f043 0210 	orr.w	r2, r3, #16
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	0004de01 	.word	0x0004de01

08004fa8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800500c:	b590      	push	{r4, r7, lr}
 800500e:	b0a1      	sub	sp, #132	; 0x84
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005022:	2b01      	cmp	r3, #1
 8005024:	d101      	bne.n	800502a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005026:	2302      	movs	r3, #2
 8005028:	e0e7      	b.n	80051fa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005032:	2300      	movs	r3, #0
 8005034:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005036:	2300      	movs	r3, #0
 8005038:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005042:	d102      	bne.n	800504a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005044:	4b6f      	ldr	r3, [pc, #444]	; (8005204 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005046:	60bb      	str	r3, [r7, #8]
 8005048:	e009      	b.n	800505e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a6e      	ldr	r2, [pc, #440]	; (8005208 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d102      	bne.n	800505a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005054:	4b6d      	ldr	r3, [pc, #436]	; (800520c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005056:	60bb      	str	r3, [r7, #8]
 8005058:	e001      	b.n	800505e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800505a:	2300      	movs	r3, #0
 800505c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10b      	bne.n	800507c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005068:	f043 0220 	orr.w	r2, r3, #32
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e0be      	b.n	80051fa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff ff1d 	bl	8004ebe <LL_ADC_REG_IsConversionOngoing>
 8005084:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff ff17 	bl	8004ebe <LL_ADC_REG_IsConversionOngoing>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	f040 80a0 	bne.w	80051d8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800509a:	2b00      	cmp	r3, #0
 800509c:	f040 809c 	bne.w	80051d8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050a8:	d004      	beq.n	80050b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a55      	ldr	r2, [pc, #340]	; (8005204 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d101      	bne.n	80050b8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80050b4:	4b56      	ldr	r3, [pc, #344]	; (8005210 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80050b6:	e000      	b.n	80050ba <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80050b8:	4b56      	ldr	r3, [pc, #344]	; (8005214 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80050ba:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d04b      	beq.n	800515c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80050c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	6859      	ldr	r1, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050d6:	035b      	lsls	r3, r3, #13
 80050d8:	430b      	orrs	r3, r1
 80050da:	431a      	orrs	r2, r3
 80050dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050e8:	d004      	beq.n	80050f4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a45      	ldr	r2, [pc, #276]	; (8005204 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d10f      	bne.n	8005114 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80050f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80050f8:	f7ff fea1 	bl	8004e3e <LL_ADC_IsEnabled>
 80050fc:	4604      	mov	r4, r0
 80050fe:	4841      	ldr	r0, [pc, #260]	; (8005204 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005100:	f7ff fe9d 	bl	8004e3e <LL_ADC_IsEnabled>
 8005104:	4603      	mov	r3, r0
 8005106:	4323      	orrs	r3, r4
 8005108:	2b00      	cmp	r3, #0
 800510a:	bf0c      	ite	eq
 800510c:	2301      	moveq	r3, #1
 800510e:	2300      	movne	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	e012      	b.n	800513a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005114:	483c      	ldr	r0, [pc, #240]	; (8005208 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005116:	f7ff fe92 	bl	8004e3e <LL_ADC_IsEnabled>
 800511a:	4604      	mov	r4, r0
 800511c:	483b      	ldr	r0, [pc, #236]	; (800520c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800511e:	f7ff fe8e 	bl	8004e3e <LL_ADC_IsEnabled>
 8005122:	4603      	mov	r3, r0
 8005124:	431c      	orrs	r4, r3
 8005126:	483c      	ldr	r0, [pc, #240]	; (8005218 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005128:	f7ff fe89 	bl	8004e3e <LL_ADC_IsEnabled>
 800512c:	4603      	mov	r3, r0
 800512e:	4323      	orrs	r3, r4
 8005130:	2b00      	cmp	r3, #0
 8005132:	bf0c      	ite	eq
 8005134:	2301      	moveq	r3, #1
 8005136:	2300      	movne	r3, #0
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d056      	beq.n	80051ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800513e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005146:	f023 030f 	bic.w	r3, r3, #15
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	6811      	ldr	r1, [r2, #0]
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	6892      	ldr	r2, [r2, #8]
 8005152:	430a      	orrs	r2, r1
 8005154:	431a      	orrs	r2, r3
 8005156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005158:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800515a:	e047      	b.n	80051ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800515c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005164:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005166:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005170:	d004      	beq.n	800517c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a23      	ldr	r2, [pc, #140]	; (8005204 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d10f      	bne.n	800519c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800517c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005180:	f7ff fe5d 	bl	8004e3e <LL_ADC_IsEnabled>
 8005184:	4604      	mov	r4, r0
 8005186:	481f      	ldr	r0, [pc, #124]	; (8005204 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005188:	f7ff fe59 	bl	8004e3e <LL_ADC_IsEnabled>
 800518c:	4603      	mov	r3, r0
 800518e:	4323      	orrs	r3, r4
 8005190:	2b00      	cmp	r3, #0
 8005192:	bf0c      	ite	eq
 8005194:	2301      	moveq	r3, #1
 8005196:	2300      	movne	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	e012      	b.n	80051c2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800519c:	481a      	ldr	r0, [pc, #104]	; (8005208 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800519e:	f7ff fe4e 	bl	8004e3e <LL_ADC_IsEnabled>
 80051a2:	4604      	mov	r4, r0
 80051a4:	4819      	ldr	r0, [pc, #100]	; (800520c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80051a6:	f7ff fe4a 	bl	8004e3e <LL_ADC_IsEnabled>
 80051aa:	4603      	mov	r3, r0
 80051ac:	431c      	orrs	r4, r3
 80051ae:	481a      	ldr	r0, [pc, #104]	; (8005218 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80051b0:	f7ff fe45 	bl	8004e3e <LL_ADC_IsEnabled>
 80051b4:	4603      	mov	r3, r0
 80051b6:	4323      	orrs	r3, r4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	bf0c      	ite	eq
 80051bc:	2301      	moveq	r3, #1
 80051be:	2300      	movne	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d012      	beq.n	80051ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80051c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80051ce:	f023 030f 	bic.w	r3, r3, #15
 80051d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80051d4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051d6:	e009      	b.n	80051ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051dc:	f043 0220 	orr.w	r2, r3, #32
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80051ea:	e000      	b.n	80051ee <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80051f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3784      	adds	r7, #132	; 0x84
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd90      	pop	{r4, r7, pc}
 8005202:	bf00      	nop
 8005204:	50000100 	.word	0x50000100
 8005208:	50000400 	.word	0x50000400
 800520c:	50000500 	.word	0x50000500
 8005210:	50000300 	.word	0x50000300
 8005214:	50000700 	.word	0x50000700
 8005218:	50000600 	.word	0x50000600

0800521c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800522c:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <__NVIC_SetPriorityGrouping+0x44>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005238:	4013      	ands	r3, r2
 800523a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800524c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800524e:	4a04      	ldr	r2, [pc, #16]	; (8005260 <__NVIC_SetPriorityGrouping+0x44>)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	60d3      	str	r3, [r2, #12]
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	e000ed00 	.word	0xe000ed00

08005264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005268:	4b04      	ldr	r3, [pc, #16]	; (800527c <__NVIC_GetPriorityGrouping+0x18>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	f003 0307 	and.w	r3, r3, #7
}
 8005272:	4618      	mov	r0, r3
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	e000ed00 	.word	0xe000ed00

08005280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	4603      	mov	r3, r0
 8005288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800528a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528e:	2b00      	cmp	r3, #0
 8005290:	db0b      	blt.n	80052aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005292:	79fb      	ldrb	r3, [r7, #7]
 8005294:	f003 021f 	and.w	r2, r3, #31
 8005298:	4907      	ldr	r1, [pc, #28]	; (80052b8 <__NVIC_EnableIRQ+0x38>)
 800529a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	2001      	movs	r0, #1
 80052a2:	fa00 f202 	lsl.w	r2, r0, r2
 80052a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	e000e100 	.word	0xe000e100

080052bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	4603      	mov	r3, r0
 80052c4:	6039      	str	r1, [r7, #0]
 80052c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	db0a      	blt.n	80052e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	490c      	ldr	r1, [pc, #48]	; (8005308 <__NVIC_SetPriority+0x4c>)
 80052d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052da:	0112      	lsls	r2, r2, #4
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	440b      	add	r3, r1
 80052e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052e4:	e00a      	b.n	80052fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	4908      	ldr	r1, [pc, #32]	; (800530c <__NVIC_SetPriority+0x50>)
 80052ec:	79fb      	ldrb	r3, [r7, #7]
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	3b04      	subs	r3, #4
 80052f4:	0112      	lsls	r2, r2, #4
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	440b      	add	r3, r1
 80052fa:	761a      	strb	r2, [r3, #24]
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	e000e100 	.word	0xe000e100
 800530c:	e000ed00 	.word	0xe000ed00

08005310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005310:	b480      	push	{r7}
 8005312:	b089      	sub	sp, #36	; 0x24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f1c3 0307 	rsb	r3, r3, #7
 800532a:	2b04      	cmp	r3, #4
 800532c:	bf28      	it	cs
 800532e:	2304      	movcs	r3, #4
 8005330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	3304      	adds	r3, #4
 8005336:	2b06      	cmp	r3, #6
 8005338:	d902      	bls.n	8005340 <NVIC_EncodePriority+0x30>
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	3b03      	subs	r3, #3
 800533e:	e000      	b.n	8005342 <NVIC_EncodePriority+0x32>
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005344:	f04f 32ff 	mov.w	r2, #4294967295
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	43da      	mvns	r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	401a      	ands	r2, r3
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005358:	f04f 31ff 	mov.w	r1, #4294967295
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	fa01 f303 	lsl.w	r3, r1, r3
 8005362:	43d9      	mvns	r1, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005368:	4313      	orrs	r3, r2
         );
}
 800536a:	4618      	mov	r0, r3
 800536c:	3724      	adds	r7, #36	; 0x24
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3b01      	subs	r3, #1
 8005384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005388:	d301      	bcc.n	800538e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800538a:	2301      	movs	r3, #1
 800538c:	e00f      	b.n	80053ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800538e:	4a0a      	ldr	r2, [pc, #40]	; (80053b8 <SysTick_Config+0x40>)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3b01      	subs	r3, #1
 8005394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005396:	210f      	movs	r1, #15
 8005398:	f04f 30ff 	mov.w	r0, #4294967295
 800539c:	f7ff ff8e 	bl	80052bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <SysTick_Config+0x40>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053a6:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <SysTick_Config+0x40>)
 80053a8:	2207      	movs	r2, #7
 80053aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	e000e010 	.word	0xe000e010

080053bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7ff ff29 	bl	800521c <__NVIC_SetPriorityGrouping>
}
 80053ca:	bf00      	nop
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b086      	sub	sp, #24
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	4603      	mov	r3, r0
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
 80053de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053e0:	f7ff ff40 	bl	8005264 <__NVIC_GetPriorityGrouping>
 80053e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	6978      	ldr	r0, [r7, #20]
 80053ec:	f7ff ff90 	bl	8005310 <NVIC_EncodePriority>
 80053f0:	4602      	mov	r2, r0
 80053f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053f6:	4611      	mov	r1, r2
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff ff5f 	bl	80052bc <__NVIC_SetPriority>
}
 80053fe:	bf00      	nop
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b082      	sub	sp, #8
 800540a:	af00      	add	r7, sp, #0
 800540c:	4603      	mov	r3, r0
 800540e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff ff33 	bl	8005280 <__NVIC_EnableIRQ>
}
 800541a:	bf00      	nop
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b082      	sub	sp, #8
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff ffa4 	bl	8005378 <SysTick_Config>
 8005430:	4603      	mov	r3, r0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e08d      	b.n	800556a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	4b47      	ldr	r3, [pc, #284]	; (8005574 <HAL_DMA_Init+0x138>)
 8005456:	429a      	cmp	r2, r3
 8005458:	d80f      	bhi.n	800547a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	461a      	mov	r2, r3
 8005460:	4b45      	ldr	r3, [pc, #276]	; (8005578 <HAL_DMA_Init+0x13c>)
 8005462:	4413      	add	r3, r2
 8005464:	4a45      	ldr	r2, [pc, #276]	; (800557c <HAL_DMA_Init+0x140>)
 8005466:	fba2 2303 	umull	r2, r3, r2, r3
 800546a:	091b      	lsrs	r3, r3, #4
 800546c:	009a      	lsls	r2, r3, #2
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a42      	ldr	r2, [pc, #264]	; (8005580 <HAL_DMA_Init+0x144>)
 8005476:	641a      	str	r2, [r3, #64]	; 0x40
 8005478:	e00e      	b.n	8005498 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	4b40      	ldr	r3, [pc, #256]	; (8005584 <HAL_DMA_Init+0x148>)
 8005482:	4413      	add	r3, r2
 8005484:	4a3d      	ldr	r2, [pc, #244]	; (800557c <HAL_DMA_Init+0x140>)
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	091b      	lsrs	r3, r3, #4
 800548c:	009a      	lsls	r2, r3, #2
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a3c      	ldr	r2, [pc, #240]	; (8005588 <HAL_DMA_Init+0x14c>)
 8005496:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80054ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80054bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fa76 	bl	80059dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054f8:	d102      	bne.n	8005500 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005514:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d010      	beq.n	8005540 <HAL_DMA_Init+0x104>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b04      	cmp	r3, #4
 8005524:	d80c      	bhi.n	8005540 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fa96 	bl	8005a58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800553c:	605a      	str	r2, [r3, #4]
 800553e:	e008      	b.n	8005552 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	40020407 	.word	0x40020407
 8005578:	bffdfff8 	.word	0xbffdfff8
 800557c:	cccccccd 	.word	0xcccccccd
 8005580:	40020000 	.word	0x40020000
 8005584:	bffdfbf8 	.word	0xbffdfbf8
 8005588:	40020400 	.word	0x40020400

0800558c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_DMA_Start_IT+0x20>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e066      	b.n	800567a <HAL_DMA_Start_IT+0xee>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d155      	bne.n	800566c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0201 	bic.w	r2, r2, #1
 80055dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f9bb 	bl	8005960 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d008      	beq.n	8005604 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 020e 	orr.w	r2, r2, #14
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	e00f      	b.n	8005624 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0204 	bic.w	r2, r2, #4
 8005612:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 020a 	orr.w	r2, r2, #10
 8005622:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d007      	beq.n	8005642 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800563c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005640:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005646:	2b00      	cmp	r3, #0
 8005648:	d007      	beq.n	800565a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005658:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0201 	orr.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	e005      	b.n	8005678 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005674:	2302      	movs	r3, #2
 8005676:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005678:	7dfb      	ldrb	r3, [r7, #23]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005682:	b480      	push	{r7}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d005      	beq.n	80056a6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2204      	movs	r2, #4
 800569e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	73fb      	strb	r3, [r7, #15]
 80056a4:	e037      	b.n	8005716 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 020e 	bic.w	r2, r2, #14
 80056b4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056c4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056da:	f003 021f 	and.w	r2, r3, #31
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	2101      	movs	r1, #1
 80056e4:	fa01 f202 	lsl.w	r2, r1, r2
 80056e8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80056f2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00c      	beq.n	8005716 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005706:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800570a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005714:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005726:	7bfb      	ldrb	r3, [r7, #15]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d00d      	beq.n	8005768 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2204      	movs	r2, #4
 8005750:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	73fb      	strb	r3, [r7, #15]
 8005766:	e047      	b.n	80057f8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 020e 	bic.w	r2, r2, #14
 8005776:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0201 	bic.w	r2, r2, #1
 8005786:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005792:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005796:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579c:	f003 021f 	and.w	r2, r3, #31
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	2101      	movs	r1, #1
 80057a6:	fa01 f202 	lsl.w	r2, r1, r2
 80057aa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80057b4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00c      	beq.n	80057d8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80057d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	4798      	blx	r3
    }
  }
  return status;
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581e:	f003 031f 	and.w	r3, r3, #31
 8005822:	2204      	movs	r2, #4
 8005824:	409a      	lsls	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4013      	ands	r3, r2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d026      	beq.n	800587c <HAL_DMA_IRQHandler+0x7a>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	2b00      	cmp	r3, #0
 8005836:	d021      	beq.n	800587c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d107      	bne.n	8005856 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0204 	bic.w	r2, r2, #4
 8005854:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585a:	f003 021f 	and.w	r2, r3, #31
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	2104      	movs	r1, #4
 8005864:	fa01 f202 	lsl.w	r2, r1, r2
 8005868:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586e:	2b00      	cmp	r3, #0
 8005870:	d071      	beq.n	8005956 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800587a:	e06c      	b.n	8005956 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005880:	f003 031f 	and.w	r3, r3, #31
 8005884:	2202      	movs	r2, #2
 8005886:	409a      	lsls	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4013      	ands	r3, r2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d02e      	beq.n	80058ee <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d029      	beq.n	80058ee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10b      	bne.n	80058c0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 020a 	bic.w	r2, r2, #10
 80058b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c4:	f003 021f 	and.w	r2, r3, #31
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	2102      	movs	r1, #2
 80058ce:	fa01 f202 	lsl.w	r2, r1, r2
 80058d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d038      	beq.n	8005956 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80058ec:	e033      	b.n	8005956 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f2:	f003 031f 	and.w	r3, r3, #31
 80058f6:	2208      	movs	r2, #8
 80058f8:	409a      	lsls	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4013      	ands	r3, r2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d02a      	beq.n	8005958 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f003 0308 	and.w	r3, r3, #8
 8005908:	2b00      	cmp	r3, #0
 800590a:	d025      	beq.n	8005958 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 020e 	bic.w	r2, r2, #14
 800591a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005920:	f003 021f 	and.w	r2, r3, #31
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	2101      	movs	r1, #1
 800592a:	fa01 f202 	lsl.w	r2, r1, r2
 800592e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594a:	2b00      	cmp	r3, #0
 800594c:	d004      	beq.n	8005958 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005956:	bf00      	nop
 8005958:	bf00      	nop
}
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005976:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597c:	2b00      	cmp	r3, #0
 800597e:	d004      	beq.n	800598a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005988:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598e:	f003 021f 	and.w	r2, r3, #31
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	2101      	movs	r1, #1
 8005998:	fa01 f202 	lsl.w	r2, r1, r2
 800599c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	2b10      	cmp	r3, #16
 80059ac:	d108      	bne.n	80059c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80059be:	e007      	b.n	80059d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	60da      	str	r2, [r3, #12]
}
 80059d0:	bf00      	nop
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	461a      	mov	r2, r3
 80059ea:	4b16      	ldr	r3, [pc, #88]	; (8005a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d802      	bhi.n	80059f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80059f0:	4b15      	ldr	r3, [pc, #84]	; (8005a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	e001      	b.n	80059fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80059f6:	4b15      	ldr	r3, [pc, #84]	; (8005a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80059f8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	3b08      	subs	r3, #8
 8005a06:	4a12      	ldr	r2, [pc, #72]	; (8005a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005a08:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0c:	091b      	lsrs	r3, r3, #4
 8005a0e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a14:	089b      	lsrs	r3, r3, #2
 8005a16:	009a      	lsls	r2, r3, #2
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a0b      	ldr	r2, [pc, #44]	; (8005a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005a26:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f003 031f 	and.w	r3, r3, #31
 8005a2e:	2201      	movs	r2, #1
 8005a30:	409a      	lsls	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40020407 	.word	0x40020407
 8005a48:	40020800 	.word	0x40020800
 8005a4c:	40020820 	.word	0x40020820
 8005a50:	cccccccd 	.word	0xcccccccd
 8005a54:	40020880 	.word	0x40020880

08005a58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4b0b      	ldr	r3, [pc, #44]	; (8005a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	461a      	mov	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a08      	ldr	r2, [pc, #32]	; (8005a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005a7a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	f003 031f 	and.w	r3, r3, #31
 8005a84:	2201      	movs	r2, #1
 8005a86:	409a      	lsls	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005a8c:	bf00      	nop
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	1000823f 	.word	0x1000823f
 8005a9c:	40020940 	.word	0x40020940

08005aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005aae:	e15a      	b.n	8005d66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8005abc:	4013      	ands	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 814c 	beq.w	8005d60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f003 0303 	and.w	r3, r3, #3
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d005      	beq.n	8005ae0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d130      	bne.n	8005b42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	2203      	movs	r2, #3
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	43db      	mvns	r3, r3
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4013      	ands	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	68da      	ldr	r2, [r3, #12]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b16:	2201      	movs	r2, #1
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	43db      	mvns	r3, r3
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4013      	ands	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	091b      	lsrs	r3, r3, #4
 8005b2c:	f003 0201 	and.w	r2, r3, #1
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	fa02 f303 	lsl.w	r3, r2, r3
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d017      	beq.n	8005b7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	2203      	movs	r2, #3
 8005b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5e:	43db      	mvns	r3, r3
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4013      	ands	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f003 0303 	and.w	r3, r3, #3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d123      	bne.n	8005bd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	08da      	lsrs	r2, r3, #3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3208      	adds	r2, #8
 8005b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	220f      	movs	r2, #15
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	43db      	mvns	r3, r3
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4013      	ands	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	691a      	ldr	r2, [r3, #16]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	08da      	lsrs	r2, r3, #3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3208      	adds	r2, #8
 8005bcc:	6939      	ldr	r1, [r7, #16]
 8005bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	2203      	movs	r2, #3
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	43db      	mvns	r3, r3
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4013      	ands	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f003 0203 	and.w	r2, r3, #3
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 80a6 	beq.w	8005d60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c14:	4b5b      	ldr	r3, [pc, #364]	; (8005d84 <HAL_GPIO_Init+0x2e4>)
 8005c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c18:	4a5a      	ldr	r2, [pc, #360]	; (8005d84 <HAL_GPIO_Init+0x2e4>)
 8005c1a:	f043 0301 	orr.w	r3, r3, #1
 8005c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8005c20:	4b58      	ldr	r3, [pc, #352]	; (8005d84 <HAL_GPIO_Init+0x2e4>)
 8005c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	60bb      	str	r3, [r7, #8]
 8005c2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c2c:	4a56      	ldr	r2, [pc, #344]	; (8005d88 <HAL_GPIO_Init+0x2e8>)
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	089b      	lsrs	r3, r3, #2
 8005c32:	3302      	adds	r3, #2
 8005c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f003 0303 	and.w	r3, r3, #3
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	220f      	movs	r2, #15
 8005c44:	fa02 f303 	lsl.w	r3, r2, r3
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005c56:	d01f      	beq.n	8005c98 <HAL_GPIO_Init+0x1f8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a4c      	ldr	r2, [pc, #304]	; (8005d8c <HAL_GPIO_Init+0x2ec>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d019      	beq.n	8005c94 <HAL_GPIO_Init+0x1f4>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a4b      	ldr	r2, [pc, #300]	; (8005d90 <HAL_GPIO_Init+0x2f0>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d013      	beq.n	8005c90 <HAL_GPIO_Init+0x1f0>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a4a      	ldr	r2, [pc, #296]	; (8005d94 <HAL_GPIO_Init+0x2f4>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d00d      	beq.n	8005c8c <HAL_GPIO_Init+0x1ec>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a49      	ldr	r2, [pc, #292]	; (8005d98 <HAL_GPIO_Init+0x2f8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d007      	beq.n	8005c88 <HAL_GPIO_Init+0x1e8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a48      	ldr	r2, [pc, #288]	; (8005d9c <HAL_GPIO_Init+0x2fc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d101      	bne.n	8005c84 <HAL_GPIO_Init+0x1e4>
 8005c80:	2305      	movs	r3, #5
 8005c82:	e00a      	b.n	8005c9a <HAL_GPIO_Init+0x1fa>
 8005c84:	2306      	movs	r3, #6
 8005c86:	e008      	b.n	8005c9a <HAL_GPIO_Init+0x1fa>
 8005c88:	2304      	movs	r3, #4
 8005c8a:	e006      	b.n	8005c9a <HAL_GPIO_Init+0x1fa>
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e004      	b.n	8005c9a <HAL_GPIO_Init+0x1fa>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e002      	b.n	8005c9a <HAL_GPIO_Init+0x1fa>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e000      	b.n	8005c9a <HAL_GPIO_Init+0x1fa>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	f002 0203 	and.w	r2, r2, #3
 8005ca0:	0092      	lsls	r2, r2, #2
 8005ca2:	4093      	lsls	r3, r2
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005caa:	4937      	ldr	r1, [pc, #220]	; (8005d88 <HAL_GPIO_Init+0x2e8>)
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	089b      	lsrs	r3, r3, #2
 8005cb0:	3302      	adds	r3, #2
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005cb8:	4b39      	ldr	r3, [pc, #228]	; (8005da0 <HAL_GPIO_Init+0x300>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005cdc:	4a30      	ldr	r2, [pc, #192]	; (8005da0 <HAL_GPIO_Init+0x300>)
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005ce2:	4b2f      	ldr	r3, [pc, #188]	; (8005da0 <HAL_GPIO_Init+0x300>)
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	43db      	mvns	r3, r3
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005d06:	4a26      	ldr	r2, [pc, #152]	; (8005da0 <HAL_GPIO_Init+0x300>)
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005d0c:	4b24      	ldr	r3, [pc, #144]	; (8005da0 <HAL_GPIO_Init+0x300>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	43db      	mvns	r3, r3
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005d30:	4a1b      	ldr	r2, [pc, #108]	; (8005da0 <HAL_GPIO_Init+0x300>)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005d36:	4b1a      	ldr	r3, [pc, #104]	; (8005da0 <HAL_GPIO_Init+0x300>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	43db      	mvns	r3, r3
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4013      	ands	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d5a:	4a11      	ldr	r2, [pc, #68]	; (8005da0 <HAL_GPIO_Init+0x300>)
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	3301      	adds	r3, #1
 8005d64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f47f ae9d 	bne.w	8005ab0 <HAL_GPIO_Init+0x10>
  }
}
 8005d76:	bf00      	nop
 8005d78:	bf00      	nop
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	40021000 	.word	0x40021000
 8005d88:	40010000 	.word	0x40010000
 8005d8c:	48000400 	.word	0x48000400
 8005d90:	48000800 	.word	0x48000800
 8005d94:	48000c00 	.word	0x48000c00
 8005d98:	48001000 	.word	0x48001000
 8005d9c:	48001400 	.word	0x48001400
 8005da0:	40010400 	.word	0x40010400

08005da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	807b      	strh	r3, [r7, #2]
 8005db0:	4613      	mov	r3, r2
 8005db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005db4:	787b      	ldrb	r3, [r7, #1]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005dba:	887a      	ldrh	r2, [r7, #2]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005dc0:	e002      	b.n	8005dc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005dc2:	887a      	ldrh	r2, [r7, #2]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005dde:	4b08      	ldr	r3, [pc, #32]	; (8005e00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005de0:	695a      	ldr	r2, [r3, #20]
 8005de2:	88fb      	ldrh	r3, [r7, #6]
 8005de4:	4013      	ands	r3, r2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d006      	beq.n	8005df8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005dea:	4a05      	ldr	r2, [pc, #20]	; (8005e00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005dec:	88fb      	ldrh	r3, [r7, #6]
 8005dee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005df0:	88fb      	ldrh	r3, [r7, #6]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fb fe70 	bl	8001ad8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005df8:	bf00      	nop
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	40010400 	.word	0x40010400

08005e04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d141      	bne.n	8005e96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e12:	4b4b      	ldr	r3, [pc, #300]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e1e:	d131      	bne.n	8005e84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e20:	4b47      	ldr	r3, [pc, #284]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e26:	4a46      	ldr	r2, [pc, #280]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e30:	4b43      	ldr	r3, [pc, #268]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e38:	4a41      	ldr	r2, [pc, #260]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e40:	4b40      	ldr	r3, [pc, #256]	; (8005f44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2232      	movs	r2, #50	; 0x32
 8005e46:	fb02 f303 	mul.w	r3, r2, r3
 8005e4a:	4a3f      	ldr	r2, [pc, #252]	; (8005f48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e50:	0c9b      	lsrs	r3, r3, #18
 8005e52:	3301      	adds	r3, #1
 8005e54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e56:	e002      	b.n	8005e5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e5e:	4b38      	ldr	r3, [pc, #224]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6a:	d102      	bne.n	8005e72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1f2      	bne.n	8005e58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e72:	4b33      	ldr	r3, [pc, #204]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e7e:	d158      	bne.n	8005f32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e057      	b.n	8005f34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e84:	4b2e      	ldr	r3, [pc, #184]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e8a:	4a2d      	ldr	r2, [pc, #180]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005e94:	e04d      	b.n	8005f32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e9c:	d141      	bne.n	8005f22 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e9e:	4b28      	ldr	r3, [pc, #160]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eaa:	d131      	bne.n	8005f10 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005eac:	4b24      	ldr	r3, [pc, #144]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eb2:	4a23      	ldr	r2, [pc, #140]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ebc:	4b20      	ldr	r3, [pc, #128]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ec4:	4a1e      	ldr	r2, [pc, #120]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005eca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ecc:	4b1d      	ldr	r3, [pc, #116]	; (8005f44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2232      	movs	r2, #50	; 0x32
 8005ed2:	fb02 f303 	mul.w	r3, r2, r3
 8005ed6:	4a1c      	ldr	r2, [pc, #112]	; (8005f48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8005edc:	0c9b      	lsrs	r3, r3, #18
 8005ede:	3301      	adds	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ee2:	e002      	b.n	8005eea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005eea:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef6:	d102      	bne.n	8005efe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f2      	bne.n	8005ee4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005efe:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f0a:	d112      	bne.n	8005f32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e011      	b.n	8005f34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f10:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f16:	4a0a      	ldr	r2, [pc, #40]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005f20:	e007      	b.n	8005f32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f22:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f2a:	4a05      	ldr	r2, [pc, #20]	; (8005f40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f30:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	40007000 	.word	0x40007000
 8005f44:	20000004 	.word	0x20000004
 8005f48:	431bde83 	.word	0x431bde83

08005f4c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005f50:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	4a04      	ldr	r2, [pc, #16]	; (8005f68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005f56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f5a:	6093      	str	r3, [r2, #8]
}
 8005f5c:	bf00      	nop
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	40007000 	.word	0x40007000

08005f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e2fe      	b.n	800657c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d075      	beq.n	8006076 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f8a:	4b97      	ldr	r3, [pc, #604]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f003 030c 	and.w	r3, r3, #12
 8005f92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f94:	4b94      	ldr	r3, [pc, #592]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f003 0303 	and.w	r3, r3, #3
 8005f9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2b0c      	cmp	r3, #12
 8005fa2:	d102      	bne.n	8005faa <HAL_RCC_OscConfig+0x3e>
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d002      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x44>
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d10b      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fb0:	4b8d      	ldr	r3, [pc, #564]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d05b      	beq.n	8006074 <HAL_RCC_OscConfig+0x108>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d157      	bne.n	8006074 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e2d9      	b.n	800657c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fd0:	d106      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x74>
 8005fd2:	4b85      	ldr	r3, [pc, #532]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a84      	ldr	r2, [pc, #528]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8005fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	e01d      	b.n	800601c <HAL_RCC_OscConfig+0xb0>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fe8:	d10c      	bne.n	8006004 <HAL_RCC_OscConfig+0x98>
 8005fea:	4b7f      	ldr	r3, [pc, #508]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a7e      	ldr	r2, [pc, #504]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8005ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	4b7c      	ldr	r3, [pc, #496]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a7b      	ldr	r2, [pc, #492]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8005ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	e00b      	b.n	800601c <HAL_RCC_OscConfig+0xb0>
 8006004:	4b78      	ldr	r3, [pc, #480]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a77      	ldr	r2, [pc, #476]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 800600a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	4b75      	ldr	r3, [pc, #468]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a74      	ldr	r2, [pc, #464]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8006016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800601a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d013      	beq.n	800604c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006024:	f7fd f9a0 	bl	8003368 <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800602c:	f7fd f99c 	bl	8003368 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b64      	cmp	r3, #100	; 0x64
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e29e      	b.n	800657c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800603e:	4b6a      	ldr	r3, [pc, #424]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0f0      	beq.n	800602c <HAL_RCC_OscConfig+0xc0>
 800604a:	e014      	b.n	8006076 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604c:	f7fd f98c 	bl	8003368 <HAL_GetTick>
 8006050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006054:	f7fd f988 	bl	8003368 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b64      	cmp	r3, #100	; 0x64
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e28a      	b.n	800657c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006066:	4b60      	ldr	r3, [pc, #384]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1f0      	bne.n	8006054 <HAL_RCC_OscConfig+0xe8>
 8006072:	e000      	b.n	8006076 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d075      	beq.n	800616e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006082:	4b59      	ldr	r3, [pc, #356]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 030c 	and.w	r3, r3, #12
 800608a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800608c:	4b56      	ldr	r3, [pc, #344]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f003 0303 	and.w	r3, r3, #3
 8006094:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b0c      	cmp	r3, #12
 800609a:	d102      	bne.n	80060a2 <HAL_RCC_OscConfig+0x136>
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d002      	beq.n	80060a8 <HAL_RCC_OscConfig+0x13c>
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	d11f      	bne.n	80060e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060a8:	4b4f      	ldr	r3, [pc, #316]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d005      	beq.n	80060c0 <HAL_RCC_OscConfig+0x154>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e25d      	b.n	800657c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c0:	4b49      	ldr	r3, [pc, #292]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	061b      	lsls	r3, r3, #24
 80060ce:	4946      	ldr	r1, [pc, #280]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80060d4:	4b45      	ldr	r3, [pc, #276]	; (80061ec <HAL_RCC_OscConfig+0x280>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fd f8f9 	bl	80032d0 <HAL_InitTick>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d043      	beq.n	800616c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e249      	b.n	800657c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d023      	beq.n	8006138 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060f0:	4b3d      	ldr	r3, [pc, #244]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a3c      	ldr	r2, [pc, #240]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 80060f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060fc:	f7fd f934 	bl	8003368 <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006104:	f7fd f930 	bl	8003368 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e232      	b.n	800657c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006116:	4b34      	ldr	r3, [pc, #208]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0f0      	beq.n	8006104 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006122:	4b31      	ldr	r3, [pc, #196]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	061b      	lsls	r3, r3, #24
 8006130:	492d      	ldr	r1, [pc, #180]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8006132:	4313      	orrs	r3, r2
 8006134:	604b      	str	r3, [r1, #4]
 8006136:	e01a      	b.n	800616e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006138:	4b2b      	ldr	r3, [pc, #172]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a2a      	ldr	r2, [pc, #168]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 800613e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006144:	f7fd f910 	bl	8003368 <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800614c:	f7fd f90c 	bl	8003368 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e20e      	b.n	800657c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800615e:	4b22      	ldr	r3, [pc, #136]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f0      	bne.n	800614c <HAL_RCC_OscConfig+0x1e0>
 800616a:	e000      	b.n	800616e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800616c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0308 	and.w	r3, r3, #8
 8006176:	2b00      	cmp	r3, #0
 8006178:	d041      	beq.n	80061fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01c      	beq.n	80061bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006182:	4b19      	ldr	r3, [pc, #100]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 8006184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006188:	4a17      	ldr	r2, [pc, #92]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 800618a:	f043 0301 	orr.w	r3, r3, #1
 800618e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006192:	f7fd f8e9 	bl	8003368 <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800619a:	f7fd f8e5 	bl	8003368 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e1e7      	b.n	800657c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061ac:	4b0e      	ldr	r3, [pc, #56]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 80061ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0ef      	beq.n	800619a <HAL_RCC_OscConfig+0x22e>
 80061ba:	e020      	b.n	80061fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061bc:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 80061be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061c2:	4a09      	ldr	r2, [pc, #36]	; (80061e8 <HAL_RCC_OscConfig+0x27c>)
 80061c4:	f023 0301 	bic.w	r3, r3, #1
 80061c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061cc:	f7fd f8cc 	bl	8003368 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061d2:	e00d      	b.n	80061f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061d4:	f7fd f8c8 	bl	8003368 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d906      	bls.n	80061f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e1ca      	b.n	800657c <HAL_RCC_OscConfig+0x610>
 80061e6:	bf00      	nop
 80061e8:	40021000 	.word	0x40021000
 80061ec:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061f0:	4b8c      	ldr	r3, [pc, #560]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 80061f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1ea      	bne.n	80061d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 80a6 	beq.w	8006358 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800620c:	2300      	movs	r3, #0
 800620e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006210:	4b84      	ldr	r3, [pc, #528]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 8006212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <HAL_RCC_OscConfig+0x2b4>
 800621c:	2301      	movs	r3, #1
 800621e:	e000      	b.n	8006222 <HAL_RCC_OscConfig+0x2b6>
 8006220:	2300      	movs	r3, #0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00d      	beq.n	8006242 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006226:	4b7f      	ldr	r3, [pc, #508]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 8006228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622a:	4a7e      	ldr	r2, [pc, #504]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 800622c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006230:	6593      	str	r3, [r2, #88]	; 0x58
 8006232:	4b7c      	ldr	r3, [pc, #496]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 8006234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800623e:	2301      	movs	r3, #1
 8006240:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006242:	4b79      	ldr	r3, [pc, #484]	; (8006428 <HAL_RCC_OscConfig+0x4bc>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624a:	2b00      	cmp	r3, #0
 800624c:	d118      	bne.n	8006280 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800624e:	4b76      	ldr	r3, [pc, #472]	; (8006428 <HAL_RCC_OscConfig+0x4bc>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a75      	ldr	r2, [pc, #468]	; (8006428 <HAL_RCC_OscConfig+0x4bc>)
 8006254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800625a:	f7fd f885 	bl	8003368 <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006262:	f7fd f881 	bl	8003368 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e183      	b.n	800657c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006274:	4b6c      	ldr	r3, [pc, #432]	; (8006428 <HAL_RCC_OscConfig+0x4bc>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0f0      	beq.n	8006262 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d108      	bne.n	800629a <HAL_RCC_OscConfig+0x32e>
 8006288:	4b66      	ldr	r3, [pc, #408]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 800628a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628e:	4a65      	ldr	r2, [pc, #404]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 8006290:	f043 0301 	orr.w	r3, r3, #1
 8006294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006298:	e024      	b.n	80062e4 <HAL_RCC_OscConfig+0x378>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	2b05      	cmp	r3, #5
 80062a0:	d110      	bne.n	80062c4 <HAL_RCC_OscConfig+0x358>
 80062a2:	4b60      	ldr	r3, [pc, #384]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 80062a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a8:	4a5e      	ldr	r2, [pc, #376]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 80062aa:	f043 0304 	orr.w	r3, r3, #4
 80062ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062b2:	4b5c      	ldr	r3, [pc, #368]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 80062b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b8:	4a5a      	ldr	r2, [pc, #360]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 80062ba:	f043 0301 	orr.w	r3, r3, #1
 80062be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062c2:	e00f      	b.n	80062e4 <HAL_RCC_OscConfig+0x378>
 80062c4:	4b57      	ldr	r3, [pc, #348]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 80062c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ca:	4a56      	ldr	r2, [pc, #344]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 80062cc:	f023 0301 	bic.w	r3, r3, #1
 80062d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062d4:	4b53      	ldr	r3, [pc, #332]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 80062d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062da:	4a52      	ldr	r2, [pc, #328]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 80062dc:	f023 0304 	bic.w	r3, r3, #4
 80062e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d016      	beq.n	800631a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ec:	f7fd f83c 	bl	8003368 <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062f2:	e00a      	b.n	800630a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062f4:	f7fd f838 	bl	8003368 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006302:	4293      	cmp	r3, r2
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e138      	b.n	800657c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800630a:	4b46      	ldr	r3, [pc, #280]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0ed      	beq.n	80062f4 <HAL_RCC_OscConfig+0x388>
 8006318:	e015      	b.n	8006346 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800631a:	f7fd f825 	bl	8003368 <HAL_GetTick>
 800631e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006320:	e00a      	b.n	8006338 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006322:	f7fd f821 	bl	8003368 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006330:	4293      	cmp	r3, r2
 8006332:	d901      	bls.n	8006338 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e121      	b.n	800657c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006338:	4b3a      	ldr	r3, [pc, #232]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 800633a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1ed      	bne.n	8006322 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006346:	7ffb      	ldrb	r3, [r7, #31]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d105      	bne.n	8006358 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800634c:	4b35      	ldr	r3, [pc, #212]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 800634e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006350:	4a34      	ldr	r2, [pc, #208]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 8006352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006356:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b00      	cmp	r3, #0
 8006362:	d03c      	beq.n	80063de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d01c      	beq.n	80063a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800636c:	4b2d      	ldr	r3, [pc, #180]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 800636e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006372:	4a2c      	ldr	r2, [pc, #176]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 8006374:	f043 0301 	orr.w	r3, r3, #1
 8006378:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800637c:	f7fc fff4 	bl	8003368 <HAL_GetTick>
 8006380:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006382:	e008      	b.n	8006396 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006384:	f7fc fff0 	bl	8003368 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e0f2      	b.n	800657c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006396:	4b23      	ldr	r3, [pc, #140]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 8006398:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0ef      	beq.n	8006384 <HAL_RCC_OscConfig+0x418>
 80063a4:	e01b      	b.n	80063de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063a6:	4b1f      	ldr	r3, [pc, #124]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 80063a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063ac:	4a1d      	ldr	r2, [pc, #116]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 80063ae:	f023 0301 	bic.w	r3, r3, #1
 80063b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b6:	f7fc ffd7 	bl	8003368 <HAL_GetTick>
 80063ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063be:	f7fc ffd3 	bl	8003368 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e0d5      	b.n	800657c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80063d0:	4b14      	ldr	r3, [pc, #80]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 80063d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1ef      	bne.n	80063be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 80c9 	beq.w	800657a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063e8:	4b0e      	ldr	r3, [pc, #56]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f003 030c 	and.w	r3, r3, #12
 80063f0:	2b0c      	cmp	r3, #12
 80063f2:	f000 8083 	beq.w	80064fc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d15e      	bne.n	80064bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063fe:	4b09      	ldr	r3, [pc, #36]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a08      	ldr	r2, [pc, #32]	; (8006424 <HAL_RCC_OscConfig+0x4b8>)
 8006404:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640a:	f7fc ffad 	bl	8003368 <HAL_GetTick>
 800640e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006410:	e00c      	b.n	800642c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006412:	f7fc ffa9 	bl	8003368 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	2b02      	cmp	r3, #2
 800641e:	d905      	bls.n	800642c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e0ab      	b.n	800657c <HAL_RCC_OscConfig+0x610>
 8006424:	40021000 	.word	0x40021000
 8006428:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800642c:	4b55      	ldr	r3, [pc, #340]	; (8006584 <HAL_RCC_OscConfig+0x618>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1ec      	bne.n	8006412 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006438:	4b52      	ldr	r3, [pc, #328]	; (8006584 <HAL_RCC_OscConfig+0x618>)
 800643a:	68da      	ldr	r2, [r3, #12]
 800643c:	4b52      	ldr	r3, [pc, #328]	; (8006588 <HAL_RCC_OscConfig+0x61c>)
 800643e:	4013      	ands	r3, r2
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6a11      	ldr	r1, [r2, #32]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006448:	3a01      	subs	r2, #1
 800644a:	0112      	lsls	r2, r2, #4
 800644c:	4311      	orrs	r1, r2
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006452:	0212      	lsls	r2, r2, #8
 8006454:	4311      	orrs	r1, r2
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800645a:	0852      	lsrs	r2, r2, #1
 800645c:	3a01      	subs	r2, #1
 800645e:	0552      	lsls	r2, r2, #21
 8006460:	4311      	orrs	r1, r2
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006466:	0852      	lsrs	r2, r2, #1
 8006468:	3a01      	subs	r2, #1
 800646a:	0652      	lsls	r2, r2, #25
 800646c:	4311      	orrs	r1, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006472:	06d2      	lsls	r2, r2, #27
 8006474:	430a      	orrs	r2, r1
 8006476:	4943      	ldr	r1, [pc, #268]	; (8006584 <HAL_RCC_OscConfig+0x618>)
 8006478:	4313      	orrs	r3, r2
 800647a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800647c:	4b41      	ldr	r3, [pc, #260]	; (8006584 <HAL_RCC_OscConfig+0x618>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a40      	ldr	r2, [pc, #256]	; (8006584 <HAL_RCC_OscConfig+0x618>)
 8006482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006486:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006488:	4b3e      	ldr	r3, [pc, #248]	; (8006584 <HAL_RCC_OscConfig+0x618>)
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	4a3d      	ldr	r2, [pc, #244]	; (8006584 <HAL_RCC_OscConfig+0x618>)
 800648e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006492:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006494:	f7fc ff68 	bl	8003368 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800649c:	f7fc ff64 	bl	8003368 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e066      	b.n	800657c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064ae:	4b35      	ldr	r3, [pc, #212]	; (8006584 <HAL_RCC_OscConfig+0x618>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0f0      	beq.n	800649c <HAL_RCC_OscConfig+0x530>
 80064ba:	e05e      	b.n	800657a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064bc:	4b31      	ldr	r3, [pc, #196]	; (8006584 <HAL_RCC_OscConfig+0x618>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a30      	ldr	r2, [pc, #192]	; (8006584 <HAL_RCC_OscConfig+0x618>)
 80064c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c8:	f7fc ff4e 	bl	8003368 <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064ce:	e008      	b.n	80064e2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064d0:	f7fc ff4a 	bl	8003368 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e04c      	b.n	800657c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064e2:	4b28      	ldr	r3, [pc, #160]	; (8006584 <HAL_RCC_OscConfig+0x618>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1f0      	bne.n	80064d0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80064ee:	4b25      	ldr	r3, [pc, #148]	; (8006584 <HAL_RCC_OscConfig+0x618>)
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	4924      	ldr	r1, [pc, #144]	; (8006584 <HAL_RCC_OscConfig+0x618>)
 80064f4:	4b25      	ldr	r3, [pc, #148]	; (800658c <HAL_RCC_OscConfig+0x620>)
 80064f6:	4013      	ands	r3, r2
 80064f8:	60cb      	str	r3, [r1, #12]
 80064fa:	e03e      	b.n	800657a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e039      	b.n	800657c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006508:	4b1e      	ldr	r3, [pc, #120]	; (8006584 <HAL_RCC_OscConfig+0x618>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f003 0203 	and.w	r2, r3, #3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	429a      	cmp	r2, r3
 800651a:	d12c      	bne.n	8006576 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	3b01      	subs	r3, #1
 8006528:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800652a:	429a      	cmp	r2, r3
 800652c:	d123      	bne.n	8006576 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006538:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800653a:	429a      	cmp	r2, r3
 800653c:	d11b      	bne.n	8006576 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800654a:	429a      	cmp	r2, r3
 800654c:	d113      	bne.n	8006576 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006558:	085b      	lsrs	r3, r3, #1
 800655a:	3b01      	subs	r3, #1
 800655c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800655e:	429a      	cmp	r2, r3
 8006560:	d109      	bne.n	8006576 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656c:	085b      	lsrs	r3, r3, #1
 800656e:	3b01      	subs	r3, #1
 8006570:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006572:	429a      	cmp	r2, r3
 8006574:	d001      	beq.n	800657a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3720      	adds	r7, #32
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40021000 	.word	0x40021000
 8006588:	019f800c 	.word	0x019f800c
 800658c:	feeefffc 	.word	0xfeeefffc

08006590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800659a:	2300      	movs	r3, #0
 800659c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e11e      	b.n	80067e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065a8:	4b91      	ldr	r3, [pc, #580]	; (80067f0 <HAL_RCC_ClockConfig+0x260>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 030f 	and.w	r3, r3, #15
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d910      	bls.n	80065d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065b6:	4b8e      	ldr	r3, [pc, #568]	; (80067f0 <HAL_RCC_ClockConfig+0x260>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f023 020f 	bic.w	r2, r3, #15
 80065be:	498c      	ldr	r1, [pc, #560]	; (80067f0 <HAL_RCC_ClockConfig+0x260>)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065c6:	4b8a      	ldr	r3, [pc, #552]	; (80067f0 <HAL_RCC_ClockConfig+0x260>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d001      	beq.n	80065d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e106      	b.n	80067e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d073      	beq.n	80066cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	2b03      	cmp	r3, #3
 80065ea:	d129      	bne.n	8006640 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065ec:	4b81      	ldr	r3, [pc, #516]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e0f4      	b.n	80067e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80065fc:	f000 f99e 	bl	800693c <RCC_GetSysClockFreqFromPLLSource>
 8006600:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	4a7c      	ldr	r2, [pc, #496]	; (80067f8 <HAL_RCC_ClockConfig+0x268>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d93f      	bls.n	800668a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800660a:	4b7a      	ldr	r3, [pc, #488]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d009      	beq.n	800662a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800661e:	2b00      	cmp	r3, #0
 8006620:	d033      	beq.n	800668a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006626:	2b00      	cmp	r3, #0
 8006628:	d12f      	bne.n	800668a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800662a:	4b72      	ldr	r3, [pc, #456]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006632:	4a70      	ldr	r2, [pc, #448]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 8006634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006638:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800663a:	2380      	movs	r3, #128	; 0x80
 800663c:	617b      	str	r3, [r7, #20]
 800663e:	e024      	b.n	800668a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b02      	cmp	r3, #2
 8006646:	d107      	bne.n	8006658 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006648:	4b6a      	ldr	r3, [pc, #424]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d109      	bne.n	8006668 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e0c6      	b.n	80067e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006658:	4b66      	ldr	r3, [pc, #408]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e0be      	b.n	80067e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006668:	f000 f8ce 	bl	8006808 <HAL_RCC_GetSysClockFreq>
 800666c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	4a61      	ldr	r2, [pc, #388]	; (80067f8 <HAL_RCC_ClockConfig+0x268>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d909      	bls.n	800668a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006676:	4b5f      	ldr	r3, [pc, #380]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800667e:	4a5d      	ldr	r2, [pc, #372]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 8006680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006684:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006686:	2380      	movs	r3, #128	; 0x80
 8006688:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800668a:	4b5a      	ldr	r3, [pc, #360]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f023 0203 	bic.w	r2, r3, #3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	4957      	ldr	r1, [pc, #348]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 8006698:	4313      	orrs	r3, r2
 800669a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800669c:	f7fc fe64 	bl	8003368 <HAL_GetTick>
 80066a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066a2:	e00a      	b.n	80066ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066a4:	f7fc fe60 	bl	8003368 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e095      	b.n	80067e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ba:	4b4e      	ldr	r3, [pc, #312]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f003 020c 	and.w	r2, r3, #12
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d1eb      	bne.n	80066a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d023      	beq.n	8006720 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066e4:	4b43      	ldr	r3, [pc, #268]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	4a42      	ldr	r2, [pc, #264]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 80066ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80066ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0308 	and.w	r3, r3, #8
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d007      	beq.n	800670c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80066fc:	4b3d      	ldr	r3, [pc, #244]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006704:	4a3b      	ldr	r2, [pc, #236]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 8006706:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800670a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800670c:	4b39      	ldr	r3, [pc, #228]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	4936      	ldr	r1, [pc, #216]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 800671a:	4313      	orrs	r3, r2
 800671c:	608b      	str	r3, [r1, #8]
 800671e:	e008      	b.n	8006732 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	2b80      	cmp	r3, #128	; 0x80
 8006724:	d105      	bne.n	8006732 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006726:	4b33      	ldr	r3, [pc, #204]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	4a32      	ldr	r2, [pc, #200]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 800672c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006730:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006732:	4b2f      	ldr	r3, [pc, #188]	; (80067f0 <HAL_RCC_ClockConfig+0x260>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 030f 	and.w	r3, r3, #15
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	429a      	cmp	r2, r3
 800673e:	d21d      	bcs.n	800677c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006740:	4b2b      	ldr	r3, [pc, #172]	; (80067f0 <HAL_RCC_ClockConfig+0x260>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f023 020f 	bic.w	r2, r3, #15
 8006748:	4929      	ldr	r1, [pc, #164]	; (80067f0 <HAL_RCC_ClockConfig+0x260>)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	4313      	orrs	r3, r2
 800674e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006750:	f7fc fe0a 	bl	8003368 <HAL_GetTick>
 8006754:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006756:	e00a      	b.n	800676e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006758:	f7fc fe06 	bl	8003368 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	f241 3288 	movw	r2, #5000	; 0x1388
 8006766:	4293      	cmp	r3, r2
 8006768:	d901      	bls.n	800676e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e03b      	b.n	80067e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800676e:	4b20      	ldr	r3, [pc, #128]	; (80067f0 <HAL_RCC_ClockConfig+0x260>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 030f 	and.w	r3, r3, #15
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	429a      	cmp	r2, r3
 800677a:	d1ed      	bne.n	8006758 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0304 	and.w	r3, r3, #4
 8006784:	2b00      	cmp	r3, #0
 8006786:	d008      	beq.n	800679a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006788:	4b1a      	ldr	r3, [pc, #104]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	4917      	ldr	r1, [pc, #92]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 8006796:	4313      	orrs	r3, r2
 8006798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d009      	beq.n	80067ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067a6:	4b13      	ldr	r3, [pc, #76]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	490f      	ldr	r1, [pc, #60]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80067ba:	f000 f825 	bl	8006808 <HAL_RCC_GetSysClockFreq>
 80067be:	4602      	mov	r2, r0
 80067c0:	4b0c      	ldr	r3, [pc, #48]	; (80067f4 <HAL_RCC_ClockConfig+0x264>)
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	091b      	lsrs	r3, r3, #4
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	490c      	ldr	r1, [pc, #48]	; (80067fc <HAL_RCC_ClockConfig+0x26c>)
 80067cc:	5ccb      	ldrb	r3, [r1, r3]
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	fa22 f303 	lsr.w	r3, r2, r3
 80067d6:	4a0a      	ldr	r2, [pc, #40]	; (8006800 <HAL_RCC_ClockConfig+0x270>)
 80067d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80067da:	4b0a      	ldr	r3, [pc, #40]	; (8006804 <HAL_RCC_ClockConfig+0x274>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fc fd76 	bl	80032d0 <HAL_InitTick>
 80067e4:	4603      	mov	r3, r0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	40022000 	.word	0x40022000
 80067f4:	40021000 	.word	0x40021000
 80067f8:	04c4b400 	.word	0x04c4b400
 80067fc:	0800dc50 	.word	0x0800dc50
 8006800:	20000004 	.word	0x20000004
 8006804:	20000008 	.word	0x20000008

08006808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800680e:	4b2c      	ldr	r3, [pc, #176]	; (80068c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f003 030c 	and.w	r3, r3, #12
 8006816:	2b04      	cmp	r3, #4
 8006818:	d102      	bne.n	8006820 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800681a:	4b2a      	ldr	r3, [pc, #168]	; (80068c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800681c:	613b      	str	r3, [r7, #16]
 800681e:	e047      	b.n	80068b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006820:	4b27      	ldr	r3, [pc, #156]	; (80068c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f003 030c 	and.w	r3, r3, #12
 8006828:	2b08      	cmp	r3, #8
 800682a:	d102      	bne.n	8006832 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800682c:	4b26      	ldr	r3, [pc, #152]	; (80068c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800682e:	613b      	str	r3, [r7, #16]
 8006830:	e03e      	b.n	80068b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006832:	4b23      	ldr	r3, [pc, #140]	; (80068c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f003 030c 	and.w	r3, r3, #12
 800683a:	2b0c      	cmp	r3, #12
 800683c:	d136      	bne.n	80068ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800683e:	4b20      	ldr	r3, [pc, #128]	; (80068c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f003 0303 	and.w	r3, r3, #3
 8006846:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006848:	4b1d      	ldr	r3, [pc, #116]	; (80068c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	091b      	lsrs	r3, r3, #4
 800684e:	f003 030f 	and.w	r3, r3, #15
 8006852:	3301      	adds	r3, #1
 8006854:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b03      	cmp	r3, #3
 800685a:	d10c      	bne.n	8006876 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800685c:	4a1a      	ldr	r2, [pc, #104]	; (80068c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	fbb2 f3f3 	udiv	r3, r2, r3
 8006864:	4a16      	ldr	r2, [pc, #88]	; (80068c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006866:	68d2      	ldr	r2, [r2, #12]
 8006868:	0a12      	lsrs	r2, r2, #8
 800686a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800686e:	fb02 f303 	mul.w	r3, r2, r3
 8006872:	617b      	str	r3, [r7, #20]
      break;
 8006874:	e00c      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006876:	4a13      	ldr	r2, [pc, #76]	; (80068c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	fbb2 f3f3 	udiv	r3, r2, r3
 800687e:	4a10      	ldr	r2, [pc, #64]	; (80068c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006880:	68d2      	ldr	r2, [r2, #12]
 8006882:	0a12      	lsrs	r2, r2, #8
 8006884:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006888:	fb02 f303 	mul.w	r3, r2, r3
 800688c:	617b      	str	r3, [r7, #20]
      break;
 800688e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006890:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	0e5b      	lsrs	r3, r3, #25
 8006896:	f003 0303 	and.w	r3, r3, #3
 800689a:	3301      	adds	r3, #1
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a8:	613b      	str	r3, [r7, #16]
 80068aa:	e001      	b.n	80068b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80068b0:	693b      	ldr	r3, [r7, #16]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	40021000 	.word	0x40021000
 80068c4:	00f42400 	.word	0x00f42400
 80068c8:	016e3600 	.word	0x016e3600

080068cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068cc:	b480      	push	{r7}
 80068ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068d0:	4b03      	ldr	r3, [pc, #12]	; (80068e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80068d2:	681b      	ldr	r3, [r3, #0]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	20000004 	.word	0x20000004

080068e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80068e8:	f7ff fff0 	bl	80068cc <HAL_RCC_GetHCLKFreq>
 80068ec:	4602      	mov	r2, r0
 80068ee:	4b06      	ldr	r3, [pc, #24]	; (8006908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	0a1b      	lsrs	r3, r3, #8
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	4904      	ldr	r1, [pc, #16]	; (800690c <HAL_RCC_GetPCLK1Freq+0x28>)
 80068fa:	5ccb      	ldrb	r3, [r1, r3]
 80068fc:	f003 031f 	and.w	r3, r3, #31
 8006900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006904:	4618      	mov	r0, r3
 8006906:	bd80      	pop	{r7, pc}
 8006908:	40021000 	.word	0x40021000
 800690c:	0800dc60 	.word	0x0800dc60

08006910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006914:	f7ff ffda 	bl	80068cc <HAL_RCC_GetHCLKFreq>
 8006918:	4602      	mov	r2, r0
 800691a:	4b06      	ldr	r3, [pc, #24]	; (8006934 <HAL_RCC_GetPCLK2Freq+0x24>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	0adb      	lsrs	r3, r3, #11
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	4904      	ldr	r1, [pc, #16]	; (8006938 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006926:	5ccb      	ldrb	r3, [r1, r3]
 8006928:	f003 031f 	and.w	r3, r3, #31
 800692c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006930:	4618      	mov	r0, r3
 8006932:	bd80      	pop	{r7, pc}
 8006934:	40021000 	.word	0x40021000
 8006938:	0800dc60 	.word	0x0800dc60

0800693c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006942:	4b1e      	ldr	r3, [pc, #120]	; (80069bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800694c:	4b1b      	ldr	r3, [pc, #108]	; (80069bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	091b      	lsrs	r3, r3, #4
 8006952:	f003 030f 	and.w	r3, r3, #15
 8006956:	3301      	adds	r3, #1
 8006958:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	2b03      	cmp	r3, #3
 800695e:	d10c      	bne.n	800697a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006960:	4a17      	ldr	r2, [pc, #92]	; (80069c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	fbb2 f3f3 	udiv	r3, r2, r3
 8006968:	4a14      	ldr	r2, [pc, #80]	; (80069bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800696a:	68d2      	ldr	r2, [r2, #12]
 800696c:	0a12      	lsrs	r2, r2, #8
 800696e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006972:	fb02 f303 	mul.w	r3, r2, r3
 8006976:	617b      	str	r3, [r7, #20]
    break;
 8006978:	e00c      	b.n	8006994 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800697a:	4a12      	ldr	r2, [pc, #72]	; (80069c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006982:	4a0e      	ldr	r2, [pc, #56]	; (80069bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006984:	68d2      	ldr	r2, [r2, #12]
 8006986:	0a12      	lsrs	r2, r2, #8
 8006988:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800698c:	fb02 f303 	mul.w	r3, r2, r3
 8006990:	617b      	str	r3, [r7, #20]
    break;
 8006992:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006994:	4b09      	ldr	r3, [pc, #36]	; (80069bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	0e5b      	lsrs	r3, r3, #25
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	3301      	adds	r3, #1
 80069a0:	005b      	lsls	r3, r3, #1
 80069a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80069ae:	687b      	ldr	r3, [r7, #4]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	371c      	adds	r7, #28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	40021000 	.word	0x40021000
 80069c0:	016e3600 	.word	0x016e3600
 80069c4:	00f42400 	.word	0x00f42400

080069c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069d0:	2300      	movs	r3, #0
 80069d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069d4:	2300      	movs	r3, #0
 80069d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 8098 	beq.w	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069e6:	2300      	movs	r3, #0
 80069e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069ea:	4b43      	ldr	r3, [pc, #268]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10d      	bne.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069f6:	4b40      	ldr	r3, [pc, #256]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069fa:	4a3f      	ldr	r2, [pc, #252]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a00:	6593      	str	r3, [r2, #88]	; 0x58
 8006a02:	4b3d      	ldr	r3, [pc, #244]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a0a:	60bb      	str	r3, [r7, #8]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a12:	4b3a      	ldr	r3, [pc, #232]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a39      	ldr	r2, [pc, #228]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a1e:	f7fc fca3 	bl	8003368 <HAL_GetTick>
 8006a22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a24:	e009      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a26:	f7fc fc9f 	bl	8003368 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d902      	bls.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	74fb      	strb	r3, [r7, #19]
        break;
 8006a38:	e005      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a3a:	4b30      	ldr	r3, [pc, #192]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0ef      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006a46:	7cfb      	ldrb	r3, [r7, #19]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d159      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a4c:	4b2a      	ldr	r3, [pc, #168]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d01e      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d019      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a68:	4b23      	ldr	r3, [pc, #140]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a74:	4b20      	ldr	r3, [pc, #128]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7a:	4a1f      	ldr	r2, [pc, #124]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a84:	4b1c      	ldr	r3, [pc, #112]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a8a:	4a1b      	ldr	r2, [pc, #108]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a94:	4a18      	ldr	r2, [pc, #96]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d016      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa6:	f7fc fc5f 	bl	8003368 <HAL_GetTick>
 8006aaa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aac:	e00b      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aae:	f7fc fc5b 	bl	8003368 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d902      	bls.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	74fb      	strb	r3, [r7, #19]
            break;
 8006ac4:	e006      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ac6:	4b0c      	ldr	r3, [pc, #48]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d0ec      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006ad4:	7cfb      	ldrb	r3, [r7, #19]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10b      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ada:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae8:	4903      	ldr	r1, [pc, #12]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006af0:	e008      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006af2:	7cfb      	ldrb	r3, [r7, #19]
 8006af4:	74bb      	strb	r3, [r7, #18]
 8006af6:	e005      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006af8:	40021000 	.word	0x40021000
 8006afc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b00:	7cfb      	ldrb	r3, [r7, #19]
 8006b02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b04:	7c7b      	ldrb	r3, [r7, #17]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d105      	bne.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b0a:	4ba7      	ldr	r3, [pc, #668]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0e:	4aa6      	ldr	r2, [pc, #664]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00a      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b22:	4ba1      	ldr	r3, [pc, #644]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b28:	f023 0203 	bic.w	r2, r3, #3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	499d      	ldr	r1, [pc, #628]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00a      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b44:	4b98      	ldr	r3, [pc, #608]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4a:	f023 020c 	bic.w	r2, r3, #12
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	4995      	ldr	r1, [pc, #596]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0304 	and.w	r3, r3, #4
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00a      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b66:	4b90      	ldr	r3, [pc, #576]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	498c      	ldr	r1, [pc, #560]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00a      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b88:	4b87      	ldr	r3, [pc, #540]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	4984      	ldr	r1, [pc, #528]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0310 	and.w	r3, r3, #16
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00a      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006baa:	4b7f      	ldr	r3, [pc, #508]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	497b      	ldr	r1, [pc, #492]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0320 	and.w	r3, r3, #32
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00a      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bcc:	4b76      	ldr	r3, [pc, #472]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	4973      	ldr	r1, [pc, #460]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bee:	4b6e      	ldr	r3, [pc, #440]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	496a      	ldr	r1, [pc, #424]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00a      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c10:	4b65      	ldr	r3, [pc, #404]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	4962      	ldr	r1, [pc, #392]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c32:	4b5d      	ldr	r3, [pc, #372]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	4959      	ldr	r1, [pc, #356]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00a      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c54:	4b54      	ldr	r3, [pc, #336]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c5a:	f023 0203 	bic.w	r2, r3, #3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c62:	4951      	ldr	r1, [pc, #324]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c76:	4b4c      	ldr	r3, [pc, #304]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c84:	4948      	ldr	r1, [pc, #288]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d015      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c98:	4b43      	ldr	r3, [pc, #268]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca6:	4940      	ldr	r1, [pc, #256]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cb6:	d105      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cb8:	4b3b      	ldr	r3, [pc, #236]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	4a3a      	ldr	r2, [pc, #232]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d015      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006cd0:	4b35      	ldr	r3, [pc, #212]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cde:	4932      	ldr	r1, [pc, #200]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cee:	d105      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cf0:	4b2d      	ldr	r3, [pc, #180]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	4a2c      	ldr	r2, [pc, #176]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cfa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d015      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d08:	4b27      	ldr	r3, [pc, #156]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d16:	4924      	ldr	r1, [pc, #144]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d26:	d105      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d28:	4b1f      	ldr	r3, [pc, #124]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	4a1e      	ldr	r2, [pc, #120]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d32:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d015      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d40:	4b19      	ldr	r3, [pc, #100]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4e:	4916      	ldr	r1, [pc, #88]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d5e:	d105      	bne.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d60:	4b11      	ldr	r3, [pc, #68]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	4a10      	ldr	r2, [pc, #64]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d6a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d019      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d78:	4b0b      	ldr	r3, [pc, #44]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	4908      	ldr	r1, [pc, #32]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d96:	d109      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d98:	4b03      	ldr	r3, [pc, #12]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	4a02      	ldr	r2, [pc, #8]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006da2:	60d3      	str	r3, [r2, #12]
 8006da4:	e002      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006da6:	bf00      	nop
 8006da8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d015      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006db8:	4b29      	ldr	r3, [pc, #164]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc6:	4926      	ldr	r1, [pc, #152]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dd6:	d105      	bne.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006dd8:	4b21      	ldr	r3, [pc, #132]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	4a20      	ldr	r2, [pc, #128]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006de2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d015      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006df0:	4b1b      	ldr	r3, [pc, #108]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dfe:	4918      	ldr	r1, [pc, #96]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e0e:	d105      	bne.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e10:	4b13      	ldr	r3, [pc, #76]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	4a12      	ldr	r2, [pc, #72]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e1a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d015      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006e28:	4b0d      	ldr	r3, [pc, #52]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e36:	490a      	ldr	r1, [pc, #40]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e46:	d105      	bne.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e48:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	4a04      	ldr	r2, [pc, #16]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006e54:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3718      	adds	r7, #24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	40021000 	.word	0x40021000

08006e64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e049      	b.n	8006f0a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7fc f84e 	bl	8002f2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	f000 faf8 	bl	8007498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
	...

08006f14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d109      	bne.n	8006f38 <HAL_TIM_PWM_Start+0x24>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	bf14      	ite	ne
 8006f30:	2301      	movne	r3, #1
 8006f32:	2300      	moveq	r3, #0
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	e03c      	b.n	8006fb2 <HAL_TIM_PWM_Start+0x9e>
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d109      	bne.n	8006f52 <HAL_TIM_PWM_Start+0x3e>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	bf14      	ite	ne
 8006f4a:	2301      	movne	r3, #1
 8006f4c:	2300      	moveq	r3, #0
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	e02f      	b.n	8006fb2 <HAL_TIM_PWM_Start+0x9e>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b08      	cmp	r3, #8
 8006f56:	d109      	bne.n	8006f6c <HAL_TIM_PWM_Start+0x58>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	bf14      	ite	ne
 8006f64:	2301      	movne	r3, #1
 8006f66:	2300      	moveq	r3, #0
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	e022      	b.n	8006fb2 <HAL_TIM_PWM_Start+0x9e>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b0c      	cmp	r3, #12
 8006f70:	d109      	bne.n	8006f86 <HAL_TIM_PWM_Start+0x72>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	bf14      	ite	ne
 8006f7e:	2301      	movne	r3, #1
 8006f80:	2300      	moveq	r3, #0
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	e015      	b.n	8006fb2 <HAL_TIM_PWM_Start+0x9e>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b10      	cmp	r3, #16
 8006f8a:	d109      	bne.n	8006fa0 <HAL_TIM_PWM_Start+0x8c>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	bf14      	ite	ne
 8006f98:	2301      	movne	r3, #1
 8006f9a:	2300      	moveq	r3, #0
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	e008      	b.n	8006fb2 <HAL_TIM_PWM_Start+0x9e>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	bf14      	ite	ne
 8006fac:	2301      	movne	r3, #1
 8006fae:	2300      	moveq	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e0a6      	b.n	8007108 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d104      	bne.n	8006fca <HAL_TIM_PWM_Start+0xb6>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fc8:	e023      	b.n	8007012 <HAL_TIM_PWM_Start+0xfe>
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d104      	bne.n	8006fda <HAL_TIM_PWM_Start+0xc6>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fd8:	e01b      	b.n	8007012 <HAL_TIM_PWM_Start+0xfe>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b08      	cmp	r3, #8
 8006fde:	d104      	bne.n	8006fea <HAL_TIM_PWM_Start+0xd6>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fe8:	e013      	b.n	8007012 <HAL_TIM_PWM_Start+0xfe>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b0c      	cmp	r3, #12
 8006fee:	d104      	bne.n	8006ffa <HAL_TIM_PWM_Start+0xe6>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ff8:	e00b      	b.n	8007012 <HAL_TIM_PWM_Start+0xfe>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b10      	cmp	r3, #16
 8006ffe:	d104      	bne.n	800700a <HAL_TIM_PWM_Start+0xf6>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007008:	e003      	b.n	8007012 <HAL_TIM_PWM_Start+0xfe>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2202      	movs	r2, #2
 800700e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2201      	movs	r2, #1
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fe1a 	bl	8007c54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a3a      	ldr	r2, [pc, #232]	; (8007110 <HAL_TIM_PWM_Start+0x1fc>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d018      	beq.n	800705c <HAL_TIM_PWM_Start+0x148>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a39      	ldr	r2, [pc, #228]	; (8007114 <HAL_TIM_PWM_Start+0x200>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d013      	beq.n	800705c <HAL_TIM_PWM_Start+0x148>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a37      	ldr	r2, [pc, #220]	; (8007118 <HAL_TIM_PWM_Start+0x204>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d00e      	beq.n	800705c <HAL_TIM_PWM_Start+0x148>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a36      	ldr	r2, [pc, #216]	; (800711c <HAL_TIM_PWM_Start+0x208>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d009      	beq.n	800705c <HAL_TIM_PWM_Start+0x148>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a34      	ldr	r2, [pc, #208]	; (8007120 <HAL_TIM_PWM_Start+0x20c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d004      	beq.n	800705c <HAL_TIM_PWM_Start+0x148>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a33      	ldr	r2, [pc, #204]	; (8007124 <HAL_TIM_PWM_Start+0x210>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d101      	bne.n	8007060 <HAL_TIM_PWM_Start+0x14c>
 800705c:	2301      	movs	r3, #1
 800705e:	e000      	b.n	8007062 <HAL_TIM_PWM_Start+0x14e>
 8007060:	2300      	movs	r3, #0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d007      	beq.n	8007076 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007074:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a25      	ldr	r2, [pc, #148]	; (8007110 <HAL_TIM_PWM_Start+0x1fc>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d022      	beq.n	80070c6 <HAL_TIM_PWM_Start+0x1b2>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007088:	d01d      	beq.n	80070c6 <HAL_TIM_PWM_Start+0x1b2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a26      	ldr	r2, [pc, #152]	; (8007128 <HAL_TIM_PWM_Start+0x214>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d018      	beq.n	80070c6 <HAL_TIM_PWM_Start+0x1b2>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a24      	ldr	r2, [pc, #144]	; (800712c <HAL_TIM_PWM_Start+0x218>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d013      	beq.n	80070c6 <HAL_TIM_PWM_Start+0x1b2>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a23      	ldr	r2, [pc, #140]	; (8007130 <HAL_TIM_PWM_Start+0x21c>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d00e      	beq.n	80070c6 <HAL_TIM_PWM_Start+0x1b2>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a19      	ldr	r2, [pc, #100]	; (8007114 <HAL_TIM_PWM_Start+0x200>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d009      	beq.n	80070c6 <HAL_TIM_PWM_Start+0x1b2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a18      	ldr	r2, [pc, #96]	; (8007118 <HAL_TIM_PWM_Start+0x204>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d004      	beq.n	80070c6 <HAL_TIM_PWM_Start+0x1b2>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a18      	ldr	r2, [pc, #96]	; (8007124 <HAL_TIM_PWM_Start+0x210>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d115      	bne.n	80070f2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	4b19      	ldr	r3, [pc, #100]	; (8007134 <HAL_TIM_PWM_Start+0x220>)
 80070ce:	4013      	ands	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b06      	cmp	r3, #6
 80070d6:	d015      	beq.n	8007104 <HAL_TIM_PWM_Start+0x1f0>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070de:	d011      	beq.n	8007104 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0201 	orr.w	r2, r2, #1
 80070ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f0:	e008      	b.n	8007104 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 0201 	orr.w	r2, r2, #1
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	e000      	b.n	8007106 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007104:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	40012c00 	.word	0x40012c00
 8007114:	40013400 	.word	0x40013400
 8007118:	40014000 	.word	0x40014000
 800711c:	40014400 	.word	0x40014400
 8007120:	40014800 	.word	0x40014800
 8007124:	40015000 	.word	0x40015000
 8007128:	40000400 	.word	0x40000400
 800712c:	40000800 	.word	0x40000800
 8007130:	40000c00 	.word	0x40000c00
 8007134:	00010007 	.word	0x00010007

08007138 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2200      	movs	r2, #0
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	4618      	mov	r0, r3
 800714c:	f000 fd82 	bl	8007c54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a40      	ldr	r2, [pc, #256]	; (8007258 <HAL_TIM_PWM_Stop+0x120>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d018      	beq.n	800718c <HAL_TIM_PWM_Stop+0x54>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a3f      	ldr	r2, [pc, #252]	; (800725c <HAL_TIM_PWM_Stop+0x124>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d013      	beq.n	800718c <HAL_TIM_PWM_Stop+0x54>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a3d      	ldr	r2, [pc, #244]	; (8007260 <HAL_TIM_PWM_Stop+0x128>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d00e      	beq.n	800718c <HAL_TIM_PWM_Stop+0x54>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a3c      	ldr	r2, [pc, #240]	; (8007264 <HAL_TIM_PWM_Stop+0x12c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d009      	beq.n	800718c <HAL_TIM_PWM_Stop+0x54>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a3a      	ldr	r2, [pc, #232]	; (8007268 <HAL_TIM_PWM_Stop+0x130>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d004      	beq.n	800718c <HAL_TIM_PWM_Stop+0x54>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a39      	ldr	r2, [pc, #228]	; (800726c <HAL_TIM_PWM_Stop+0x134>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d101      	bne.n	8007190 <HAL_TIM_PWM_Stop+0x58>
 800718c:	2301      	movs	r3, #1
 800718e:	e000      	b.n	8007192 <HAL_TIM_PWM_Stop+0x5a>
 8007190:	2300      	movs	r3, #0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d017      	beq.n	80071c6 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6a1a      	ldr	r2, [r3, #32]
 800719c:	f241 1311 	movw	r3, #4369	; 0x1111
 80071a0:	4013      	ands	r3, r2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10f      	bne.n	80071c6 <HAL_TIM_PWM_Stop+0x8e>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6a1a      	ldr	r2, [r3, #32]
 80071ac:	f244 4344 	movw	r3, #17476	; 0x4444
 80071b0:	4013      	ands	r3, r2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d107      	bne.n	80071c6 <HAL_TIM_PWM_Stop+0x8e>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6a1a      	ldr	r2, [r3, #32]
 80071cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80071d0:	4013      	ands	r3, r2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10f      	bne.n	80071f6 <HAL_TIM_PWM_Stop+0xbe>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	6a1a      	ldr	r2, [r3, #32]
 80071dc:	f244 4344 	movw	r3, #17476	; 0x4444
 80071e0:	4013      	ands	r3, r2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d107      	bne.n	80071f6 <HAL_TIM_PWM_Stop+0xbe>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0201 	bic.w	r2, r2, #1
 80071f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d104      	bne.n	8007206 <HAL_TIM_PWM_Stop+0xce>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007204:	e023      	b.n	800724e <HAL_TIM_PWM_Stop+0x116>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b04      	cmp	r3, #4
 800720a:	d104      	bne.n	8007216 <HAL_TIM_PWM_Stop+0xde>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007214:	e01b      	b.n	800724e <HAL_TIM_PWM_Stop+0x116>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b08      	cmp	r3, #8
 800721a:	d104      	bne.n	8007226 <HAL_TIM_PWM_Stop+0xee>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007224:	e013      	b.n	800724e <HAL_TIM_PWM_Stop+0x116>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b0c      	cmp	r3, #12
 800722a:	d104      	bne.n	8007236 <HAL_TIM_PWM_Stop+0xfe>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007234:	e00b      	b.n	800724e <HAL_TIM_PWM_Stop+0x116>
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b10      	cmp	r3, #16
 800723a:	d104      	bne.n	8007246 <HAL_TIM_PWM_Stop+0x10e>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007244:	e003      	b.n	800724e <HAL_TIM_PWM_Stop+0x116>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	40012c00 	.word	0x40012c00
 800725c:	40013400 	.word	0x40013400
 8007260:	40014000 	.word	0x40014000
 8007264:	40014400 	.word	0x40014400
 8007268:	40014800 	.word	0x40014800
 800726c:	40015000 	.word	0x40015000

08007270 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007286:	2b01      	cmp	r3, #1
 8007288:	d101      	bne.n	800728e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800728a:	2302      	movs	r3, #2
 800728c:	e0ff      	b.n	800748e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2b14      	cmp	r3, #20
 800729a:	f200 80f0 	bhi.w	800747e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800729e:	a201      	add	r2, pc, #4	; (adr r2, 80072a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a4:	080072f9 	.word	0x080072f9
 80072a8:	0800747f 	.word	0x0800747f
 80072ac:	0800747f 	.word	0x0800747f
 80072b0:	0800747f 	.word	0x0800747f
 80072b4:	08007339 	.word	0x08007339
 80072b8:	0800747f 	.word	0x0800747f
 80072bc:	0800747f 	.word	0x0800747f
 80072c0:	0800747f 	.word	0x0800747f
 80072c4:	0800737b 	.word	0x0800737b
 80072c8:	0800747f 	.word	0x0800747f
 80072cc:	0800747f 	.word	0x0800747f
 80072d0:	0800747f 	.word	0x0800747f
 80072d4:	080073bb 	.word	0x080073bb
 80072d8:	0800747f 	.word	0x0800747f
 80072dc:	0800747f 	.word	0x0800747f
 80072e0:	0800747f 	.word	0x0800747f
 80072e4:	080073fd 	.word	0x080073fd
 80072e8:	0800747f 	.word	0x0800747f
 80072ec:	0800747f 	.word	0x0800747f
 80072f0:	0800747f 	.word	0x0800747f
 80072f4:	0800743d 	.word	0x0800743d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68b9      	ldr	r1, [r7, #8]
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 f97e 	bl	8007600 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699a      	ldr	r2, [r3, #24]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f042 0208 	orr.w	r2, r2, #8
 8007312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	699a      	ldr	r2, [r3, #24]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f022 0204 	bic.w	r2, r2, #4
 8007322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6999      	ldr	r1, [r3, #24]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	691a      	ldr	r2, [r3, #16]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	619a      	str	r2, [r3, #24]
      break;
 8007336:	e0a5      	b.n	8007484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68b9      	ldr	r1, [r7, #8]
 800733e:	4618      	mov	r0, r3
 8007340:	f000 f9f8 	bl	8007734 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699a      	ldr	r2, [r3, #24]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699a      	ldr	r2, [r3, #24]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6999      	ldr	r1, [r3, #24]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	021a      	lsls	r2, r3, #8
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	619a      	str	r2, [r3, #24]
      break;
 8007378:	e084      	b.n	8007484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68b9      	ldr	r1, [r7, #8]
 8007380:	4618      	mov	r0, r3
 8007382:	f000 fa6b 	bl	800785c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69da      	ldr	r2, [r3, #28]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f042 0208 	orr.w	r2, r2, #8
 8007394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69da      	ldr	r2, [r3, #28]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0204 	bic.w	r2, r2, #4
 80073a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	69d9      	ldr	r1, [r3, #28]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	691a      	ldr	r2, [r3, #16]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	61da      	str	r2, [r3, #28]
      break;
 80073b8:	e064      	b.n	8007484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68b9      	ldr	r1, [r7, #8]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 fadd 	bl	8007980 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	69da      	ldr	r2, [r3, #28]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	69da      	ldr	r2, [r3, #28]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69d9      	ldr	r1, [r3, #28]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	021a      	lsls	r2, r3, #8
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	61da      	str	r2, [r3, #28]
      break;
 80073fa:	e043      	b.n	8007484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68b9      	ldr	r1, [r7, #8]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fb50 	bl	8007aa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f042 0208 	orr.w	r2, r2, #8
 8007416:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f022 0204 	bic.w	r2, r2, #4
 8007426:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	691a      	ldr	r2, [r3, #16]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800743a:	e023      	b.n	8007484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68b9      	ldr	r1, [r7, #8]
 8007442:	4618      	mov	r0, r3
 8007444:	f000 fb9a 	bl	8007b7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007456:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007466:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	021a      	lsls	r2, r3, #8
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800747c:	e002      	b.n	8007484 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	75fb      	strb	r3, [r7, #23]
      break;
 8007482:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800748c:	7dfb      	ldrb	r3, [r7, #23]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop

08007498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a4c      	ldr	r2, [pc, #304]	; (80075dc <TIM_Base_SetConfig+0x144>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d017      	beq.n	80074e0 <TIM_Base_SetConfig+0x48>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b6:	d013      	beq.n	80074e0 <TIM_Base_SetConfig+0x48>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a49      	ldr	r2, [pc, #292]	; (80075e0 <TIM_Base_SetConfig+0x148>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00f      	beq.n	80074e0 <TIM_Base_SetConfig+0x48>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a48      	ldr	r2, [pc, #288]	; (80075e4 <TIM_Base_SetConfig+0x14c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d00b      	beq.n	80074e0 <TIM_Base_SetConfig+0x48>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a47      	ldr	r2, [pc, #284]	; (80075e8 <TIM_Base_SetConfig+0x150>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d007      	beq.n	80074e0 <TIM_Base_SetConfig+0x48>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a46      	ldr	r2, [pc, #280]	; (80075ec <TIM_Base_SetConfig+0x154>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d003      	beq.n	80074e0 <TIM_Base_SetConfig+0x48>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a45      	ldr	r2, [pc, #276]	; (80075f0 <TIM_Base_SetConfig+0x158>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d108      	bne.n	80074f2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a39      	ldr	r2, [pc, #228]	; (80075dc <TIM_Base_SetConfig+0x144>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d023      	beq.n	8007542 <TIM_Base_SetConfig+0xaa>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007500:	d01f      	beq.n	8007542 <TIM_Base_SetConfig+0xaa>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a36      	ldr	r2, [pc, #216]	; (80075e0 <TIM_Base_SetConfig+0x148>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d01b      	beq.n	8007542 <TIM_Base_SetConfig+0xaa>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a35      	ldr	r2, [pc, #212]	; (80075e4 <TIM_Base_SetConfig+0x14c>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d017      	beq.n	8007542 <TIM_Base_SetConfig+0xaa>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a34      	ldr	r2, [pc, #208]	; (80075e8 <TIM_Base_SetConfig+0x150>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d013      	beq.n	8007542 <TIM_Base_SetConfig+0xaa>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a33      	ldr	r2, [pc, #204]	; (80075ec <TIM_Base_SetConfig+0x154>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d00f      	beq.n	8007542 <TIM_Base_SetConfig+0xaa>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a33      	ldr	r2, [pc, #204]	; (80075f4 <TIM_Base_SetConfig+0x15c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d00b      	beq.n	8007542 <TIM_Base_SetConfig+0xaa>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a32      	ldr	r2, [pc, #200]	; (80075f8 <TIM_Base_SetConfig+0x160>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d007      	beq.n	8007542 <TIM_Base_SetConfig+0xaa>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a31      	ldr	r2, [pc, #196]	; (80075fc <TIM_Base_SetConfig+0x164>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d003      	beq.n	8007542 <TIM_Base_SetConfig+0xaa>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a2c      	ldr	r2, [pc, #176]	; (80075f0 <TIM_Base_SetConfig+0x158>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d108      	bne.n	8007554 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	4313      	orrs	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	4313      	orrs	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	689a      	ldr	r2, [r3, #8]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a18      	ldr	r2, [pc, #96]	; (80075dc <TIM_Base_SetConfig+0x144>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d013      	beq.n	80075a8 <TIM_Base_SetConfig+0x110>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a1a      	ldr	r2, [pc, #104]	; (80075ec <TIM_Base_SetConfig+0x154>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d00f      	beq.n	80075a8 <TIM_Base_SetConfig+0x110>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a1a      	ldr	r2, [pc, #104]	; (80075f4 <TIM_Base_SetConfig+0x15c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d00b      	beq.n	80075a8 <TIM_Base_SetConfig+0x110>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a19      	ldr	r2, [pc, #100]	; (80075f8 <TIM_Base_SetConfig+0x160>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d007      	beq.n	80075a8 <TIM_Base_SetConfig+0x110>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a18      	ldr	r2, [pc, #96]	; (80075fc <TIM_Base_SetConfig+0x164>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d003      	beq.n	80075a8 <TIM_Base_SetConfig+0x110>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a13      	ldr	r2, [pc, #76]	; (80075f0 <TIM_Base_SetConfig+0x158>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d103      	bne.n	80075b0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	691a      	ldr	r2, [r3, #16]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d105      	bne.n	80075ce <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	f023 0201 	bic.w	r2, r3, #1
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	611a      	str	r2, [r3, #16]
  }
}
 80075ce:	bf00      	nop
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	40012c00 	.word	0x40012c00
 80075e0:	40000400 	.word	0x40000400
 80075e4:	40000800 	.word	0x40000800
 80075e8:	40000c00 	.word	0x40000c00
 80075ec:	40013400 	.word	0x40013400
 80075f0:	40015000 	.word	0x40015000
 80075f4:	40014000 	.word	0x40014000
 80075f8:	40014400 	.word	0x40014400
 80075fc:	40014800 	.word	0x40014800

08007600 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007600:	b480      	push	{r7}
 8007602:	b087      	sub	sp, #28
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a1b      	ldr	r3, [r3, #32]
 8007614:	f023 0201 	bic.w	r2, r3, #1
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800762e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 0303 	bic.w	r3, r3, #3
 800763a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	4313      	orrs	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f023 0302 	bic.w	r3, r3, #2
 800764c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	4313      	orrs	r3, r2
 8007656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a30      	ldr	r2, [pc, #192]	; (800771c <TIM_OC1_SetConfig+0x11c>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d013      	beq.n	8007688 <TIM_OC1_SetConfig+0x88>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a2f      	ldr	r2, [pc, #188]	; (8007720 <TIM_OC1_SetConfig+0x120>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d00f      	beq.n	8007688 <TIM_OC1_SetConfig+0x88>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a2e      	ldr	r2, [pc, #184]	; (8007724 <TIM_OC1_SetConfig+0x124>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d00b      	beq.n	8007688 <TIM_OC1_SetConfig+0x88>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a2d      	ldr	r2, [pc, #180]	; (8007728 <TIM_OC1_SetConfig+0x128>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d007      	beq.n	8007688 <TIM_OC1_SetConfig+0x88>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a2c      	ldr	r2, [pc, #176]	; (800772c <TIM_OC1_SetConfig+0x12c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d003      	beq.n	8007688 <TIM_OC1_SetConfig+0x88>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a2b      	ldr	r2, [pc, #172]	; (8007730 <TIM_OC1_SetConfig+0x130>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d10c      	bne.n	80076a2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f023 0308 	bic.w	r3, r3, #8
 800768e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	4313      	orrs	r3, r2
 8007698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f023 0304 	bic.w	r3, r3, #4
 80076a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a1d      	ldr	r2, [pc, #116]	; (800771c <TIM_OC1_SetConfig+0x11c>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d013      	beq.n	80076d2 <TIM_OC1_SetConfig+0xd2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a1c      	ldr	r2, [pc, #112]	; (8007720 <TIM_OC1_SetConfig+0x120>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d00f      	beq.n	80076d2 <TIM_OC1_SetConfig+0xd2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a1b      	ldr	r2, [pc, #108]	; (8007724 <TIM_OC1_SetConfig+0x124>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00b      	beq.n	80076d2 <TIM_OC1_SetConfig+0xd2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a1a      	ldr	r2, [pc, #104]	; (8007728 <TIM_OC1_SetConfig+0x128>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d007      	beq.n	80076d2 <TIM_OC1_SetConfig+0xd2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a19      	ldr	r2, [pc, #100]	; (800772c <TIM_OC1_SetConfig+0x12c>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d003      	beq.n	80076d2 <TIM_OC1_SetConfig+0xd2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a18      	ldr	r2, [pc, #96]	; (8007730 <TIM_OC1_SetConfig+0x130>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d111      	bne.n	80076f6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	685a      	ldr	r2, [r3, #4]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	621a      	str	r2, [r3, #32]
}
 8007710:	bf00      	nop
 8007712:	371c      	adds	r7, #28
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	40012c00 	.word	0x40012c00
 8007720:	40013400 	.word	0x40013400
 8007724:	40014000 	.word	0x40014000
 8007728:	40014400 	.word	0x40014400
 800772c:	40014800 	.word	0x40014800
 8007730:	40015000 	.word	0x40015000

08007734 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007734:	b480      	push	{r7}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	f023 0210 	bic.w	r2, r3, #16
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800776e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	021b      	lsls	r3, r3, #8
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f023 0320 	bic.w	r3, r3, #32
 8007782:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	011b      	lsls	r3, r3, #4
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	4313      	orrs	r3, r2
 800778e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a2c      	ldr	r2, [pc, #176]	; (8007844 <TIM_OC2_SetConfig+0x110>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d007      	beq.n	80077a8 <TIM_OC2_SetConfig+0x74>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a2b      	ldr	r2, [pc, #172]	; (8007848 <TIM_OC2_SetConfig+0x114>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d003      	beq.n	80077a8 <TIM_OC2_SetConfig+0x74>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a2a      	ldr	r2, [pc, #168]	; (800784c <TIM_OC2_SetConfig+0x118>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d10d      	bne.n	80077c4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	011b      	lsls	r3, r3, #4
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a1f      	ldr	r2, [pc, #124]	; (8007844 <TIM_OC2_SetConfig+0x110>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d013      	beq.n	80077f4 <TIM_OC2_SetConfig+0xc0>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a1e      	ldr	r2, [pc, #120]	; (8007848 <TIM_OC2_SetConfig+0x114>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d00f      	beq.n	80077f4 <TIM_OC2_SetConfig+0xc0>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a1e      	ldr	r2, [pc, #120]	; (8007850 <TIM_OC2_SetConfig+0x11c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d00b      	beq.n	80077f4 <TIM_OC2_SetConfig+0xc0>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a1d      	ldr	r2, [pc, #116]	; (8007854 <TIM_OC2_SetConfig+0x120>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d007      	beq.n	80077f4 <TIM_OC2_SetConfig+0xc0>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a1c      	ldr	r2, [pc, #112]	; (8007858 <TIM_OC2_SetConfig+0x124>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d003      	beq.n	80077f4 <TIM_OC2_SetConfig+0xc0>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a17      	ldr	r2, [pc, #92]	; (800784c <TIM_OC2_SetConfig+0x118>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d113      	bne.n	800781c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	4313      	orrs	r3, r2
 800780e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	4313      	orrs	r3, r2
 800781a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	621a      	str	r2, [r3, #32]
}
 8007836:	bf00      	nop
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	40012c00 	.word	0x40012c00
 8007848:	40013400 	.word	0x40013400
 800784c:	40015000 	.word	0x40015000
 8007850:	40014000 	.word	0x40014000
 8007854:	40014400 	.word	0x40014400
 8007858:	40014800 	.word	0x40014800

0800785c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800785c:	b480      	push	{r7}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a1b      	ldr	r3, [r3, #32]
 8007870:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800788a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800788e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f023 0303 	bic.w	r3, r3, #3
 8007896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	4313      	orrs	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a2b      	ldr	r2, [pc, #172]	; (8007968 <TIM_OC3_SetConfig+0x10c>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d007      	beq.n	80078ce <TIM_OC3_SetConfig+0x72>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a2a      	ldr	r2, [pc, #168]	; (800796c <TIM_OC3_SetConfig+0x110>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d003      	beq.n	80078ce <TIM_OC3_SetConfig+0x72>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a29      	ldr	r2, [pc, #164]	; (8007970 <TIM_OC3_SetConfig+0x114>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d10d      	bne.n	80078ea <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	021b      	lsls	r3, r3, #8
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	4313      	orrs	r3, r2
 80078e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a1e      	ldr	r2, [pc, #120]	; (8007968 <TIM_OC3_SetConfig+0x10c>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d013      	beq.n	800791a <TIM_OC3_SetConfig+0xbe>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a1d      	ldr	r2, [pc, #116]	; (800796c <TIM_OC3_SetConfig+0x110>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00f      	beq.n	800791a <TIM_OC3_SetConfig+0xbe>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a1d      	ldr	r2, [pc, #116]	; (8007974 <TIM_OC3_SetConfig+0x118>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d00b      	beq.n	800791a <TIM_OC3_SetConfig+0xbe>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a1c      	ldr	r2, [pc, #112]	; (8007978 <TIM_OC3_SetConfig+0x11c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d007      	beq.n	800791a <TIM_OC3_SetConfig+0xbe>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a1b      	ldr	r2, [pc, #108]	; (800797c <TIM_OC3_SetConfig+0x120>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d003      	beq.n	800791a <TIM_OC3_SetConfig+0xbe>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a16      	ldr	r2, [pc, #88]	; (8007970 <TIM_OC3_SetConfig+0x114>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d113      	bne.n	8007942 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	011b      	lsls	r3, r3, #4
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	4313      	orrs	r3, r2
 8007934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	011b      	lsls	r3, r3, #4
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	4313      	orrs	r3, r2
 8007940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	621a      	str	r2, [r3, #32]
}
 800795c:	bf00      	nop
 800795e:	371c      	adds	r7, #28
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	40012c00 	.word	0x40012c00
 800796c:	40013400 	.word	0x40013400
 8007970:	40015000 	.word	0x40015000
 8007974:	40014000 	.word	0x40014000
 8007978:	40014400 	.word	0x40014400
 800797c:	40014800 	.word	0x40014800

08007980 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a1b      	ldr	r3, [r3, #32]
 8007994:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	021b      	lsls	r3, r3, #8
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	031b      	lsls	r3, r3, #12
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	4313      	orrs	r3, r2
 80079da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a2c      	ldr	r2, [pc, #176]	; (8007a90 <TIM_OC4_SetConfig+0x110>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d007      	beq.n	80079f4 <TIM_OC4_SetConfig+0x74>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a2b      	ldr	r2, [pc, #172]	; (8007a94 <TIM_OC4_SetConfig+0x114>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d003      	beq.n	80079f4 <TIM_OC4_SetConfig+0x74>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a2a      	ldr	r2, [pc, #168]	; (8007a98 <TIM_OC4_SetConfig+0x118>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d10d      	bne.n	8007a10 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	031b      	lsls	r3, r3, #12
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a1f      	ldr	r2, [pc, #124]	; (8007a90 <TIM_OC4_SetConfig+0x110>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d013      	beq.n	8007a40 <TIM_OC4_SetConfig+0xc0>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a1e      	ldr	r2, [pc, #120]	; (8007a94 <TIM_OC4_SetConfig+0x114>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d00f      	beq.n	8007a40 <TIM_OC4_SetConfig+0xc0>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a1e      	ldr	r2, [pc, #120]	; (8007a9c <TIM_OC4_SetConfig+0x11c>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d00b      	beq.n	8007a40 <TIM_OC4_SetConfig+0xc0>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a1d      	ldr	r2, [pc, #116]	; (8007aa0 <TIM_OC4_SetConfig+0x120>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d007      	beq.n	8007a40 <TIM_OC4_SetConfig+0xc0>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a1c      	ldr	r2, [pc, #112]	; (8007aa4 <TIM_OC4_SetConfig+0x124>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d003      	beq.n	8007a40 <TIM_OC4_SetConfig+0xc0>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a17      	ldr	r2, [pc, #92]	; (8007a98 <TIM_OC4_SetConfig+0x118>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d113      	bne.n	8007a68 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a46:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a4e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	019b      	lsls	r3, r3, #6
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	019b      	lsls	r3, r3, #6
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	621a      	str	r2, [r3, #32]
}
 8007a82:	bf00      	nop
 8007a84:	371c      	adds	r7, #28
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	40012c00 	.word	0x40012c00
 8007a94:	40013400 	.word	0x40013400
 8007a98:	40015000 	.word	0x40015000
 8007a9c:	40014000 	.word	0x40014000
 8007aa0:	40014400 	.word	0x40014400
 8007aa4:	40014800 	.word	0x40014800

08007aa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a1b      	ldr	r3, [r3, #32]
 8007abc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007aec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	041b      	lsls	r3, r3, #16
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a19      	ldr	r2, [pc, #100]	; (8007b64 <TIM_OC5_SetConfig+0xbc>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d013      	beq.n	8007b2a <TIM_OC5_SetConfig+0x82>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a18      	ldr	r2, [pc, #96]	; (8007b68 <TIM_OC5_SetConfig+0xc0>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00f      	beq.n	8007b2a <TIM_OC5_SetConfig+0x82>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a17      	ldr	r2, [pc, #92]	; (8007b6c <TIM_OC5_SetConfig+0xc4>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d00b      	beq.n	8007b2a <TIM_OC5_SetConfig+0x82>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a16      	ldr	r2, [pc, #88]	; (8007b70 <TIM_OC5_SetConfig+0xc8>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d007      	beq.n	8007b2a <TIM_OC5_SetConfig+0x82>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a15      	ldr	r2, [pc, #84]	; (8007b74 <TIM_OC5_SetConfig+0xcc>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d003      	beq.n	8007b2a <TIM_OC5_SetConfig+0x82>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a14      	ldr	r2, [pc, #80]	; (8007b78 <TIM_OC5_SetConfig+0xd0>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d109      	bne.n	8007b3e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	021b      	lsls	r3, r3, #8
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	621a      	str	r2, [r3, #32]
}
 8007b58:	bf00      	nop
 8007b5a:	371c      	adds	r7, #28
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr
 8007b64:	40012c00 	.word	0x40012c00
 8007b68:	40013400 	.word	0x40013400
 8007b6c:	40014000 	.word	0x40014000
 8007b70:	40014400 	.word	0x40014400
 8007b74:	40014800 	.word	0x40014800
 8007b78:	40015000 	.word	0x40015000

08007b7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a1b      	ldr	r3, [r3, #32]
 8007b90:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	021b      	lsls	r3, r3, #8
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	051b      	lsls	r3, r3, #20
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a1a      	ldr	r2, [pc, #104]	; (8007c3c <TIM_OC6_SetConfig+0xc0>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d013      	beq.n	8007c00 <TIM_OC6_SetConfig+0x84>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a19      	ldr	r2, [pc, #100]	; (8007c40 <TIM_OC6_SetConfig+0xc4>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d00f      	beq.n	8007c00 <TIM_OC6_SetConfig+0x84>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a18      	ldr	r2, [pc, #96]	; (8007c44 <TIM_OC6_SetConfig+0xc8>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d00b      	beq.n	8007c00 <TIM_OC6_SetConfig+0x84>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a17      	ldr	r2, [pc, #92]	; (8007c48 <TIM_OC6_SetConfig+0xcc>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d007      	beq.n	8007c00 <TIM_OC6_SetConfig+0x84>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a16      	ldr	r2, [pc, #88]	; (8007c4c <TIM_OC6_SetConfig+0xd0>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d003      	beq.n	8007c00 <TIM_OC6_SetConfig+0x84>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a15      	ldr	r2, [pc, #84]	; (8007c50 <TIM_OC6_SetConfig+0xd4>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d109      	bne.n	8007c14 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	029b      	lsls	r3, r3, #10
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	621a      	str	r2, [r3, #32]
}
 8007c2e:	bf00      	nop
 8007c30:	371c      	adds	r7, #28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	40012c00 	.word	0x40012c00
 8007c40:	40013400 	.word	0x40013400
 8007c44:	40014000 	.word	0x40014000
 8007c48:	40014400 	.word	0x40014400
 8007c4c:	40014800 	.word	0x40014800
 8007c50:	40015000 	.word	0x40015000

08007c54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f003 031f 	and.w	r3, r3, #31
 8007c66:	2201      	movs	r2, #1
 8007c68:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6a1a      	ldr	r2, [r3, #32]
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	43db      	mvns	r3, r3
 8007c76:	401a      	ands	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6a1a      	ldr	r2, [r3, #32]
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	f003 031f 	and.w	r3, r3, #31
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	fa01 f303 	lsl.w	r3, r1, r3
 8007c8c:	431a      	orrs	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	621a      	str	r2, [r3, #32]
}
 8007c92:	bf00      	nop
 8007c94:	371c      	adds	r7, #28
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
	...

08007ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d101      	bne.n	8007cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e074      	b.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a34      	ldr	r2, [pc, #208]	; (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d009      	beq.n	8007cf6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a33      	ldr	r2, [pc, #204]	; (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d004      	beq.n	8007cf6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a31      	ldr	r2, [pc, #196]	; (8007db8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d108      	bne.n	8007d08 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007cfc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a21      	ldr	r2, [pc, #132]	; (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d022      	beq.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d38:	d01d      	beq.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a1f      	ldr	r2, [pc, #124]	; (8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d018      	beq.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a1d      	ldr	r2, [pc, #116]	; (8007dc0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d013      	beq.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a1c      	ldr	r2, [pc, #112]	; (8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d00e      	beq.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a15      	ldr	r2, [pc, #84]	; (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d009      	beq.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a18      	ldr	r2, [pc, #96]	; (8007dc8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d004      	beq.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a11      	ldr	r2, [pc, #68]	; (8007db8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d10c      	bne.n	8007d90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	40012c00 	.word	0x40012c00
 8007db4:	40013400 	.word	0x40013400
 8007db8:	40015000 	.word	0x40015000
 8007dbc:	40000400 	.word	0x40000400
 8007dc0:	40000800 	.word	0x40000800
 8007dc4:	40000c00 	.word	0x40000c00
 8007dc8:	40014000 	.word	0x40014000

08007dcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d101      	bne.n	8007de8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007de4:	2302      	movs	r3, #2
 8007de6:	e078      	b.n	8007eda <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	041b      	lsls	r3, r3, #16
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	69db      	ldr	r3, [r3, #28]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a1c      	ldr	r2, [pc, #112]	; (8007ee8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d009      	beq.n	8007e8e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a1b      	ldr	r2, [pc, #108]	; (8007eec <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d004      	beq.n	8007e8e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a19      	ldr	r2, [pc, #100]	; (8007ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d11c      	bne.n	8007ec8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e98:	051b      	lsls	r3, r3, #20
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	6a1b      	ldr	r3, [r3, #32]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	40012c00 	.word	0x40012c00
 8007eec:	40013400 	.word	0x40013400
 8007ef0:	40015000 	.word	0x40015000

08007ef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e042      	b.n	8007f8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d106      	bne.n	8007f1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7fb f8f7 	bl	800310c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2224      	movs	r2, #36	; 0x24
 8007f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0201 	bic.w	r2, r2, #1
 8007f34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d002      	beq.n	8007f44 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 ff42 	bl	8008dc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fc43 	bl	80087d0 <UART_SetConfig>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d101      	bne.n	8007f54 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e01b      	b.n	8007f8c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689a      	ldr	r2, [r3, #8]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f042 0201 	orr.w	r2, r2, #1
 8007f82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 ffc1 	bl	8008f0c <UART_CheckIdleState>
 8007f8a:	4603      	mov	r3, r0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b08a      	sub	sp, #40	; 0x28
 8007f98:	af02      	add	r7, sp, #8
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	603b      	str	r3, [r7, #0]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007faa:	2b20      	cmp	r3, #32
 8007fac:	d17b      	bne.n	80080a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <HAL_UART_Transmit+0x26>
 8007fb4:	88fb      	ldrh	r3, [r7, #6]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e074      	b.n	80080a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2221      	movs	r2, #33	; 0x21
 8007fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007fce:	f7fb f9cb 	bl	8003368 <HAL_GetTick>
 8007fd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	88fa      	ldrh	r2, [r7, #6]
 8007fd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	88fa      	ldrh	r2, [r7, #6]
 8007fe0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fec:	d108      	bne.n	8008000 <HAL_UART_Transmit+0x6c>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d104      	bne.n	8008000 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	61bb      	str	r3, [r7, #24]
 8007ffe:	e003      	b.n	8008008 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008004:	2300      	movs	r3, #0
 8008006:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008008:	e030      	b.n	800806c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	2200      	movs	r2, #0
 8008012:	2180      	movs	r1, #128	; 0x80
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f001 f823 	bl	8009060 <UART_WaitOnFlagUntilTimeout>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d005      	beq.n	800802c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2220      	movs	r2, #32
 8008024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	e03d      	b.n	80080a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10b      	bne.n	800804a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	461a      	mov	r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008040:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	3302      	adds	r3, #2
 8008046:	61bb      	str	r3, [r7, #24]
 8008048:	e007      	b.n	800805a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	781a      	ldrb	r2, [r3, #0]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	3301      	adds	r3, #1
 8008058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008060:	b29b      	uxth	r3, r3
 8008062:	3b01      	subs	r3, #1
 8008064:	b29a      	uxth	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008072:	b29b      	uxth	r3, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1c8      	bne.n	800800a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	2200      	movs	r2, #0
 8008080:	2140      	movs	r1, #64	; 0x40
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 ffec 	bl	8009060 <UART_WaitOnFlagUntilTimeout>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d005      	beq.n	800809a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2220      	movs	r2, #32
 8008092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e006      	b.n	80080a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2220      	movs	r2, #32
 800809e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	e000      	b.n	80080a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80080a6:	2302      	movs	r3, #2
  }
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3720      	adds	r7, #32
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08a      	sub	sp, #40	; 0x28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	4613      	mov	r3, r2
 80080bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080c4:	2b20      	cmp	r3, #32
 80080c6:	d137      	bne.n	8008138 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d002      	beq.n	80080d4 <HAL_UART_Receive_IT+0x24>
 80080ce:	88fb      	ldrh	r3, [r7, #6]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d101      	bne.n	80080d8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e030      	b.n	800813a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a18      	ldr	r2, [pc, #96]	; (8008144 <HAL_UART_Receive_IT+0x94>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d01f      	beq.n	8008128 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d018      	beq.n	8008128 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	e853 3f00 	ldrex	r3, [r3]
 8008102:	613b      	str	r3, [r7, #16]
   return(result);
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800810a:	627b      	str	r3, [r7, #36]	; 0x24
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	623b      	str	r3, [r7, #32]
 8008116:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008118:	69f9      	ldr	r1, [r7, #28]
 800811a:	6a3a      	ldr	r2, [r7, #32]
 800811c:	e841 2300 	strex	r3, r2, [r1]
 8008120:	61bb      	str	r3, [r7, #24]
   return(result);
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1e6      	bne.n	80080f6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008128:	88fb      	ldrh	r3, [r7, #6]
 800812a:	461a      	mov	r2, r3
 800812c:	68b9      	ldr	r1, [r7, #8]
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f001 f804 	bl	800913c <UART_Start_Receive_IT>
 8008134:	4603      	mov	r3, r0
 8008136:	e000      	b.n	800813a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008138:	2302      	movs	r3, #2
  }
}
 800813a:	4618      	mov	r0, r3
 800813c:	3728      	adds	r7, #40	; 0x28
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	40008000 	.word	0x40008000

08008148 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b0ba      	sub	sp, #232	; 0xe8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800816e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008172:	f640 030f 	movw	r3, #2063	; 0x80f
 8008176:	4013      	ands	r3, r2
 8008178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800817c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008180:	2b00      	cmp	r3, #0
 8008182:	d11b      	bne.n	80081bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	2b00      	cmp	r3, #0
 800818e:	d015      	beq.n	80081bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008194:	f003 0320 	and.w	r3, r3, #32
 8008198:	2b00      	cmp	r3, #0
 800819a:	d105      	bne.n	80081a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800819c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d009      	beq.n	80081bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 82e3 	beq.w	8008778 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	4798      	blx	r3
      }
      return;
 80081ba:	e2dd      	b.n	8008778 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80081bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 8123 	beq.w	800840c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80081c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80081ca:	4b8d      	ldr	r3, [pc, #564]	; (8008400 <HAL_UART_IRQHandler+0x2b8>)
 80081cc:	4013      	ands	r3, r2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d106      	bne.n	80081e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80081d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80081d6:	4b8b      	ldr	r3, [pc, #556]	; (8008404 <HAL_UART_IRQHandler+0x2bc>)
 80081d8:	4013      	ands	r3, r2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 8116 	beq.w	800840c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e4:	f003 0301 	and.w	r3, r3, #1
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d011      	beq.n	8008210 <HAL_UART_IRQHandler+0xc8>
 80081ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00b      	beq.n	8008210 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2201      	movs	r2, #1
 80081fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008206:	f043 0201 	orr.w	r2, r3, #1
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008214:	f003 0302 	and.w	r3, r3, #2
 8008218:	2b00      	cmp	r3, #0
 800821a:	d011      	beq.n	8008240 <HAL_UART_IRQHandler+0xf8>
 800821c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00b      	beq.n	8008240 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2202      	movs	r2, #2
 800822e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008236:	f043 0204 	orr.w	r2, r3, #4
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008244:	f003 0304 	and.w	r3, r3, #4
 8008248:	2b00      	cmp	r3, #0
 800824a:	d011      	beq.n	8008270 <HAL_UART_IRQHandler+0x128>
 800824c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00b      	beq.n	8008270 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2204      	movs	r2, #4
 800825e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008266:	f043 0202 	orr.w	r2, r3, #2
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008274:	f003 0308 	and.w	r3, r3, #8
 8008278:	2b00      	cmp	r3, #0
 800827a:	d017      	beq.n	80082ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800827c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008280:	f003 0320 	and.w	r3, r3, #32
 8008284:	2b00      	cmp	r3, #0
 8008286:	d105      	bne.n	8008294 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008288:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800828c:	4b5c      	ldr	r3, [pc, #368]	; (8008400 <HAL_UART_IRQHandler+0x2b8>)
 800828e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00b      	beq.n	80082ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2208      	movs	r2, #8
 800829a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082a2:	f043 0208 	orr.w	r2, r3, #8
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80082ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d012      	beq.n	80082de <HAL_UART_IRQHandler+0x196>
 80082b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00c      	beq.n	80082de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d4:	f043 0220 	orr.w	r2, r3, #32
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f000 8249 	beq.w	800877c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ee:	f003 0320 	and.w	r3, r3, #32
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d013      	beq.n	800831e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082fa:	f003 0320 	and.w	r3, r3, #32
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d105      	bne.n	800830e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d007      	beq.n	800831e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008324:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008332:	2b40      	cmp	r3, #64	; 0x40
 8008334:	d005      	beq.n	8008342 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800833a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800833e:	2b00      	cmp	r3, #0
 8008340:	d054      	beq.n	80083ec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f001 f81c 	bl	8009380 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008352:	2b40      	cmp	r3, #64	; 0x40
 8008354:	d146      	bne.n	80083e4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	3308      	adds	r3, #8
 800835c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008360:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008364:	e853 3f00 	ldrex	r3, [r3]
 8008368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800836c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3308      	adds	r3, #8
 800837e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008382:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008386:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800838e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008392:	e841 2300 	strex	r3, r2, [r1]
 8008396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800839a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1d9      	bne.n	8008356 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d017      	beq.n	80083dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083b2:	4a15      	ldr	r2, [pc, #84]	; (8008408 <HAL_UART_IRQHandler+0x2c0>)
 80083b4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fd f9b9 	bl	8005734 <HAL_DMA_Abort_IT>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d019      	beq.n	80083fc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80083d6:	4610      	mov	r0, r2
 80083d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083da:	e00f      	b.n	80083fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f9e1 	bl	80087a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e2:	e00b      	b.n	80083fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f9dd 	bl	80087a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ea:	e007      	b.n	80083fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f9d9 	bl	80087a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80083fa:	e1bf      	b.n	800877c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083fc:	bf00      	nop
    return;
 80083fe:	e1bd      	b.n	800877c <HAL_UART_IRQHandler+0x634>
 8008400:	10000001 	.word	0x10000001
 8008404:	04000120 	.word	0x04000120
 8008408:	0800944d 	.word	0x0800944d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008410:	2b01      	cmp	r3, #1
 8008412:	f040 8153 	bne.w	80086bc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800841a:	f003 0310 	and.w	r3, r3, #16
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 814c 	beq.w	80086bc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008428:	f003 0310 	and.w	r3, r3, #16
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 8145 	beq.w	80086bc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2210      	movs	r2, #16
 8008438:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008444:	2b40      	cmp	r3, #64	; 0x40
 8008446:	f040 80bb 	bne.w	80085c0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008458:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 818f 	beq.w	8008780 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008468:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800846c:	429a      	cmp	r2, r3
 800846e:	f080 8187 	bcs.w	8008780 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008478:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0320 	and.w	r3, r3, #32
 800848a:	2b00      	cmp	r3, #0
 800848c:	f040 8087 	bne.w	800859e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008498:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800849c:	e853 3f00 	ldrex	r3, [r3]
 80084a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80084a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	461a      	mov	r2, r3
 80084b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80084ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80084be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084ca:	e841 2300 	strex	r3, r2, [r1]
 80084ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1da      	bne.n	8008490 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	3308      	adds	r3, #8
 80084e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084e4:	e853 3f00 	ldrex	r3, [r3]
 80084e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084ec:	f023 0301 	bic.w	r3, r3, #1
 80084f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3308      	adds	r3, #8
 80084fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008502:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008504:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008506:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800850a:	e841 2300 	strex	r3, r2, [r1]
 800850e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1e1      	bne.n	80084da <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	3308      	adds	r3, #8
 800851c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008520:	e853 3f00 	ldrex	r3, [r3]
 8008524:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800852c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3308      	adds	r3, #8
 8008536:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800853a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800853c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008540:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008542:	e841 2300 	strex	r3, r2, [r1]
 8008546:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1e3      	bne.n	8008516 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2220      	movs	r2, #32
 8008552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800856a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800856c:	f023 0310 	bic.w	r3, r3, #16
 8008570:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	461a      	mov	r2, r3
 800857a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800857e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008580:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008584:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800858c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e4      	bne.n	800855c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008598:	4618      	mov	r0, r3
 800859a:	f7fd f872 	bl	8005682 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2202      	movs	r2, #2
 80085a2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f8fd 	bl	80087b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085be:	e0df      	b.n	8008780 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085da:	b29b      	uxth	r3, r3
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 80d1 	beq.w	8008784 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80085e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f000 80cc 	beq.w	8008784 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f4:	e853 3f00 	ldrex	r3, [r3]
 80085f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008600:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	461a      	mov	r2, r3
 800860a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800860e:	647b      	str	r3, [r7, #68]	; 0x44
 8008610:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008612:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008614:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008616:	e841 2300 	strex	r3, r2, [r1]
 800861a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800861c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1e4      	bne.n	80085ec <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3308      	adds	r3, #8
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	e853 3f00 	ldrex	r3, [r3]
 8008630:	623b      	str	r3, [r7, #32]
   return(result);
 8008632:	6a3b      	ldr	r3, [r7, #32]
 8008634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008638:	f023 0301 	bic.w	r3, r3, #1
 800863c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3308      	adds	r3, #8
 8008646:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800864a:	633a      	str	r2, [r7, #48]	; 0x30
 800864c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e1      	bne.n	8008622 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2220      	movs	r2, #32
 8008662:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	e853 3f00 	ldrex	r3, [r3]
 800867e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f023 0310 	bic.w	r3, r3, #16
 8008686:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	461a      	mov	r2, r3
 8008690:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008694:	61fb      	str	r3, [r7, #28]
 8008696:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008698:	69b9      	ldr	r1, [r7, #24]
 800869a:	69fa      	ldr	r2, [r7, #28]
 800869c:	e841 2300 	strex	r3, r2, [r1]
 80086a0:	617b      	str	r3, [r7, #20]
   return(result);
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1e4      	bne.n	8008672 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2202      	movs	r2, #2
 80086ac:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f87f 	bl	80087b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80086ba:	e063      	b.n	8008784 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80086bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00e      	beq.n	80086e6 <HAL_UART_IRQHandler+0x59e>
 80086c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d008      	beq.n	80086e6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80086dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f001 fc12 	bl	8009f08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086e4:	e051      	b.n	800878a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80086e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d014      	beq.n	800871c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80086f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d105      	bne.n	800870a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80086fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008702:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008706:	2b00      	cmp	r3, #0
 8008708:	d008      	beq.n	800871c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800870e:	2b00      	cmp	r3, #0
 8008710:	d03a      	beq.n	8008788 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	4798      	blx	r3
    }
    return;
 800871a:	e035      	b.n	8008788 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800871c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008724:	2b00      	cmp	r3, #0
 8008726:	d009      	beq.n	800873c <HAL_UART_IRQHandler+0x5f4>
 8008728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800872c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008730:	2b00      	cmp	r3, #0
 8008732:	d003      	beq.n	800873c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fe9f 	bl	8009478 <UART_EndTransmit_IT>
    return;
 800873a:	e026      	b.n	800878a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800873c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008740:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d009      	beq.n	800875c <HAL_UART_IRQHandler+0x614>
 8008748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800874c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d003      	beq.n	800875c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f001 fbeb 	bl	8009f30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800875a:	e016      	b.n	800878a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800875c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d010      	beq.n	800878a <HAL_UART_IRQHandler+0x642>
 8008768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800876c:	2b00      	cmp	r3, #0
 800876e:	da0c      	bge.n	800878a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f001 fbd3 	bl	8009f1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008776:	e008      	b.n	800878a <HAL_UART_IRQHandler+0x642>
      return;
 8008778:	bf00      	nop
 800877a:	e006      	b.n	800878a <HAL_UART_IRQHandler+0x642>
    return;
 800877c:	bf00      	nop
 800877e:	e004      	b.n	800878a <HAL_UART_IRQHandler+0x642>
      return;
 8008780:	bf00      	nop
 8008782:	e002      	b.n	800878a <HAL_UART_IRQHandler+0x642>
      return;
 8008784:	bf00      	nop
 8008786:	e000      	b.n	800878a <HAL_UART_IRQHandler+0x642>
    return;
 8008788:	bf00      	nop
  }
}
 800878a:	37e8      	adds	r7, #232	; 0xe8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087d4:	b08c      	sub	sp, #48	; 0x30
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	689a      	ldr	r2, [r3, #8]
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	431a      	orrs	r2, r3
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	431a      	orrs	r2, r3
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	69db      	ldr	r3, [r3, #28]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	4baa      	ldr	r3, [pc, #680]	; (8008aa8 <UART_SetConfig+0x2d8>)
 8008800:	4013      	ands	r3, r2
 8008802:	697a      	ldr	r2, [r7, #20]
 8008804:	6812      	ldr	r2, [r2, #0]
 8008806:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008808:	430b      	orrs	r3, r1
 800880a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	68da      	ldr	r2, [r3, #12]
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	430a      	orrs	r2, r1
 8008820:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a9f      	ldr	r2, [pc, #636]	; (8008aac <UART_SetConfig+0x2dc>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d004      	beq.n	800883c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008838:	4313      	orrs	r3, r2
 800883a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008846:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	6812      	ldr	r2, [r2, #0]
 800884e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008850:	430b      	orrs	r3, r1
 8008852:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885a:	f023 010f 	bic.w	r1, r3, #15
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a90      	ldr	r2, [pc, #576]	; (8008ab0 <UART_SetConfig+0x2e0>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d125      	bne.n	80088c0 <UART_SetConfig+0xf0>
 8008874:	4b8f      	ldr	r3, [pc, #572]	; (8008ab4 <UART_SetConfig+0x2e4>)
 8008876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800887a:	f003 0303 	and.w	r3, r3, #3
 800887e:	2b03      	cmp	r3, #3
 8008880:	d81a      	bhi.n	80088b8 <UART_SetConfig+0xe8>
 8008882:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <UART_SetConfig+0xb8>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	08008899 	.word	0x08008899
 800888c:	080088a9 	.word	0x080088a9
 8008890:	080088a1 	.word	0x080088a1
 8008894:	080088b1 	.word	0x080088b1
 8008898:	2301      	movs	r3, #1
 800889a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800889e:	e116      	b.n	8008ace <UART_SetConfig+0x2fe>
 80088a0:	2302      	movs	r3, #2
 80088a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088a6:	e112      	b.n	8008ace <UART_SetConfig+0x2fe>
 80088a8:	2304      	movs	r3, #4
 80088aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ae:	e10e      	b.n	8008ace <UART_SetConfig+0x2fe>
 80088b0:	2308      	movs	r3, #8
 80088b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088b6:	e10a      	b.n	8008ace <UART_SetConfig+0x2fe>
 80088b8:	2310      	movs	r3, #16
 80088ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088be:	e106      	b.n	8008ace <UART_SetConfig+0x2fe>
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a7c      	ldr	r2, [pc, #496]	; (8008ab8 <UART_SetConfig+0x2e8>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d138      	bne.n	800893c <UART_SetConfig+0x16c>
 80088ca:	4b7a      	ldr	r3, [pc, #488]	; (8008ab4 <UART_SetConfig+0x2e4>)
 80088cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088d0:	f003 030c 	and.w	r3, r3, #12
 80088d4:	2b0c      	cmp	r3, #12
 80088d6:	d82d      	bhi.n	8008934 <UART_SetConfig+0x164>
 80088d8:	a201      	add	r2, pc, #4	; (adr r2, 80088e0 <UART_SetConfig+0x110>)
 80088da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088de:	bf00      	nop
 80088e0:	08008915 	.word	0x08008915
 80088e4:	08008935 	.word	0x08008935
 80088e8:	08008935 	.word	0x08008935
 80088ec:	08008935 	.word	0x08008935
 80088f0:	08008925 	.word	0x08008925
 80088f4:	08008935 	.word	0x08008935
 80088f8:	08008935 	.word	0x08008935
 80088fc:	08008935 	.word	0x08008935
 8008900:	0800891d 	.word	0x0800891d
 8008904:	08008935 	.word	0x08008935
 8008908:	08008935 	.word	0x08008935
 800890c:	08008935 	.word	0x08008935
 8008910:	0800892d 	.word	0x0800892d
 8008914:	2300      	movs	r3, #0
 8008916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800891a:	e0d8      	b.n	8008ace <UART_SetConfig+0x2fe>
 800891c:	2302      	movs	r3, #2
 800891e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008922:	e0d4      	b.n	8008ace <UART_SetConfig+0x2fe>
 8008924:	2304      	movs	r3, #4
 8008926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800892a:	e0d0      	b.n	8008ace <UART_SetConfig+0x2fe>
 800892c:	2308      	movs	r3, #8
 800892e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008932:	e0cc      	b.n	8008ace <UART_SetConfig+0x2fe>
 8008934:	2310      	movs	r3, #16
 8008936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800893a:	e0c8      	b.n	8008ace <UART_SetConfig+0x2fe>
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a5e      	ldr	r2, [pc, #376]	; (8008abc <UART_SetConfig+0x2ec>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d125      	bne.n	8008992 <UART_SetConfig+0x1c2>
 8008946:	4b5b      	ldr	r3, [pc, #364]	; (8008ab4 <UART_SetConfig+0x2e4>)
 8008948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800894c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008950:	2b30      	cmp	r3, #48	; 0x30
 8008952:	d016      	beq.n	8008982 <UART_SetConfig+0x1b2>
 8008954:	2b30      	cmp	r3, #48	; 0x30
 8008956:	d818      	bhi.n	800898a <UART_SetConfig+0x1ba>
 8008958:	2b20      	cmp	r3, #32
 800895a:	d00a      	beq.n	8008972 <UART_SetConfig+0x1a2>
 800895c:	2b20      	cmp	r3, #32
 800895e:	d814      	bhi.n	800898a <UART_SetConfig+0x1ba>
 8008960:	2b00      	cmp	r3, #0
 8008962:	d002      	beq.n	800896a <UART_SetConfig+0x19a>
 8008964:	2b10      	cmp	r3, #16
 8008966:	d008      	beq.n	800897a <UART_SetConfig+0x1aa>
 8008968:	e00f      	b.n	800898a <UART_SetConfig+0x1ba>
 800896a:	2300      	movs	r3, #0
 800896c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008970:	e0ad      	b.n	8008ace <UART_SetConfig+0x2fe>
 8008972:	2302      	movs	r3, #2
 8008974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008978:	e0a9      	b.n	8008ace <UART_SetConfig+0x2fe>
 800897a:	2304      	movs	r3, #4
 800897c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008980:	e0a5      	b.n	8008ace <UART_SetConfig+0x2fe>
 8008982:	2308      	movs	r3, #8
 8008984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008988:	e0a1      	b.n	8008ace <UART_SetConfig+0x2fe>
 800898a:	2310      	movs	r3, #16
 800898c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008990:	e09d      	b.n	8008ace <UART_SetConfig+0x2fe>
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a4a      	ldr	r2, [pc, #296]	; (8008ac0 <UART_SetConfig+0x2f0>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d125      	bne.n	80089e8 <UART_SetConfig+0x218>
 800899c:	4b45      	ldr	r3, [pc, #276]	; (8008ab4 <UART_SetConfig+0x2e4>)
 800899e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80089a6:	2bc0      	cmp	r3, #192	; 0xc0
 80089a8:	d016      	beq.n	80089d8 <UART_SetConfig+0x208>
 80089aa:	2bc0      	cmp	r3, #192	; 0xc0
 80089ac:	d818      	bhi.n	80089e0 <UART_SetConfig+0x210>
 80089ae:	2b80      	cmp	r3, #128	; 0x80
 80089b0:	d00a      	beq.n	80089c8 <UART_SetConfig+0x1f8>
 80089b2:	2b80      	cmp	r3, #128	; 0x80
 80089b4:	d814      	bhi.n	80089e0 <UART_SetConfig+0x210>
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d002      	beq.n	80089c0 <UART_SetConfig+0x1f0>
 80089ba:	2b40      	cmp	r3, #64	; 0x40
 80089bc:	d008      	beq.n	80089d0 <UART_SetConfig+0x200>
 80089be:	e00f      	b.n	80089e0 <UART_SetConfig+0x210>
 80089c0:	2300      	movs	r3, #0
 80089c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089c6:	e082      	b.n	8008ace <UART_SetConfig+0x2fe>
 80089c8:	2302      	movs	r3, #2
 80089ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089ce:	e07e      	b.n	8008ace <UART_SetConfig+0x2fe>
 80089d0:	2304      	movs	r3, #4
 80089d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089d6:	e07a      	b.n	8008ace <UART_SetConfig+0x2fe>
 80089d8:	2308      	movs	r3, #8
 80089da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089de:	e076      	b.n	8008ace <UART_SetConfig+0x2fe>
 80089e0:	2310      	movs	r3, #16
 80089e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089e6:	e072      	b.n	8008ace <UART_SetConfig+0x2fe>
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a35      	ldr	r2, [pc, #212]	; (8008ac4 <UART_SetConfig+0x2f4>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d12a      	bne.n	8008a48 <UART_SetConfig+0x278>
 80089f2:	4b30      	ldr	r3, [pc, #192]	; (8008ab4 <UART_SetConfig+0x2e4>)
 80089f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a00:	d01a      	beq.n	8008a38 <UART_SetConfig+0x268>
 8008a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a06:	d81b      	bhi.n	8008a40 <UART_SetConfig+0x270>
 8008a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a0c:	d00c      	beq.n	8008a28 <UART_SetConfig+0x258>
 8008a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a12:	d815      	bhi.n	8008a40 <UART_SetConfig+0x270>
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <UART_SetConfig+0x250>
 8008a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a1c:	d008      	beq.n	8008a30 <UART_SetConfig+0x260>
 8008a1e:	e00f      	b.n	8008a40 <UART_SetConfig+0x270>
 8008a20:	2300      	movs	r3, #0
 8008a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a26:	e052      	b.n	8008ace <UART_SetConfig+0x2fe>
 8008a28:	2302      	movs	r3, #2
 8008a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a2e:	e04e      	b.n	8008ace <UART_SetConfig+0x2fe>
 8008a30:	2304      	movs	r3, #4
 8008a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a36:	e04a      	b.n	8008ace <UART_SetConfig+0x2fe>
 8008a38:	2308      	movs	r3, #8
 8008a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a3e:	e046      	b.n	8008ace <UART_SetConfig+0x2fe>
 8008a40:	2310      	movs	r3, #16
 8008a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a46:	e042      	b.n	8008ace <UART_SetConfig+0x2fe>
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a17      	ldr	r2, [pc, #92]	; (8008aac <UART_SetConfig+0x2dc>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d13a      	bne.n	8008ac8 <UART_SetConfig+0x2f8>
 8008a52:	4b18      	ldr	r3, [pc, #96]	; (8008ab4 <UART_SetConfig+0x2e4>)
 8008a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008a5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a60:	d01a      	beq.n	8008a98 <UART_SetConfig+0x2c8>
 8008a62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a66:	d81b      	bhi.n	8008aa0 <UART_SetConfig+0x2d0>
 8008a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a6c:	d00c      	beq.n	8008a88 <UART_SetConfig+0x2b8>
 8008a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a72:	d815      	bhi.n	8008aa0 <UART_SetConfig+0x2d0>
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d003      	beq.n	8008a80 <UART_SetConfig+0x2b0>
 8008a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a7c:	d008      	beq.n	8008a90 <UART_SetConfig+0x2c0>
 8008a7e:	e00f      	b.n	8008aa0 <UART_SetConfig+0x2d0>
 8008a80:	2300      	movs	r3, #0
 8008a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a86:	e022      	b.n	8008ace <UART_SetConfig+0x2fe>
 8008a88:	2302      	movs	r3, #2
 8008a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a8e:	e01e      	b.n	8008ace <UART_SetConfig+0x2fe>
 8008a90:	2304      	movs	r3, #4
 8008a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a96:	e01a      	b.n	8008ace <UART_SetConfig+0x2fe>
 8008a98:	2308      	movs	r3, #8
 8008a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a9e:	e016      	b.n	8008ace <UART_SetConfig+0x2fe>
 8008aa0:	2310      	movs	r3, #16
 8008aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008aa6:	e012      	b.n	8008ace <UART_SetConfig+0x2fe>
 8008aa8:	cfff69f3 	.word	0xcfff69f3
 8008aac:	40008000 	.word	0x40008000
 8008ab0:	40013800 	.word	0x40013800
 8008ab4:	40021000 	.word	0x40021000
 8008ab8:	40004400 	.word	0x40004400
 8008abc:	40004800 	.word	0x40004800
 8008ac0:	40004c00 	.word	0x40004c00
 8008ac4:	40005000 	.word	0x40005000
 8008ac8:	2310      	movs	r3, #16
 8008aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4aae      	ldr	r2, [pc, #696]	; (8008d8c <UART_SetConfig+0x5bc>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	f040 8097 	bne.w	8008c08 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ada:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ade:	2b08      	cmp	r3, #8
 8008ae0:	d823      	bhi.n	8008b2a <UART_SetConfig+0x35a>
 8008ae2:	a201      	add	r2, pc, #4	; (adr r2, 8008ae8 <UART_SetConfig+0x318>)
 8008ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae8:	08008b0d 	.word	0x08008b0d
 8008aec:	08008b2b 	.word	0x08008b2b
 8008af0:	08008b15 	.word	0x08008b15
 8008af4:	08008b2b 	.word	0x08008b2b
 8008af8:	08008b1b 	.word	0x08008b1b
 8008afc:	08008b2b 	.word	0x08008b2b
 8008b00:	08008b2b 	.word	0x08008b2b
 8008b04:	08008b2b 	.word	0x08008b2b
 8008b08:	08008b23 	.word	0x08008b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b0c:	f7fd feea 	bl	80068e4 <HAL_RCC_GetPCLK1Freq>
 8008b10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b12:	e010      	b.n	8008b36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b14:	4b9e      	ldr	r3, [pc, #632]	; (8008d90 <UART_SetConfig+0x5c0>)
 8008b16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b18:	e00d      	b.n	8008b36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b1a:	f7fd fe75 	bl	8006808 <HAL_RCC_GetSysClockFreq>
 8008b1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b20:	e009      	b.n	8008b36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b28:	e005      	b.n	8008b36 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 8130 	beq.w	8008d9e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b42:	4a94      	ldr	r2, [pc, #592]	; (8008d94 <UART_SetConfig+0x5c4>)
 8008b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b50:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	685a      	ldr	r2, [r3, #4]
 8008b56:	4613      	mov	r3, r2
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	4413      	add	r3, r2
 8008b5c:	69ba      	ldr	r2, [r7, #24]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d305      	bcc.n	8008b6e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d903      	bls.n	8008b76 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b74:	e113      	b.n	8008d9e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	2200      	movs	r2, #0
 8008b7a:	60bb      	str	r3, [r7, #8]
 8008b7c:	60fa      	str	r2, [r7, #12]
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b82:	4a84      	ldr	r2, [pc, #528]	; (8008d94 <UART_SetConfig+0x5c4>)
 8008b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	603b      	str	r3, [r7, #0]
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b98:	f7f8 f87e 	bl	8000c98 <__aeabi_uldivmod>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	f04f 0200 	mov.w	r2, #0
 8008ba8:	f04f 0300 	mov.w	r3, #0
 8008bac:	020b      	lsls	r3, r1, #8
 8008bae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008bb2:	0202      	lsls	r2, r0, #8
 8008bb4:	6979      	ldr	r1, [r7, #20]
 8008bb6:	6849      	ldr	r1, [r1, #4]
 8008bb8:	0849      	lsrs	r1, r1, #1
 8008bba:	2000      	movs	r0, #0
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	4605      	mov	r5, r0
 8008bc0:	eb12 0804 	adds.w	r8, r2, r4
 8008bc4:	eb43 0905 	adc.w	r9, r3, r5
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	469a      	mov	sl, r3
 8008bd0:	4693      	mov	fp, r2
 8008bd2:	4652      	mov	r2, sl
 8008bd4:	465b      	mov	r3, fp
 8008bd6:	4640      	mov	r0, r8
 8008bd8:	4649      	mov	r1, r9
 8008bda:	f7f8 f85d 	bl	8000c98 <__aeabi_uldivmod>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	4613      	mov	r3, r2
 8008be4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bec:	d308      	bcc.n	8008c00 <UART_SetConfig+0x430>
 8008bee:	6a3b      	ldr	r3, [r7, #32]
 8008bf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bf4:	d204      	bcs.n	8008c00 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6a3a      	ldr	r2, [r7, #32]
 8008bfc:	60da      	str	r2, [r3, #12]
 8008bfe:	e0ce      	b.n	8008d9e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c06:	e0ca      	b.n	8008d9e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	69db      	ldr	r3, [r3, #28]
 8008c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c10:	d166      	bne.n	8008ce0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008c12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c16:	2b08      	cmp	r3, #8
 8008c18:	d827      	bhi.n	8008c6a <UART_SetConfig+0x49a>
 8008c1a:	a201      	add	r2, pc, #4	; (adr r2, 8008c20 <UART_SetConfig+0x450>)
 8008c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c20:	08008c45 	.word	0x08008c45
 8008c24:	08008c4d 	.word	0x08008c4d
 8008c28:	08008c55 	.word	0x08008c55
 8008c2c:	08008c6b 	.word	0x08008c6b
 8008c30:	08008c5b 	.word	0x08008c5b
 8008c34:	08008c6b 	.word	0x08008c6b
 8008c38:	08008c6b 	.word	0x08008c6b
 8008c3c:	08008c6b 	.word	0x08008c6b
 8008c40:	08008c63 	.word	0x08008c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c44:	f7fd fe4e 	bl	80068e4 <HAL_RCC_GetPCLK1Freq>
 8008c48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c4a:	e014      	b.n	8008c76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c4c:	f7fd fe60 	bl	8006910 <HAL_RCC_GetPCLK2Freq>
 8008c50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c52:	e010      	b.n	8008c76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c54:	4b4e      	ldr	r3, [pc, #312]	; (8008d90 <UART_SetConfig+0x5c0>)
 8008c56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c58:	e00d      	b.n	8008c76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c5a:	f7fd fdd5 	bl	8006808 <HAL_RCC_GetSysClockFreq>
 8008c5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c60:	e009      	b.n	8008c76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c68:	e005      	b.n	8008c76 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 8090 	beq.w	8008d9e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c82:	4a44      	ldr	r2, [pc, #272]	; (8008d94 <UART_SetConfig+0x5c4>)
 8008c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c90:	005a      	lsls	r2, r3, #1
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	085b      	lsrs	r3, r3, #1
 8008c98:	441a      	add	r2, r3
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ca4:	6a3b      	ldr	r3, [r7, #32]
 8008ca6:	2b0f      	cmp	r3, #15
 8008ca8:	d916      	bls.n	8008cd8 <UART_SetConfig+0x508>
 8008caa:	6a3b      	ldr	r3, [r7, #32]
 8008cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cb0:	d212      	bcs.n	8008cd8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cb2:	6a3b      	ldr	r3, [r7, #32]
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	f023 030f 	bic.w	r3, r3, #15
 8008cba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	085b      	lsrs	r3, r3, #1
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	8bfb      	ldrh	r3, [r7, #30]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	8bfa      	ldrh	r2, [r7, #30]
 8008cd4:	60da      	str	r2, [r3, #12]
 8008cd6:	e062      	b.n	8008d9e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008cde:	e05e      	b.n	8008d9e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ce0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ce4:	2b08      	cmp	r3, #8
 8008ce6:	d828      	bhi.n	8008d3a <UART_SetConfig+0x56a>
 8008ce8:	a201      	add	r2, pc, #4	; (adr r2, 8008cf0 <UART_SetConfig+0x520>)
 8008cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cee:	bf00      	nop
 8008cf0:	08008d15 	.word	0x08008d15
 8008cf4:	08008d1d 	.word	0x08008d1d
 8008cf8:	08008d25 	.word	0x08008d25
 8008cfc:	08008d3b 	.word	0x08008d3b
 8008d00:	08008d2b 	.word	0x08008d2b
 8008d04:	08008d3b 	.word	0x08008d3b
 8008d08:	08008d3b 	.word	0x08008d3b
 8008d0c:	08008d3b 	.word	0x08008d3b
 8008d10:	08008d33 	.word	0x08008d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d14:	f7fd fde6 	bl	80068e4 <HAL_RCC_GetPCLK1Freq>
 8008d18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d1a:	e014      	b.n	8008d46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d1c:	f7fd fdf8 	bl	8006910 <HAL_RCC_GetPCLK2Freq>
 8008d20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d22:	e010      	b.n	8008d46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d24:	4b1a      	ldr	r3, [pc, #104]	; (8008d90 <UART_SetConfig+0x5c0>)
 8008d26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d28:	e00d      	b.n	8008d46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d2a:	f7fd fd6d 	bl	8006808 <HAL_RCC_GetSysClockFreq>
 8008d2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d30:	e009      	b.n	8008d46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d38:	e005      	b.n	8008d46 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008d44:	bf00      	nop
    }

    if (pclk != 0U)
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d028      	beq.n	8008d9e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d50:	4a10      	ldr	r2, [pc, #64]	; (8008d94 <UART_SetConfig+0x5c4>)
 8008d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d56:	461a      	mov	r2, r3
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	085b      	lsrs	r3, r3, #1
 8008d64:	441a      	add	r2, r3
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d70:	6a3b      	ldr	r3, [r7, #32]
 8008d72:	2b0f      	cmp	r3, #15
 8008d74:	d910      	bls.n	8008d98 <UART_SetConfig+0x5c8>
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d7c:	d20c      	bcs.n	8008d98 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	60da      	str	r2, [r3, #12]
 8008d88:	e009      	b.n	8008d9e <UART_SetConfig+0x5ce>
 8008d8a:	bf00      	nop
 8008d8c:	40008000 	.word	0x40008000
 8008d90:	00f42400 	.word	0x00f42400
 8008d94:	0800dc68 	.word	0x0800dc68
      }
      else
      {
        ret = HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	2201      	movs	r2, #1
 8008daa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2200      	movs	r2, #0
 8008db2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	2200      	movs	r2, #0
 8008db8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008dba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3730      	adds	r7, #48	; 0x30
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008dc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd4:	f003 0308 	and.w	r3, r3, #8
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00a      	beq.n	8008df2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	430a      	orrs	r2, r1
 8008df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00a      	beq.n	8008e14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	430a      	orrs	r2, r1
 8008e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00a      	beq.n	8008e36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3a:	f003 0304 	and.w	r3, r3, #4
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00a      	beq.n	8008e58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	430a      	orrs	r2, r1
 8008e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5c:	f003 0310 	and.w	r3, r3, #16
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00a      	beq.n	8008e7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	430a      	orrs	r2, r1
 8008e78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e7e:	f003 0320 	and.w	r3, r3, #32
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00a      	beq.n	8008e9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d01a      	beq.n	8008ede <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ec6:	d10a      	bne.n	8008ede <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	430a      	orrs	r2, r1
 8008edc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00a      	beq.n	8008f00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	430a      	orrs	r2, r1
 8008efe:	605a      	str	r2, [r3, #4]
  }
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b098      	sub	sp, #96	; 0x60
 8008f10:	af02      	add	r7, sp, #8
 8008f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f1c:	f7fa fa24 	bl	8003368 <HAL_GetTick>
 8008f20:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 0308 	and.w	r3, r3, #8
 8008f2c:	2b08      	cmp	r3, #8
 8008f2e:	d12f      	bne.n	8008f90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f88e 	bl	8009060 <UART_WaitOnFlagUntilTimeout>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d022      	beq.n	8008f90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f52:	e853 3f00 	ldrex	r3, [r3]
 8008f56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f5e:	653b      	str	r3, [r7, #80]	; 0x50
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	461a      	mov	r2, r3
 8008f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f68:	647b      	str	r3, [r7, #68]	; 0x44
 8008f6a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f70:	e841 2300 	strex	r3, r2, [r1]
 8008f74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1e6      	bne.n	8008f4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2220      	movs	r2, #32
 8008f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e063      	b.n	8009058 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 0304 	and.w	r3, r3, #4
 8008f9a:	2b04      	cmp	r3, #4
 8008f9c:	d149      	bne.n	8009032 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f857 	bl	8009060 <UART_WaitOnFlagUntilTimeout>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d03c      	beq.n	8009032 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	e853 3f00 	ldrex	r3, [r3]
 8008fc4:	623b      	str	r3, [r7, #32]
   return(result);
 8008fc6:	6a3b      	ldr	r3, [r7, #32]
 8008fc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fd6:	633b      	str	r3, [r7, #48]	; 0x30
 8008fd8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fde:	e841 2300 	strex	r3, r2, [r1]
 8008fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1e6      	bne.n	8008fb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3308      	adds	r3, #8
 8008ff0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	e853 3f00 	ldrex	r3, [r3]
 8008ff8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f023 0301 	bic.w	r3, r3, #1
 8009000:	64bb      	str	r3, [r7, #72]	; 0x48
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	3308      	adds	r3, #8
 8009008:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800900a:	61fa      	str	r2, [r7, #28]
 800900c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900e:	69b9      	ldr	r1, [r7, #24]
 8009010:	69fa      	ldr	r2, [r7, #28]
 8009012:	e841 2300 	strex	r3, r2, [r1]
 8009016:	617b      	str	r3, [r7, #20]
   return(result);
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1e5      	bne.n	8008fea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2220      	movs	r2, #32
 8009022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800902e:	2303      	movs	r3, #3
 8009030:	e012      	b.n	8009058 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2220      	movs	r2, #32
 8009036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2220      	movs	r2, #32
 800903e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3758      	adds	r7, #88	; 0x58
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	603b      	str	r3, [r7, #0]
 800906c:	4613      	mov	r3, r2
 800906e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009070:	e04f      	b.n	8009112 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009078:	d04b      	beq.n	8009112 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800907a:	f7fa f975 	bl	8003368 <HAL_GetTick>
 800907e:	4602      	mov	r2, r0
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	69ba      	ldr	r2, [r7, #24]
 8009086:	429a      	cmp	r2, r3
 8009088:	d302      	bcc.n	8009090 <UART_WaitOnFlagUntilTimeout+0x30>
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d101      	bne.n	8009094 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	e04e      	b.n	8009132 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 0304 	and.w	r3, r3, #4
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d037      	beq.n	8009112 <UART_WaitOnFlagUntilTimeout+0xb2>
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	2b80      	cmp	r3, #128	; 0x80
 80090a6:	d034      	beq.n	8009112 <UART_WaitOnFlagUntilTimeout+0xb2>
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	2b40      	cmp	r3, #64	; 0x40
 80090ac:	d031      	beq.n	8009112 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	f003 0308 	and.w	r3, r3, #8
 80090b8:	2b08      	cmp	r3, #8
 80090ba:	d110      	bne.n	80090de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2208      	movs	r2, #8
 80090c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f000 f95b 	bl	8009380 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2208      	movs	r2, #8
 80090ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e029      	b.n	8009132 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	69db      	ldr	r3, [r3, #28]
 80090e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090ec:	d111      	bne.n	8009112 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f000 f941 	bl	8009380 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2220      	movs	r2, #32
 8009102:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800910e:	2303      	movs	r3, #3
 8009110:	e00f      	b.n	8009132 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	69da      	ldr	r2, [r3, #28]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	4013      	ands	r3, r2
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	429a      	cmp	r2, r3
 8009120:	bf0c      	ite	eq
 8009122:	2301      	moveq	r3, #1
 8009124:	2300      	movne	r3, #0
 8009126:	b2db      	uxtb	r3, r3
 8009128:	461a      	mov	r2, r3
 800912a:	79fb      	ldrb	r3, [r7, #7]
 800912c:	429a      	cmp	r2, r3
 800912e:	d0a0      	beq.n	8009072 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
	...

0800913c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800913c:	b480      	push	{r7}
 800913e:	b0a3      	sub	sp, #140	; 0x8c
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	4613      	mov	r3, r2
 8009148:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	88fa      	ldrh	r2, [r7, #6]
 8009154:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	88fa      	ldrh	r2, [r7, #6]
 800915c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2200      	movs	r2, #0
 8009164:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800916e:	d10e      	bne.n	800918e <UART_Start_Receive_IT+0x52>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d105      	bne.n	8009184 <UART_Start_Receive_IT+0x48>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800917e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009182:	e02d      	b.n	80091e0 <UART_Start_Receive_IT+0xa4>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	22ff      	movs	r2, #255	; 0xff
 8009188:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800918c:	e028      	b.n	80091e0 <UART_Start_Receive_IT+0xa4>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10d      	bne.n	80091b2 <UART_Start_Receive_IT+0x76>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d104      	bne.n	80091a8 <UART_Start_Receive_IT+0x6c>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	22ff      	movs	r2, #255	; 0xff
 80091a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091a6:	e01b      	b.n	80091e0 <UART_Start_Receive_IT+0xa4>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	227f      	movs	r2, #127	; 0x7f
 80091ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091b0:	e016      	b.n	80091e0 <UART_Start_Receive_IT+0xa4>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091ba:	d10d      	bne.n	80091d8 <UART_Start_Receive_IT+0x9c>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d104      	bne.n	80091ce <UART_Start_Receive_IT+0x92>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	227f      	movs	r2, #127	; 0x7f
 80091c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091cc:	e008      	b.n	80091e0 <UART_Start_Receive_IT+0xa4>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	223f      	movs	r2, #63	; 0x3f
 80091d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091d6:	e003      	b.n	80091e0 <UART_Start_Receive_IT+0xa4>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2222      	movs	r2, #34	; 0x22
 80091ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3308      	adds	r3, #8
 80091f6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091fa:	e853 3f00 	ldrex	r3, [r3]
 80091fe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009202:	f043 0301 	orr.w	r3, r3, #1
 8009206:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3308      	adds	r3, #8
 8009210:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009214:	673a      	str	r2, [r7, #112]	; 0x70
 8009216:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009218:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800921a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800921c:	e841 2300 	strex	r3, r2, [r1]
 8009220:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009222:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1e3      	bne.n	80091f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800922c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009230:	d14f      	bne.n	80092d2 <UART_Start_Receive_IT+0x196>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009238:	88fa      	ldrh	r2, [r7, #6]
 800923a:	429a      	cmp	r2, r3
 800923c:	d349      	bcc.n	80092d2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009246:	d107      	bne.n	8009258 <UART_Start_Receive_IT+0x11c>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d103      	bne.n	8009258 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4a47      	ldr	r2, [pc, #284]	; (8009370 <UART_Start_Receive_IT+0x234>)
 8009254:	675a      	str	r2, [r3, #116]	; 0x74
 8009256:	e002      	b.n	800925e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	4a46      	ldr	r2, [pc, #280]	; (8009374 <UART_Start_Receive_IT+0x238>)
 800925c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d01a      	beq.n	800929c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800926e:	e853 3f00 	ldrex	r3, [r3]
 8009272:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800927a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	461a      	mov	r2, r3
 8009284:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009288:	65fb      	str	r3, [r7, #92]	; 0x5c
 800928a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800928e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009290:	e841 2300 	strex	r3, r2, [r1]
 8009294:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1e4      	bne.n	8009266 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	3308      	adds	r3, #8
 80092a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092a6:	e853 3f00 	ldrex	r3, [r3]
 80092aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	3308      	adds	r3, #8
 80092ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80092bc:	64ba      	str	r2, [r7, #72]	; 0x48
 80092be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092c4:	e841 2300 	strex	r3, r2, [r1]
 80092c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80092ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d1e5      	bne.n	800929c <UART_Start_Receive_IT+0x160>
 80092d0:	e046      	b.n	8009360 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092da:	d107      	bne.n	80092ec <UART_Start_Receive_IT+0x1b0>
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d103      	bne.n	80092ec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	4a24      	ldr	r2, [pc, #144]	; (8009378 <UART_Start_Receive_IT+0x23c>)
 80092e8:	675a      	str	r2, [r3, #116]	; 0x74
 80092ea:	e002      	b.n	80092f2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	4a23      	ldr	r2, [pc, #140]	; (800937c <UART_Start_Receive_IT+0x240>)
 80092f0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d019      	beq.n	800932e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	e853 3f00 	ldrex	r3, [r3]
 8009306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800930e:	677b      	str	r3, [r7, #116]	; 0x74
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	461a      	mov	r2, r3
 8009316:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009318:	637b      	str	r3, [r7, #52]	; 0x34
 800931a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800931e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009320:	e841 2300 	strex	r3, r2, [r1]
 8009324:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1e6      	bne.n	80092fa <UART_Start_Receive_IT+0x1be>
 800932c:	e018      	b.n	8009360 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	e853 3f00 	ldrex	r3, [r3]
 800933a:	613b      	str	r3, [r7, #16]
   return(result);
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	f043 0320 	orr.w	r3, r3, #32
 8009342:	67bb      	str	r3, [r7, #120]	; 0x78
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	461a      	mov	r2, r3
 800934a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800934c:	623b      	str	r3, [r7, #32]
 800934e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009350:	69f9      	ldr	r1, [r7, #28]
 8009352:	6a3a      	ldr	r2, [r7, #32]
 8009354:	e841 2300 	strex	r3, r2, [r1]
 8009358:	61bb      	str	r3, [r7, #24]
   return(result);
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e6      	bne.n	800932e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	378c      	adds	r7, #140	; 0x8c
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop
 8009370:	08009ba1 	.word	0x08009ba1
 8009374:	08009841 	.word	0x08009841
 8009378:	08009689 	.word	0x08009689
 800937c:	080094d1 	.word	0x080094d1

08009380 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009380:	b480      	push	{r7}
 8009382:	b095      	sub	sp, #84	; 0x54
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009390:	e853 3f00 	ldrex	r3, [r3]
 8009394:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009398:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800939c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093a6:	643b      	str	r3, [r7, #64]	; 0x40
 80093a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093ae:	e841 2300 	strex	r3, r2, [r1]
 80093b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1e6      	bne.n	8009388 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3308      	adds	r3, #8
 80093c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	e853 3f00 	ldrex	r3, [r3]
 80093c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093d0:	f023 0301 	bic.w	r3, r3, #1
 80093d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3308      	adds	r3, #8
 80093dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093e6:	e841 2300 	strex	r3, r2, [r1]
 80093ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1e3      	bne.n	80093ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d118      	bne.n	800942c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	e853 3f00 	ldrex	r3, [r3]
 8009406:	60bb      	str	r3, [r7, #8]
   return(result);
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	f023 0310 	bic.w	r3, r3, #16
 800940e:	647b      	str	r3, [r7, #68]	; 0x44
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	461a      	mov	r2, r3
 8009416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009418:	61bb      	str	r3, [r7, #24]
 800941a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941c:	6979      	ldr	r1, [r7, #20]
 800941e:	69ba      	ldr	r2, [r7, #24]
 8009420:	e841 2300 	strex	r3, r2, [r1]
 8009424:	613b      	str	r3, [r7, #16]
   return(result);
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1e6      	bne.n	80093fa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2220      	movs	r2, #32
 8009430:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009440:	bf00      	nop
 8009442:	3754      	adds	r7, #84	; 0x54
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009458:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f7ff f99a 	bl	80087a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009470:	bf00      	nop
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b088      	sub	sp, #32
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	e853 3f00 	ldrex	r3, [r3]
 800948c:	60bb      	str	r3, [r7, #8]
   return(result);
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009494:	61fb      	str	r3, [r7, #28]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	61bb      	str	r3, [r7, #24]
 80094a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a2:	6979      	ldr	r1, [r7, #20]
 80094a4:	69ba      	ldr	r2, [r7, #24]
 80094a6:	e841 2300 	strex	r3, r2, [r1]
 80094aa:	613b      	str	r3, [r7, #16]
   return(result);
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1e6      	bne.n	8009480 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2220      	movs	r2, #32
 80094b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f7ff f965 	bl	8008790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094c6:	bf00      	nop
 80094c8:	3720      	adds	r7, #32
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
	...

080094d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b09c      	sub	sp, #112	; 0x70
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80094de:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094e8:	2b22      	cmp	r3, #34	; 0x22
 80094ea:	f040 80be 	bne.w	800966a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80094fc:	b2d9      	uxtb	r1, r3
 80094fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009502:	b2da      	uxtb	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009508:	400a      	ands	r2, r1
 800950a:	b2d2      	uxtb	r2, r2
 800950c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009512:	1c5a      	adds	r2, r3, #1
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800951e:	b29b      	uxth	r3, r3
 8009520:	3b01      	subs	r3, #1
 8009522:	b29a      	uxth	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009530:	b29b      	uxth	r3, r3
 8009532:	2b00      	cmp	r3, #0
 8009534:	f040 80a1 	bne.w	800967a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009540:	e853 3f00 	ldrex	r3, [r3]
 8009544:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009548:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800954c:	66bb      	str	r3, [r7, #104]	; 0x68
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009556:	65bb      	str	r3, [r7, #88]	; 0x58
 8009558:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800955c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800955e:	e841 2300 	strex	r3, r2, [r1]
 8009562:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1e6      	bne.n	8009538 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	3308      	adds	r3, #8
 8009570:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009574:	e853 3f00 	ldrex	r3, [r3]
 8009578:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800957a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957c:	f023 0301 	bic.w	r3, r3, #1
 8009580:	667b      	str	r3, [r7, #100]	; 0x64
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	3308      	adds	r3, #8
 8009588:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800958a:	647a      	str	r2, [r7, #68]	; 0x44
 800958c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009590:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009592:	e841 2300 	strex	r3, r2, [r1]
 8009596:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1e5      	bne.n	800956a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2220      	movs	r2, #32
 80095a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a33      	ldr	r2, [pc, #204]	; (8009684 <UART_RxISR_8BIT+0x1b4>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d01f      	beq.n	80095fc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d018      	beq.n	80095fc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	e853 3f00 	ldrex	r3, [r3]
 80095d6:	623b      	str	r3, [r7, #32]
   return(result);
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80095de:	663b      	str	r3, [r7, #96]	; 0x60
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	461a      	mov	r2, r3
 80095e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095e8:	633b      	str	r3, [r7, #48]	; 0x30
 80095ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095f0:	e841 2300 	strex	r3, r2, [r1]
 80095f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1e6      	bne.n	80095ca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009600:	2b01      	cmp	r3, #1
 8009602:	d12e      	bne.n	8009662 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	e853 3f00 	ldrex	r3, [r3]
 8009616:	60fb      	str	r3, [r7, #12]
   return(result);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f023 0310 	bic.w	r3, r3, #16
 800961e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	461a      	mov	r2, r3
 8009626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009628:	61fb      	str	r3, [r7, #28]
 800962a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962c:	69b9      	ldr	r1, [r7, #24]
 800962e:	69fa      	ldr	r2, [r7, #28]
 8009630:	e841 2300 	strex	r3, r2, [r1]
 8009634:	617b      	str	r3, [r7, #20]
   return(result);
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1e6      	bne.n	800960a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	f003 0310 	and.w	r3, r3, #16
 8009646:	2b10      	cmp	r3, #16
 8009648:	d103      	bne.n	8009652 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2210      	movs	r2, #16
 8009650:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7ff f8ac 	bl	80087b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009660:	e00b      	b.n	800967a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f7f8 fa5a 	bl	8001b1c <HAL_UART_RxCpltCallback>
}
 8009668:	e007      	b.n	800967a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	699a      	ldr	r2, [r3, #24]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f042 0208 	orr.w	r2, r2, #8
 8009678:	619a      	str	r2, [r3, #24]
}
 800967a:	bf00      	nop
 800967c:	3770      	adds	r7, #112	; 0x70
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	40008000 	.word	0x40008000

08009688 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b09c      	sub	sp, #112	; 0x70
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009696:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096a0:	2b22      	cmp	r3, #34	; 0x22
 80096a2:	f040 80be 	bne.w	8009822 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096b4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80096b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80096ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80096be:	4013      	ands	r3, r2
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ca:	1c9a      	adds	r2, r3, #2
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	3b01      	subs	r3, #1
 80096da:	b29a      	uxth	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f040 80a1 	bne.w	8009832 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096f8:	e853 3f00 	ldrex	r3, [r3]
 80096fc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80096fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009700:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009704:	667b      	str	r3, [r7, #100]	; 0x64
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	461a      	mov	r2, r3
 800970c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800970e:	657b      	str	r3, [r7, #84]	; 0x54
 8009710:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009712:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009714:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009716:	e841 2300 	strex	r3, r2, [r1]
 800971a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800971c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1e6      	bne.n	80096f0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3308      	adds	r3, #8
 8009728:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800972c:	e853 3f00 	ldrex	r3, [r3]
 8009730:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009734:	f023 0301 	bic.w	r3, r3, #1
 8009738:	663b      	str	r3, [r7, #96]	; 0x60
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3308      	adds	r3, #8
 8009740:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009742:	643a      	str	r2, [r7, #64]	; 0x40
 8009744:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009746:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009748:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800974a:	e841 2300 	strex	r3, r2, [r1]
 800974e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1e5      	bne.n	8009722 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2220      	movs	r2, #32
 800975a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a33      	ldr	r2, [pc, #204]	; (800983c <UART_RxISR_16BIT+0x1b4>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d01f      	beq.n	80097b4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d018      	beq.n	80097b4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009788:	6a3b      	ldr	r3, [r7, #32]
 800978a:	e853 3f00 	ldrex	r3, [r3]
 800978e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009796:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	461a      	mov	r2, r3
 800979e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097a2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097a8:	e841 2300 	strex	r3, r2, [r1]
 80097ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1e6      	bne.n	8009782 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d12e      	bne.n	800981a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	e853 3f00 	ldrex	r3, [r3]
 80097ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	f023 0310 	bic.w	r3, r3, #16
 80097d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	461a      	mov	r2, r3
 80097de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097e0:	61bb      	str	r3, [r7, #24]
 80097e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e4:	6979      	ldr	r1, [r7, #20]
 80097e6:	69ba      	ldr	r2, [r7, #24]
 80097e8:	e841 2300 	strex	r3, r2, [r1]
 80097ec:	613b      	str	r3, [r7, #16]
   return(result);
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1e6      	bne.n	80097c2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	69db      	ldr	r3, [r3, #28]
 80097fa:	f003 0310 	and.w	r3, r3, #16
 80097fe:	2b10      	cmp	r3, #16
 8009800:	d103      	bne.n	800980a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2210      	movs	r2, #16
 8009808:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009810:	4619      	mov	r1, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7fe ffd0 	bl	80087b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009818:	e00b      	b.n	8009832 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f7f8 f97e 	bl	8001b1c <HAL_UART_RxCpltCallback>
}
 8009820:	e007      	b.n	8009832 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	699a      	ldr	r2, [r3, #24]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f042 0208 	orr.w	r2, r2, #8
 8009830:	619a      	str	r2, [r3, #24]
}
 8009832:	bf00      	nop
 8009834:	3770      	adds	r7, #112	; 0x70
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	40008000 	.word	0x40008000

08009840 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b0ac      	sub	sp, #176	; 0xb0
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800984e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	69db      	ldr	r3, [r3, #28]
 8009858:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009876:	2b22      	cmp	r3, #34	; 0x22
 8009878:	f040 8182 	bne.w	8009b80 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009882:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009886:	e125      	b.n	8009ad4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009892:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009896:	b2d9      	uxtb	r1, r3
 8009898:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800989c:	b2da      	uxtb	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098a2:	400a      	ands	r2, r1
 80098a4:	b2d2      	uxtb	r2, r2
 80098a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ac:	1c5a      	adds	r2, r3, #1
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	3b01      	subs	r3, #1
 80098bc:	b29a      	uxth	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	69db      	ldr	r3, [r3, #28]
 80098ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80098ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098d2:	f003 0307 	and.w	r3, r3, #7
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d053      	beq.n	8009982 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d011      	beq.n	800990a <UART_RxISR_8BIT_FIFOEN+0xca>
 80098e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00b      	beq.n	800990a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2201      	movs	r2, #1
 80098f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009900:	f043 0201 	orr.w	r2, r3, #1
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800990a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800990e:	f003 0302 	and.w	r3, r3, #2
 8009912:	2b00      	cmp	r3, #0
 8009914:	d011      	beq.n	800993a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00b      	beq.n	800993a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2202      	movs	r2, #2
 8009928:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009930:	f043 0204 	orr.w	r2, r3, #4
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800993a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800993e:	f003 0304 	and.w	r3, r3, #4
 8009942:	2b00      	cmp	r3, #0
 8009944:	d011      	beq.n	800996a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800994a:	f003 0301 	and.w	r3, r3, #1
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00b      	beq.n	800996a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2204      	movs	r2, #4
 8009958:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009960:	f043 0202 	orr.w	r2, r3, #2
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009970:	2b00      	cmp	r3, #0
 8009972:	d006      	beq.n	8009982 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f7fe ff15 	bl	80087a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009988:	b29b      	uxth	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	f040 80a2 	bne.w	8009ad4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009996:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009998:	e853 3f00 	ldrex	r3, [r3]
 800999c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800999e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	461a      	mov	r2, r3
 80099ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80099b4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80099b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80099ba:	e841 2300 	strex	r3, r2, [r1]
 80099be:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80099c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1e4      	bne.n	8009990 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	3308      	adds	r3, #8
 80099cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099d0:	e853 3f00 	ldrex	r3, [r3]
 80099d4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80099d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099dc:	f023 0301 	bic.w	r3, r3, #1
 80099e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	3308      	adds	r3, #8
 80099ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80099ee:	66ba      	str	r2, [r7, #104]	; 0x68
 80099f0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80099f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80099f6:	e841 2300 	strex	r3, r2, [r1]
 80099fa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80099fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1e1      	bne.n	80099c6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2220      	movs	r2, #32
 8009a06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a5f      	ldr	r2, [pc, #380]	; (8009b98 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d021      	beq.n	8009a64 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d01a      	beq.n	8009a64 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a36:	e853 3f00 	ldrex	r3, [r3]
 8009a3a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a50:	657b      	str	r3, [r7, #84]	; 0x54
 8009a52:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a58:	e841 2300 	strex	r3, r2, [r1]
 8009a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1e4      	bne.n	8009a2e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d130      	bne.n	8009ace <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a7a:	e853 3f00 	ldrex	r3, [r3]
 8009a7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a82:	f023 0310 	bic.w	r3, r3, #16
 8009a86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a94:	643b      	str	r3, [r7, #64]	; 0x40
 8009a96:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a9c:	e841 2300 	strex	r3, r2, [r1]
 8009aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1e4      	bne.n	8009a72 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	69db      	ldr	r3, [r3, #28]
 8009aae:	f003 0310 	and.w	r3, r3, #16
 8009ab2:	2b10      	cmp	r3, #16
 8009ab4:	d103      	bne.n	8009abe <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2210      	movs	r2, #16
 8009abc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7fe fe76 	bl	80087b8 <HAL_UARTEx_RxEventCallback>
 8009acc:	e002      	b.n	8009ad4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7f8 f824 	bl	8001b1c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ad4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d006      	beq.n	8009aea <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009adc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ae0:	f003 0320 	and.w	r3, r3, #32
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f47f aecf 	bne.w	8009888 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009af0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009af4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d049      	beq.n	8009b90 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009b02:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d242      	bcs.n	8009b90 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	3308      	adds	r3, #8
 8009b10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b12:	6a3b      	ldr	r3, [r7, #32]
 8009b14:	e853 3f00 	ldrex	r3, [r3]
 8009b18:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	3308      	adds	r3, #8
 8009b2a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b36:	e841 2300 	strex	r3, r2, [r1]
 8009b3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1e3      	bne.n	8009b0a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4a15      	ldr	r2, [pc, #84]	; (8009b9c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009b46:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	e853 3f00 	ldrex	r3, [r3]
 8009b54:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	f043 0320 	orr.w	r3, r3, #32
 8009b5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	461a      	mov	r2, r3
 8009b66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009b6a:	61bb      	str	r3, [r7, #24]
 8009b6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6e:	6979      	ldr	r1, [r7, #20]
 8009b70:	69ba      	ldr	r2, [r7, #24]
 8009b72:	e841 2300 	strex	r3, r2, [r1]
 8009b76:	613b      	str	r3, [r7, #16]
   return(result);
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1e4      	bne.n	8009b48 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b7e:	e007      	b.n	8009b90 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	699a      	ldr	r2, [r3, #24]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f042 0208 	orr.w	r2, r2, #8
 8009b8e:	619a      	str	r2, [r3, #24]
}
 8009b90:	bf00      	nop
 8009b92:	37b0      	adds	r7, #176	; 0xb0
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	40008000 	.word	0x40008000
 8009b9c:	080094d1 	.word	0x080094d1

08009ba0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b0ae      	sub	sp, #184	; 0xb8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009bae:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	69db      	ldr	r3, [r3, #28]
 8009bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bd6:	2b22      	cmp	r3, #34	; 0x22
 8009bd8:	f040 8186 	bne.w	8009ee8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009be2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009be6:	e129      	b.n	8009e3c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bee:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009bfa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009bfe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009c02:	4013      	ands	r3, r2
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c10:	1c9a      	adds	r2, r3, #2
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	69db      	ldr	r3, [r3, #28]
 8009c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c36:	f003 0307 	and.w	r3, r3, #7
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d053      	beq.n	8009ce6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c42:	f003 0301 	and.w	r3, r3, #1
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d011      	beq.n	8009c6e <UART_RxISR_16BIT_FIFOEN+0xce>
 8009c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00b      	beq.n	8009c6e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c64:	f043 0201 	orr.w	r2, r3, #1
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c72:	f003 0302 	and.w	r3, r3, #2
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d011      	beq.n	8009c9e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009c7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00b      	beq.n	8009c9e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c94:	f043 0204 	orr.w	r2, r3, #4
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009ca2:	f003 0304 	and.w	r3, r3, #4
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d011      	beq.n	8009cce <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009caa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009cae:	f003 0301 	and.w	r3, r3, #1
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00b      	beq.n	8009cce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2204      	movs	r2, #4
 8009cbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cc4:	f043 0202 	orr.w	r2, r3, #2
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d006      	beq.n	8009ce6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7fe fd63 	bl	80087a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f040 80a4 	bne.w	8009e3c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cfc:	e853 3f00 	ldrex	r3, [r3]
 8009d00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	461a      	mov	r2, r3
 8009d12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d1a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009d1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d22:	e841 2300 	strex	r3, r2, [r1]
 8009d26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1e2      	bne.n	8009cf4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3308      	adds	r3, #8
 8009d34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d38:	e853 3f00 	ldrex	r3, [r3]
 8009d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d44:	f023 0301 	bic.w	r3, r3, #1
 8009d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3308      	adds	r3, #8
 8009d52:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009d56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d5e:	e841 2300 	strex	r3, r2, [r1]
 8009d62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1e1      	bne.n	8009d2e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2220      	movs	r2, #32
 8009d6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a5f      	ldr	r2, [pc, #380]	; (8009f00 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d021      	beq.n	8009dcc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d01a      	beq.n	8009dcc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d9e:	e853 3f00 	ldrex	r3, [r3]
 8009da2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009da6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009daa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	461a      	mov	r2, r3
 8009db4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009db8:	65bb      	str	r3, [r7, #88]	; 0x58
 8009dba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009dbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009dc0:	e841 2300 	strex	r3, r2, [r1]
 8009dc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1e4      	bne.n	8009d96 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d130      	bne.n	8009e36 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de2:	e853 3f00 	ldrex	r3, [r3]
 8009de6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dea:	f023 0310 	bic.w	r3, r3, #16
 8009dee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	461a      	mov	r2, r3
 8009df8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8009dfe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e04:	e841 2300 	strex	r3, r2, [r1]
 8009e08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1e4      	bne.n	8009dda <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	f003 0310 	and.w	r3, r3, #16
 8009e1a:	2b10      	cmp	r3, #16
 8009e1c:	d103      	bne.n	8009e26 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2210      	movs	r2, #16
 8009e24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7fe fcc2 	bl	80087b8 <HAL_UARTEx_RxEventCallback>
 8009e34:	e002      	b.n	8009e3c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7f7 fe70 	bl	8001b1c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e3c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d006      	beq.n	8009e52 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009e44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e48:	f003 0320 	and.w	r3, r3, #32
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f47f aecb 	bne.w	8009be8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e58:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009e5c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d049      	beq.n	8009ef8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009e6a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d242      	bcs.n	8009ef8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3308      	adds	r3, #8
 8009e78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7c:	e853 3f00 	ldrex	r3, [r3]
 8009e80:	623b      	str	r3, [r7, #32]
   return(result);
 8009e82:	6a3b      	ldr	r3, [r7, #32]
 8009e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	3308      	adds	r3, #8
 8009e92:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009e96:	633a      	str	r2, [r7, #48]	; 0x30
 8009e98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e9e:	e841 2300 	strex	r3, r2, [r1]
 8009ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1e3      	bne.n	8009e72 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4a15      	ldr	r2, [pc, #84]	; (8009f04 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009eae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	e853 3f00 	ldrex	r3, [r3]
 8009ebc:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f043 0320 	orr.w	r3, r3, #32
 8009ec4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ed2:	61fb      	str	r3, [r7, #28]
 8009ed4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed6:	69b9      	ldr	r1, [r7, #24]
 8009ed8:	69fa      	ldr	r2, [r7, #28]
 8009eda:	e841 2300 	strex	r3, r2, [r1]
 8009ede:	617b      	str	r3, [r7, #20]
   return(result);
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1e4      	bne.n	8009eb0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ee6:	e007      	b.n	8009ef8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	699a      	ldr	r2, [r3, #24]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f042 0208 	orr.w	r2, r2, #8
 8009ef6:	619a      	str	r2, [r3, #24]
}
 8009ef8:	bf00      	nop
 8009efa:	37b8      	adds	r7, #184	; 0xb8
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	40008000 	.word	0x40008000
 8009f04:	08009689 	.word	0x08009689

08009f08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d101      	bne.n	8009f5a <HAL_UARTEx_DisableFifoMode+0x16>
 8009f56:	2302      	movs	r3, #2
 8009f58:	e027      	b.n	8009faa <HAL_UARTEx_DisableFifoMode+0x66>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2224      	movs	r2, #36	; 0x24
 8009f66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f022 0201 	bic.w	r2, r2, #1
 8009f80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009f88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2220      	movs	r2, #32
 8009f9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3714      	adds	r7, #20
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr

08009fb6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b084      	sub	sp, #16
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
 8009fbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d101      	bne.n	8009fce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009fca:	2302      	movs	r3, #2
 8009fcc:	e02d      	b.n	800a02a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2224      	movs	r2, #36	; 0x24
 8009fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f022 0201 	bic.w	r2, r2, #1
 8009ff4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	430a      	orrs	r2, r1
 800a008:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f850 	bl	800a0b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2220      	movs	r2, #32
 800a01c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b084      	sub	sp, #16
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a042:	2b01      	cmp	r3, #1
 800a044:	d101      	bne.n	800a04a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a046:	2302      	movs	r3, #2
 800a048:	e02d      	b.n	800a0a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2224      	movs	r2, #36	; 0x24
 800a056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f022 0201 	bic.w	r2, r2, #1
 800a070:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	683a      	ldr	r2, [r7, #0]
 800a082:	430a      	orrs	r2, r1
 800a084:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f812 	bl	800a0b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2220      	movs	r2, #32
 800a098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
	...

0800a0b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d108      	bne.n	800a0d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a0d0:	e031      	b.n	800a136 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a0d2:	2308      	movs	r3, #8
 800a0d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a0d6:	2308      	movs	r3, #8
 800a0d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	0e5b      	lsrs	r3, r3, #25
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	f003 0307 	and.w	r3, r3, #7
 800a0e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	0f5b      	lsrs	r3, r3, #29
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	f003 0307 	and.w	r3, r3, #7
 800a0f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0fa:	7bbb      	ldrb	r3, [r7, #14]
 800a0fc:	7b3a      	ldrb	r2, [r7, #12]
 800a0fe:	4911      	ldr	r1, [pc, #68]	; (800a144 <UARTEx_SetNbDataToProcess+0x94>)
 800a100:	5c8a      	ldrb	r2, [r1, r2]
 800a102:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a106:	7b3a      	ldrb	r2, [r7, #12]
 800a108:	490f      	ldr	r1, [pc, #60]	; (800a148 <UARTEx_SetNbDataToProcess+0x98>)
 800a10a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a10c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a110:	b29a      	uxth	r2, r3
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a118:	7bfb      	ldrb	r3, [r7, #15]
 800a11a:	7b7a      	ldrb	r2, [r7, #13]
 800a11c:	4909      	ldr	r1, [pc, #36]	; (800a144 <UARTEx_SetNbDataToProcess+0x94>)
 800a11e:	5c8a      	ldrb	r2, [r1, r2]
 800a120:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a124:	7b7a      	ldrb	r2, [r7, #13]
 800a126:	4908      	ldr	r1, [pc, #32]	; (800a148 <UARTEx_SetNbDataToProcess+0x98>)
 800a128:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a12a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a12e:	b29a      	uxth	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a136:	bf00      	nop
 800a138:	3714      	adds	r7, #20
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	0800dc80 	.word	0x0800dc80
 800a148:	0800dc88 	.word	0x0800dc88

0800a14c <__errno>:
 800a14c:	4b01      	ldr	r3, [pc, #4]	; (800a154 <__errno+0x8>)
 800a14e:	6818      	ldr	r0, [r3, #0]
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	20000010 	.word	0x20000010

0800a158 <exit>:
 800a158:	b508      	push	{r3, lr}
 800a15a:	4b07      	ldr	r3, [pc, #28]	; (800a178 <exit+0x20>)
 800a15c:	4604      	mov	r4, r0
 800a15e:	b113      	cbz	r3, 800a166 <exit+0xe>
 800a160:	2100      	movs	r1, #0
 800a162:	f3af 8000 	nop.w
 800a166:	4b05      	ldr	r3, [pc, #20]	; (800a17c <exit+0x24>)
 800a168:	6818      	ldr	r0, [r3, #0]
 800a16a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a16c:	b103      	cbz	r3, 800a170 <exit+0x18>
 800a16e:	4798      	blx	r3
 800a170:	4620      	mov	r0, r4
 800a172:	f7f8 fda5 	bl	8002cc0 <_exit>
 800a176:	bf00      	nop
 800a178:	00000000 	.word	0x00000000
 800a17c:	0800dc90 	.word	0x0800dc90

0800a180 <__libc_init_array>:
 800a180:	b570      	push	{r4, r5, r6, lr}
 800a182:	4d0d      	ldr	r5, [pc, #52]	; (800a1b8 <__libc_init_array+0x38>)
 800a184:	4c0d      	ldr	r4, [pc, #52]	; (800a1bc <__libc_init_array+0x3c>)
 800a186:	1b64      	subs	r4, r4, r5
 800a188:	10a4      	asrs	r4, r4, #2
 800a18a:	2600      	movs	r6, #0
 800a18c:	42a6      	cmp	r6, r4
 800a18e:	d109      	bne.n	800a1a4 <__libc_init_array+0x24>
 800a190:	4d0b      	ldr	r5, [pc, #44]	; (800a1c0 <__libc_init_array+0x40>)
 800a192:	4c0c      	ldr	r4, [pc, #48]	; (800a1c4 <__libc_init_array+0x44>)
 800a194:	f003 f86e 	bl	800d274 <_init>
 800a198:	1b64      	subs	r4, r4, r5
 800a19a:	10a4      	asrs	r4, r4, #2
 800a19c:	2600      	movs	r6, #0
 800a19e:	42a6      	cmp	r6, r4
 800a1a0:	d105      	bne.n	800a1ae <__libc_init_array+0x2e>
 800a1a2:	bd70      	pop	{r4, r5, r6, pc}
 800a1a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1a8:	4798      	blx	r3
 800a1aa:	3601      	adds	r6, #1
 800a1ac:	e7ee      	b.n	800a18c <__libc_init_array+0xc>
 800a1ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1b2:	4798      	blx	r3
 800a1b4:	3601      	adds	r6, #1
 800a1b6:	e7f2      	b.n	800a19e <__libc_init_array+0x1e>
 800a1b8:	0800e074 	.word	0x0800e074
 800a1bc:	0800e074 	.word	0x0800e074
 800a1c0:	0800e074 	.word	0x0800e074
 800a1c4:	0800e078 	.word	0x0800e078

0800a1c8 <memset>:
 800a1c8:	4402      	add	r2, r0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d100      	bne.n	800a1d2 <memset+0xa>
 800a1d0:	4770      	bx	lr
 800a1d2:	f803 1b01 	strb.w	r1, [r3], #1
 800a1d6:	e7f9      	b.n	800a1cc <memset+0x4>

0800a1d8 <__cvt>:
 800a1d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1dc:	ec55 4b10 	vmov	r4, r5, d0
 800a1e0:	2d00      	cmp	r5, #0
 800a1e2:	460e      	mov	r6, r1
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	462b      	mov	r3, r5
 800a1e8:	bfbb      	ittet	lt
 800a1ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a1ee:	461d      	movlt	r5, r3
 800a1f0:	2300      	movge	r3, #0
 800a1f2:	232d      	movlt	r3, #45	; 0x2d
 800a1f4:	700b      	strb	r3, [r1, #0]
 800a1f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a1fc:	4691      	mov	r9, r2
 800a1fe:	f023 0820 	bic.w	r8, r3, #32
 800a202:	bfbc      	itt	lt
 800a204:	4622      	movlt	r2, r4
 800a206:	4614      	movlt	r4, r2
 800a208:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a20c:	d005      	beq.n	800a21a <__cvt+0x42>
 800a20e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a212:	d100      	bne.n	800a216 <__cvt+0x3e>
 800a214:	3601      	adds	r6, #1
 800a216:	2102      	movs	r1, #2
 800a218:	e000      	b.n	800a21c <__cvt+0x44>
 800a21a:	2103      	movs	r1, #3
 800a21c:	ab03      	add	r3, sp, #12
 800a21e:	9301      	str	r3, [sp, #4]
 800a220:	ab02      	add	r3, sp, #8
 800a222:	9300      	str	r3, [sp, #0]
 800a224:	ec45 4b10 	vmov	d0, r4, r5
 800a228:	4653      	mov	r3, sl
 800a22a:	4632      	mov	r2, r6
 800a22c:	f000 fe38 	bl	800aea0 <_dtoa_r>
 800a230:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a234:	4607      	mov	r7, r0
 800a236:	d102      	bne.n	800a23e <__cvt+0x66>
 800a238:	f019 0f01 	tst.w	r9, #1
 800a23c:	d022      	beq.n	800a284 <__cvt+0xac>
 800a23e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a242:	eb07 0906 	add.w	r9, r7, r6
 800a246:	d110      	bne.n	800a26a <__cvt+0x92>
 800a248:	783b      	ldrb	r3, [r7, #0]
 800a24a:	2b30      	cmp	r3, #48	; 0x30
 800a24c:	d10a      	bne.n	800a264 <__cvt+0x8c>
 800a24e:	2200      	movs	r2, #0
 800a250:	2300      	movs	r3, #0
 800a252:	4620      	mov	r0, r4
 800a254:	4629      	mov	r1, r5
 800a256:	f7f6 fc5f 	bl	8000b18 <__aeabi_dcmpeq>
 800a25a:	b918      	cbnz	r0, 800a264 <__cvt+0x8c>
 800a25c:	f1c6 0601 	rsb	r6, r6, #1
 800a260:	f8ca 6000 	str.w	r6, [sl]
 800a264:	f8da 3000 	ldr.w	r3, [sl]
 800a268:	4499      	add	r9, r3
 800a26a:	2200      	movs	r2, #0
 800a26c:	2300      	movs	r3, #0
 800a26e:	4620      	mov	r0, r4
 800a270:	4629      	mov	r1, r5
 800a272:	f7f6 fc51 	bl	8000b18 <__aeabi_dcmpeq>
 800a276:	b108      	cbz	r0, 800a27c <__cvt+0xa4>
 800a278:	f8cd 900c 	str.w	r9, [sp, #12]
 800a27c:	2230      	movs	r2, #48	; 0x30
 800a27e:	9b03      	ldr	r3, [sp, #12]
 800a280:	454b      	cmp	r3, r9
 800a282:	d307      	bcc.n	800a294 <__cvt+0xbc>
 800a284:	9b03      	ldr	r3, [sp, #12]
 800a286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a288:	1bdb      	subs	r3, r3, r7
 800a28a:	4638      	mov	r0, r7
 800a28c:	6013      	str	r3, [r2, #0]
 800a28e:	b004      	add	sp, #16
 800a290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a294:	1c59      	adds	r1, r3, #1
 800a296:	9103      	str	r1, [sp, #12]
 800a298:	701a      	strb	r2, [r3, #0]
 800a29a:	e7f0      	b.n	800a27e <__cvt+0xa6>

0800a29c <__exponent>:
 800a29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2900      	cmp	r1, #0
 800a2a2:	bfb8      	it	lt
 800a2a4:	4249      	neglt	r1, r1
 800a2a6:	f803 2b02 	strb.w	r2, [r3], #2
 800a2aa:	bfb4      	ite	lt
 800a2ac:	222d      	movlt	r2, #45	; 0x2d
 800a2ae:	222b      	movge	r2, #43	; 0x2b
 800a2b0:	2909      	cmp	r1, #9
 800a2b2:	7042      	strb	r2, [r0, #1]
 800a2b4:	dd2a      	ble.n	800a30c <__exponent+0x70>
 800a2b6:	f10d 0407 	add.w	r4, sp, #7
 800a2ba:	46a4      	mov	ip, r4
 800a2bc:	270a      	movs	r7, #10
 800a2be:	46a6      	mov	lr, r4
 800a2c0:	460a      	mov	r2, r1
 800a2c2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a2c6:	fb07 1516 	mls	r5, r7, r6, r1
 800a2ca:	3530      	adds	r5, #48	; 0x30
 800a2cc:	2a63      	cmp	r2, #99	; 0x63
 800a2ce:	f104 34ff 	add.w	r4, r4, #4294967295
 800a2d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	dcf1      	bgt.n	800a2be <__exponent+0x22>
 800a2da:	3130      	adds	r1, #48	; 0x30
 800a2dc:	f1ae 0502 	sub.w	r5, lr, #2
 800a2e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a2e4:	1c44      	adds	r4, r0, #1
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	4561      	cmp	r1, ip
 800a2ea:	d30a      	bcc.n	800a302 <__exponent+0x66>
 800a2ec:	f10d 0209 	add.w	r2, sp, #9
 800a2f0:	eba2 020e 	sub.w	r2, r2, lr
 800a2f4:	4565      	cmp	r5, ip
 800a2f6:	bf88      	it	hi
 800a2f8:	2200      	movhi	r2, #0
 800a2fa:	4413      	add	r3, r2
 800a2fc:	1a18      	subs	r0, r3, r0
 800a2fe:	b003      	add	sp, #12
 800a300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a302:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a306:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a30a:	e7ed      	b.n	800a2e8 <__exponent+0x4c>
 800a30c:	2330      	movs	r3, #48	; 0x30
 800a30e:	3130      	adds	r1, #48	; 0x30
 800a310:	7083      	strb	r3, [r0, #2]
 800a312:	70c1      	strb	r1, [r0, #3]
 800a314:	1d03      	adds	r3, r0, #4
 800a316:	e7f1      	b.n	800a2fc <__exponent+0x60>

0800a318 <_printf_float>:
 800a318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31c:	ed2d 8b02 	vpush	{d8}
 800a320:	b08d      	sub	sp, #52	; 0x34
 800a322:	460c      	mov	r4, r1
 800a324:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a328:	4616      	mov	r6, r2
 800a32a:	461f      	mov	r7, r3
 800a32c:	4605      	mov	r5, r0
 800a32e:	f001 fd5d 	bl	800bdec <_localeconv_r>
 800a332:	f8d0 a000 	ldr.w	sl, [r0]
 800a336:	4650      	mov	r0, sl
 800a338:	f7f5 ff72 	bl	8000220 <strlen>
 800a33c:	2300      	movs	r3, #0
 800a33e:	930a      	str	r3, [sp, #40]	; 0x28
 800a340:	6823      	ldr	r3, [r4, #0]
 800a342:	9305      	str	r3, [sp, #20]
 800a344:	f8d8 3000 	ldr.w	r3, [r8]
 800a348:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a34c:	3307      	adds	r3, #7
 800a34e:	f023 0307 	bic.w	r3, r3, #7
 800a352:	f103 0208 	add.w	r2, r3, #8
 800a356:	f8c8 2000 	str.w	r2, [r8]
 800a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a362:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a366:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a36a:	9307      	str	r3, [sp, #28]
 800a36c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a370:	ee08 0a10 	vmov	s16, r0
 800a374:	4b9f      	ldr	r3, [pc, #636]	; (800a5f4 <_printf_float+0x2dc>)
 800a376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a37a:	f04f 32ff 	mov.w	r2, #4294967295
 800a37e:	f7f6 fbfd 	bl	8000b7c <__aeabi_dcmpun>
 800a382:	bb88      	cbnz	r0, 800a3e8 <_printf_float+0xd0>
 800a384:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a388:	4b9a      	ldr	r3, [pc, #616]	; (800a5f4 <_printf_float+0x2dc>)
 800a38a:	f04f 32ff 	mov.w	r2, #4294967295
 800a38e:	f7f6 fbd7 	bl	8000b40 <__aeabi_dcmple>
 800a392:	bb48      	cbnz	r0, 800a3e8 <_printf_float+0xd0>
 800a394:	2200      	movs	r2, #0
 800a396:	2300      	movs	r3, #0
 800a398:	4640      	mov	r0, r8
 800a39a:	4649      	mov	r1, r9
 800a39c:	f7f6 fbc6 	bl	8000b2c <__aeabi_dcmplt>
 800a3a0:	b110      	cbz	r0, 800a3a8 <_printf_float+0x90>
 800a3a2:	232d      	movs	r3, #45	; 0x2d
 800a3a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3a8:	4b93      	ldr	r3, [pc, #588]	; (800a5f8 <_printf_float+0x2e0>)
 800a3aa:	4894      	ldr	r0, [pc, #592]	; (800a5fc <_printf_float+0x2e4>)
 800a3ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a3b0:	bf94      	ite	ls
 800a3b2:	4698      	movls	r8, r3
 800a3b4:	4680      	movhi	r8, r0
 800a3b6:	2303      	movs	r3, #3
 800a3b8:	6123      	str	r3, [r4, #16]
 800a3ba:	9b05      	ldr	r3, [sp, #20]
 800a3bc:	f023 0204 	bic.w	r2, r3, #4
 800a3c0:	6022      	str	r2, [r4, #0]
 800a3c2:	f04f 0900 	mov.w	r9, #0
 800a3c6:	9700      	str	r7, [sp, #0]
 800a3c8:	4633      	mov	r3, r6
 800a3ca:	aa0b      	add	r2, sp, #44	; 0x2c
 800a3cc:	4621      	mov	r1, r4
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	f000 f9d8 	bl	800a784 <_printf_common>
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	f040 8090 	bne.w	800a4fa <_printf_float+0x1e2>
 800a3da:	f04f 30ff 	mov.w	r0, #4294967295
 800a3de:	b00d      	add	sp, #52	; 0x34
 800a3e0:	ecbd 8b02 	vpop	{d8}
 800a3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e8:	4642      	mov	r2, r8
 800a3ea:	464b      	mov	r3, r9
 800a3ec:	4640      	mov	r0, r8
 800a3ee:	4649      	mov	r1, r9
 800a3f0:	f7f6 fbc4 	bl	8000b7c <__aeabi_dcmpun>
 800a3f4:	b140      	cbz	r0, 800a408 <_printf_float+0xf0>
 800a3f6:	464b      	mov	r3, r9
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	bfbc      	itt	lt
 800a3fc:	232d      	movlt	r3, #45	; 0x2d
 800a3fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a402:	487f      	ldr	r0, [pc, #508]	; (800a600 <_printf_float+0x2e8>)
 800a404:	4b7f      	ldr	r3, [pc, #508]	; (800a604 <_printf_float+0x2ec>)
 800a406:	e7d1      	b.n	800a3ac <_printf_float+0x94>
 800a408:	6863      	ldr	r3, [r4, #4]
 800a40a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a40e:	9206      	str	r2, [sp, #24]
 800a410:	1c5a      	adds	r2, r3, #1
 800a412:	d13f      	bne.n	800a494 <_printf_float+0x17c>
 800a414:	2306      	movs	r3, #6
 800a416:	6063      	str	r3, [r4, #4]
 800a418:	9b05      	ldr	r3, [sp, #20]
 800a41a:	6861      	ldr	r1, [r4, #4]
 800a41c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a420:	2300      	movs	r3, #0
 800a422:	9303      	str	r3, [sp, #12]
 800a424:	ab0a      	add	r3, sp, #40	; 0x28
 800a426:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a42a:	ab09      	add	r3, sp, #36	; 0x24
 800a42c:	ec49 8b10 	vmov	d0, r8, r9
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	6022      	str	r2, [r4, #0]
 800a434:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a438:	4628      	mov	r0, r5
 800a43a:	f7ff fecd 	bl	800a1d8 <__cvt>
 800a43e:	9b06      	ldr	r3, [sp, #24]
 800a440:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a442:	2b47      	cmp	r3, #71	; 0x47
 800a444:	4680      	mov	r8, r0
 800a446:	d108      	bne.n	800a45a <_printf_float+0x142>
 800a448:	1cc8      	adds	r0, r1, #3
 800a44a:	db02      	blt.n	800a452 <_printf_float+0x13a>
 800a44c:	6863      	ldr	r3, [r4, #4]
 800a44e:	4299      	cmp	r1, r3
 800a450:	dd41      	ble.n	800a4d6 <_printf_float+0x1be>
 800a452:	f1ab 0b02 	sub.w	fp, fp, #2
 800a456:	fa5f fb8b 	uxtb.w	fp, fp
 800a45a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a45e:	d820      	bhi.n	800a4a2 <_printf_float+0x18a>
 800a460:	3901      	subs	r1, #1
 800a462:	465a      	mov	r2, fp
 800a464:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a468:	9109      	str	r1, [sp, #36]	; 0x24
 800a46a:	f7ff ff17 	bl	800a29c <__exponent>
 800a46e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a470:	1813      	adds	r3, r2, r0
 800a472:	2a01      	cmp	r2, #1
 800a474:	4681      	mov	r9, r0
 800a476:	6123      	str	r3, [r4, #16]
 800a478:	dc02      	bgt.n	800a480 <_printf_float+0x168>
 800a47a:	6822      	ldr	r2, [r4, #0]
 800a47c:	07d2      	lsls	r2, r2, #31
 800a47e:	d501      	bpl.n	800a484 <_printf_float+0x16c>
 800a480:	3301      	adds	r3, #1
 800a482:	6123      	str	r3, [r4, #16]
 800a484:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d09c      	beq.n	800a3c6 <_printf_float+0xae>
 800a48c:	232d      	movs	r3, #45	; 0x2d
 800a48e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a492:	e798      	b.n	800a3c6 <_printf_float+0xae>
 800a494:	9a06      	ldr	r2, [sp, #24]
 800a496:	2a47      	cmp	r2, #71	; 0x47
 800a498:	d1be      	bne.n	800a418 <_printf_float+0x100>
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1bc      	bne.n	800a418 <_printf_float+0x100>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e7b9      	b.n	800a416 <_printf_float+0xfe>
 800a4a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a4a6:	d118      	bne.n	800a4da <_printf_float+0x1c2>
 800a4a8:	2900      	cmp	r1, #0
 800a4aa:	6863      	ldr	r3, [r4, #4]
 800a4ac:	dd0b      	ble.n	800a4c6 <_printf_float+0x1ae>
 800a4ae:	6121      	str	r1, [r4, #16]
 800a4b0:	b913      	cbnz	r3, 800a4b8 <_printf_float+0x1a0>
 800a4b2:	6822      	ldr	r2, [r4, #0]
 800a4b4:	07d0      	lsls	r0, r2, #31
 800a4b6:	d502      	bpl.n	800a4be <_printf_float+0x1a6>
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	440b      	add	r3, r1
 800a4bc:	6123      	str	r3, [r4, #16]
 800a4be:	65a1      	str	r1, [r4, #88]	; 0x58
 800a4c0:	f04f 0900 	mov.w	r9, #0
 800a4c4:	e7de      	b.n	800a484 <_printf_float+0x16c>
 800a4c6:	b913      	cbnz	r3, 800a4ce <_printf_float+0x1b6>
 800a4c8:	6822      	ldr	r2, [r4, #0]
 800a4ca:	07d2      	lsls	r2, r2, #31
 800a4cc:	d501      	bpl.n	800a4d2 <_printf_float+0x1ba>
 800a4ce:	3302      	adds	r3, #2
 800a4d0:	e7f4      	b.n	800a4bc <_printf_float+0x1a4>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e7f2      	b.n	800a4bc <_printf_float+0x1a4>
 800a4d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a4da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4dc:	4299      	cmp	r1, r3
 800a4de:	db05      	blt.n	800a4ec <_printf_float+0x1d4>
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	6121      	str	r1, [r4, #16]
 800a4e4:	07d8      	lsls	r0, r3, #31
 800a4e6:	d5ea      	bpl.n	800a4be <_printf_float+0x1a6>
 800a4e8:	1c4b      	adds	r3, r1, #1
 800a4ea:	e7e7      	b.n	800a4bc <_printf_float+0x1a4>
 800a4ec:	2900      	cmp	r1, #0
 800a4ee:	bfd4      	ite	le
 800a4f0:	f1c1 0202 	rsble	r2, r1, #2
 800a4f4:	2201      	movgt	r2, #1
 800a4f6:	4413      	add	r3, r2
 800a4f8:	e7e0      	b.n	800a4bc <_printf_float+0x1a4>
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	055a      	lsls	r2, r3, #21
 800a4fe:	d407      	bmi.n	800a510 <_printf_float+0x1f8>
 800a500:	6923      	ldr	r3, [r4, #16]
 800a502:	4642      	mov	r2, r8
 800a504:	4631      	mov	r1, r6
 800a506:	4628      	mov	r0, r5
 800a508:	47b8      	blx	r7
 800a50a:	3001      	adds	r0, #1
 800a50c:	d12c      	bne.n	800a568 <_printf_float+0x250>
 800a50e:	e764      	b.n	800a3da <_printf_float+0xc2>
 800a510:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a514:	f240 80e0 	bls.w	800a6d8 <_printf_float+0x3c0>
 800a518:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a51c:	2200      	movs	r2, #0
 800a51e:	2300      	movs	r3, #0
 800a520:	f7f6 fafa 	bl	8000b18 <__aeabi_dcmpeq>
 800a524:	2800      	cmp	r0, #0
 800a526:	d034      	beq.n	800a592 <_printf_float+0x27a>
 800a528:	4a37      	ldr	r2, [pc, #220]	; (800a608 <_printf_float+0x2f0>)
 800a52a:	2301      	movs	r3, #1
 800a52c:	4631      	mov	r1, r6
 800a52e:	4628      	mov	r0, r5
 800a530:	47b8      	blx	r7
 800a532:	3001      	adds	r0, #1
 800a534:	f43f af51 	beq.w	800a3da <_printf_float+0xc2>
 800a538:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a53c:	429a      	cmp	r2, r3
 800a53e:	db02      	blt.n	800a546 <_printf_float+0x22e>
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	07d8      	lsls	r0, r3, #31
 800a544:	d510      	bpl.n	800a568 <_printf_float+0x250>
 800a546:	ee18 3a10 	vmov	r3, s16
 800a54a:	4652      	mov	r2, sl
 800a54c:	4631      	mov	r1, r6
 800a54e:	4628      	mov	r0, r5
 800a550:	47b8      	blx	r7
 800a552:	3001      	adds	r0, #1
 800a554:	f43f af41 	beq.w	800a3da <_printf_float+0xc2>
 800a558:	f04f 0800 	mov.w	r8, #0
 800a55c:	f104 091a 	add.w	r9, r4, #26
 800a560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a562:	3b01      	subs	r3, #1
 800a564:	4543      	cmp	r3, r8
 800a566:	dc09      	bgt.n	800a57c <_printf_float+0x264>
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	079b      	lsls	r3, r3, #30
 800a56c:	f100 8105 	bmi.w	800a77a <_printf_float+0x462>
 800a570:	68e0      	ldr	r0, [r4, #12]
 800a572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a574:	4298      	cmp	r0, r3
 800a576:	bfb8      	it	lt
 800a578:	4618      	movlt	r0, r3
 800a57a:	e730      	b.n	800a3de <_printf_float+0xc6>
 800a57c:	2301      	movs	r3, #1
 800a57e:	464a      	mov	r2, r9
 800a580:	4631      	mov	r1, r6
 800a582:	4628      	mov	r0, r5
 800a584:	47b8      	blx	r7
 800a586:	3001      	adds	r0, #1
 800a588:	f43f af27 	beq.w	800a3da <_printf_float+0xc2>
 800a58c:	f108 0801 	add.w	r8, r8, #1
 800a590:	e7e6      	b.n	800a560 <_printf_float+0x248>
 800a592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a594:	2b00      	cmp	r3, #0
 800a596:	dc39      	bgt.n	800a60c <_printf_float+0x2f4>
 800a598:	4a1b      	ldr	r2, [pc, #108]	; (800a608 <_printf_float+0x2f0>)
 800a59a:	2301      	movs	r3, #1
 800a59c:	4631      	mov	r1, r6
 800a59e:	4628      	mov	r0, r5
 800a5a0:	47b8      	blx	r7
 800a5a2:	3001      	adds	r0, #1
 800a5a4:	f43f af19 	beq.w	800a3da <_printf_float+0xc2>
 800a5a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	d102      	bne.n	800a5b6 <_printf_float+0x29e>
 800a5b0:	6823      	ldr	r3, [r4, #0]
 800a5b2:	07d9      	lsls	r1, r3, #31
 800a5b4:	d5d8      	bpl.n	800a568 <_printf_float+0x250>
 800a5b6:	ee18 3a10 	vmov	r3, s16
 800a5ba:	4652      	mov	r2, sl
 800a5bc:	4631      	mov	r1, r6
 800a5be:	4628      	mov	r0, r5
 800a5c0:	47b8      	blx	r7
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	f43f af09 	beq.w	800a3da <_printf_float+0xc2>
 800a5c8:	f04f 0900 	mov.w	r9, #0
 800a5cc:	f104 0a1a 	add.w	sl, r4, #26
 800a5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d2:	425b      	negs	r3, r3
 800a5d4:	454b      	cmp	r3, r9
 800a5d6:	dc01      	bgt.n	800a5dc <_printf_float+0x2c4>
 800a5d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5da:	e792      	b.n	800a502 <_printf_float+0x1ea>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	4652      	mov	r2, sl
 800a5e0:	4631      	mov	r1, r6
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	47b8      	blx	r7
 800a5e6:	3001      	adds	r0, #1
 800a5e8:	f43f aef7 	beq.w	800a3da <_printf_float+0xc2>
 800a5ec:	f109 0901 	add.w	r9, r9, #1
 800a5f0:	e7ee      	b.n	800a5d0 <_printf_float+0x2b8>
 800a5f2:	bf00      	nop
 800a5f4:	7fefffff 	.word	0x7fefffff
 800a5f8:	0800dc94 	.word	0x0800dc94
 800a5fc:	0800dc98 	.word	0x0800dc98
 800a600:	0800dca0 	.word	0x0800dca0
 800a604:	0800dc9c 	.word	0x0800dc9c
 800a608:	0800dca4 	.word	0x0800dca4
 800a60c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a60e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a610:	429a      	cmp	r2, r3
 800a612:	bfa8      	it	ge
 800a614:	461a      	movge	r2, r3
 800a616:	2a00      	cmp	r2, #0
 800a618:	4691      	mov	r9, r2
 800a61a:	dc37      	bgt.n	800a68c <_printf_float+0x374>
 800a61c:	f04f 0b00 	mov.w	fp, #0
 800a620:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a624:	f104 021a 	add.w	r2, r4, #26
 800a628:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a62a:	9305      	str	r3, [sp, #20]
 800a62c:	eba3 0309 	sub.w	r3, r3, r9
 800a630:	455b      	cmp	r3, fp
 800a632:	dc33      	bgt.n	800a69c <_printf_float+0x384>
 800a634:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a638:	429a      	cmp	r2, r3
 800a63a:	db3b      	blt.n	800a6b4 <_printf_float+0x39c>
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	07da      	lsls	r2, r3, #31
 800a640:	d438      	bmi.n	800a6b4 <_printf_float+0x39c>
 800a642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a644:	9a05      	ldr	r2, [sp, #20]
 800a646:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a648:	1a9a      	subs	r2, r3, r2
 800a64a:	eba3 0901 	sub.w	r9, r3, r1
 800a64e:	4591      	cmp	r9, r2
 800a650:	bfa8      	it	ge
 800a652:	4691      	movge	r9, r2
 800a654:	f1b9 0f00 	cmp.w	r9, #0
 800a658:	dc35      	bgt.n	800a6c6 <_printf_float+0x3ae>
 800a65a:	f04f 0800 	mov.w	r8, #0
 800a65e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a662:	f104 0a1a 	add.w	sl, r4, #26
 800a666:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a66a:	1a9b      	subs	r3, r3, r2
 800a66c:	eba3 0309 	sub.w	r3, r3, r9
 800a670:	4543      	cmp	r3, r8
 800a672:	f77f af79 	ble.w	800a568 <_printf_float+0x250>
 800a676:	2301      	movs	r3, #1
 800a678:	4652      	mov	r2, sl
 800a67a:	4631      	mov	r1, r6
 800a67c:	4628      	mov	r0, r5
 800a67e:	47b8      	blx	r7
 800a680:	3001      	adds	r0, #1
 800a682:	f43f aeaa 	beq.w	800a3da <_printf_float+0xc2>
 800a686:	f108 0801 	add.w	r8, r8, #1
 800a68a:	e7ec      	b.n	800a666 <_printf_float+0x34e>
 800a68c:	4613      	mov	r3, r2
 800a68e:	4631      	mov	r1, r6
 800a690:	4642      	mov	r2, r8
 800a692:	4628      	mov	r0, r5
 800a694:	47b8      	blx	r7
 800a696:	3001      	adds	r0, #1
 800a698:	d1c0      	bne.n	800a61c <_printf_float+0x304>
 800a69a:	e69e      	b.n	800a3da <_printf_float+0xc2>
 800a69c:	2301      	movs	r3, #1
 800a69e:	4631      	mov	r1, r6
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	9205      	str	r2, [sp, #20]
 800a6a4:	47b8      	blx	r7
 800a6a6:	3001      	adds	r0, #1
 800a6a8:	f43f ae97 	beq.w	800a3da <_printf_float+0xc2>
 800a6ac:	9a05      	ldr	r2, [sp, #20]
 800a6ae:	f10b 0b01 	add.w	fp, fp, #1
 800a6b2:	e7b9      	b.n	800a628 <_printf_float+0x310>
 800a6b4:	ee18 3a10 	vmov	r3, s16
 800a6b8:	4652      	mov	r2, sl
 800a6ba:	4631      	mov	r1, r6
 800a6bc:	4628      	mov	r0, r5
 800a6be:	47b8      	blx	r7
 800a6c0:	3001      	adds	r0, #1
 800a6c2:	d1be      	bne.n	800a642 <_printf_float+0x32a>
 800a6c4:	e689      	b.n	800a3da <_printf_float+0xc2>
 800a6c6:	9a05      	ldr	r2, [sp, #20]
 800a6c8:	464b      	mov	r3, r9
 800a6ca:	4442      	add	r2, r8
 800a6cc:	4631      	mov	r1, r6
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	47b8      	blx	r7
 800a6d2:	3001      	adds	r0, #1
 800a6d4:	d1c1      	bne.n	800a65a <_printf_float+0x342>
 800a6d6:	e680      	b.n	800a3da <_printf_float+0xc2>
 800a6d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6da:	2a01      	cmp	r2, #1
 800a6dc:	dc01      	bgt.n	800a6e2 <_printf_float+0x3ca>
 800a6de:	07db      	lsls	r3, r3, #31
 800a6e0:	d538      	bpl.n	800a754 <_printf_float+0x43c>
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	4642      	mov	r2, r8
 800a6e6:	4631      	mov	r1, r6
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	47b8      	blx	r7
 800a6ec:	3001      	adds	r0, #1
 800a6ee:	f43f ae74 	beq.w	800a3da <_printf_float+0xc2>
 800a6f2:	ee18 3a10 	vmov	r3, s16
 800a6f6:	4652      	mov	r2, sl
 800a6f8:	4631      	mov	r1, r6
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	47b8      	blx	r7
 800a6fe:	3001      	adds	r0, #1
 800a700:	f43f ae6b 	beq.w	800a3da <_printf_float+0xc2>
 800a704:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a708:	2200      	movs	r2, #0
 800a70a:	2300      	movs	r3, #0
 800a70c:	f7f6 fa04 	bl	8000b18 <__aeabi_dcmpeq>
 800a710:	b9d8      	cbnz	r0, 800a74a <_printf_float+0x432>
 800a712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a714:	f108 0201 	add.w	r2, r8, #1
 800a718:	3b01      	subs	r3, #1
 800a71a:	4631      	mov	r1, r6
 800a71c:	4628      	mov	r0, r5
 800a71e:	47b8      	blx	r7
 800a720:	3001      	adds	r0, #1
 800a722:	d10e      	bne.n	800a742 <_printf_float+0x42a>
 800a724:	e659      	b.n	800a3da <_printf_float+0xc2>
 800a726:	2301      	movs	r3, #1
 800a728:	4652      	mov	r2, sl
 800a72a:	4631      	mov	r1, r6
 800a72c:	4628      	mov	r0, r5
 800a72e:	47b8      	blx	r7
 800a730:	3001      	adds	r0, #1
 800a732:	f43f ae52 	beq.w	800a3da <_printf_float+0xc2>
 800a736:	f108 0801 	add.w	r8, r8, #1
 800a73a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a73c:	3b01      	subs	r3, #1
 800a73e:	4543      	cmp	r3, r8
 800a740:	dcf1      	bgt.n	800a726 <_printf_float+0x40e>
 800a742:	464b      	mov	r3, r9
 800a744:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a748:	e6dc      	b.n	800a504 <_printf_float+0x1ec>
 800a74a:	f04f 0800 	mov.w	r8, #0
 800a74e:	f104 0a1a 	add.w	sl, r4, #26
 800a752:	e7f2      	b.n	800a73a <_printf_float+0x422>
 800a754:	2301      	movs	r3, #1
 800a756:	4642      	mov	r2, r8
 800a758:	e7df      	b.n	800a71a <_printf_float+0x402>
 800a75a:	2301      	movs	r3, #1
 800a75c:	464a      	mov	r2, r9
 800a75e:	4631      	mov	r1, r6
 800a760:	4628      	mov	r0, r5
 800a762:	47b8      	blx	r7
 800a764:	3001      	adds	r0, #1
 800a766:	f43f ae38 	beq.w	800a3da <_printf_float+0xc2>
 800a76a:	f108 0801 	add.w	r8, r8, #1
 800a76e:	68e3      	ldr	r3, [r4, #12]
 800a770:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a772:	1a5b      	subs	r3, r3, r1
 800a774:	4543      	cmp	r3, r8
 800a776:	dcf0      	bgt.n	800a75a <_printf_float+0x442>
 800a778:	e6fa      	b.n	800a570 <_printf_float+0x258>
 800a77a:	f04f 0800 	mov.w	r8, #0
 800a77e:	f104 0919 	add.w	r9, r4, #25
 800a782:	e7f4      	b.n	800a76e <_printf_float+0x456>

0800a784 <_printf_common>:
 800a784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a788:	4616      	mov	r6, r2
 800a78a:	4699      	mov	r9, r3
 800a78c:	688a      	ldr	r2, [r1, #8]
 800a78e:	690b      	ldr	r3, [r1, #16]
 800a790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a794:	4293      	cmp	r3, r2
 800a796:	bfb8      	it	lt
 800a798:	4613      	movlt	r3, r2
 800a79a:	6033      	str	r3, [r6, #0]
 800a79c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7a0:	4607      	mov	r7, r0
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	b10a      	cbz	r2, 800a7aa <_printf_common+0x26>
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	6033      	str	r3, [r6, #0]
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	0699      	lsls	r1, r3, #26
 800a7ae:	bf42      	ittt	mi
 800a7b0:	6833      	ldrmi	r3, [r6, #0]
 800a7b2:	3302      	addmi	r3, #2
 800a7b4:	6033      	strmi	r3, [r6, #0]
 800a7b6:	6825      	ldr	r5, [r4, #0]
 800a7b8:	f015 0506 	ands.w	r5, r5, #6
 800a7bc:	d106      	bne.n	800a7cc <_printf_common+0x48>
 800a7be:	f104 0a19 	add.w	sl, r4, #25
 800a7c2:	68e3      	ldr	r3, [r4, #12]
 800a7c4:	6832      	ldr	r2, [r6, #0]
 800a7c6:	1a9b      	subs	r3, r3, r2
 800a7c8:	42ab      	cmp	r3, r5
 800a7ca:	dc26      	bgt.n	800a81a <_printf_common+0x96>
 800a7cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7d0:	1e13      	subs	r3, r2, #0
 800a7d2:	6822      	ldr	r2, [r4, #0]
 800a7d4:	bf18      	it	ne
 800a7d6:	2301      	movne	r3, #1
 800a7d8:	0692      	lsls	r2, r2, #26
 800a7da:	d42b      	bmi.n	800a834 <_printf_common+0xb0>
 800a7dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7e0:	4649      	mov	r1, r9
 800a7e2:	4638      	mov	r0, r7
 800a7e4:	47c0      	blx	r8
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	d01e      	beq.n	800a828 <_printf_common+0xa4>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	68e5      	ldr	r5, [r4, #12]
 800a7ee:	6832      	ldr	r2, [r6, #0]
 800a7f0:	f003 0306 	and.w	r3, r3, #6
 800a7f4:	2b04      	cmp	r3, #4
 800a7f6:	bf08      	it	eq
 800a7f8:	1aad      	subeq	r5, r5, r2
 800a7fa:	68a3      	ldr	r3, [r4, #8]
 800a7fc:	6922      	ldr	r2, [r4, #16]
 800a7fe:	bf0c      	ite	eq
 800a800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a804:	2500      	movne	r5, #0
 800a806:	4293      	cmp	r3, r2
 800a808:	bfc4      	itt	gt
 800a80a:	1a9b      	subgt	r3, r3, r2
 800a80c:	18ed      	addgt	r5, r5, r3
 800a80e:	2600      	movs	r6, #0
 800a810:	341a      	adds	r4, #26
 800a812:	42b5      	cmp	r5, r6
 800a814:	d11a      	bne.n	800a84c <_printf_common+0xc8>
 800a816:	2000      	movs	r0, #0
 800a818:	e008      	b.n	800a82c <_printf_common+0xa8>
 800a81a:	2301      	movs	r3, #1
 800a81c:	4652      	mov	r2, sl
 800a81e:	4649      	mov	r1, r9
 800a820:	4638      	mov	r0, r7
 800a822:	47c0      	blx	r8
 800a824:	3001      	adds	r0, #1
 800a826:	d103      	bne.n	800a830 <_printf_common+0xac>
 800a828:	f04f 30ff 	mov.w	r0, #4294967295
 800a82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a830:	3501      	adds	r5, #1
 800a832:	e7c6      	b.n	800a7c2 <_printf_common+0x3e>
 800a834:	18e1      	adds	r1, r4, r3
 800a836:	1c5a      	adds	r2, r3, #1
 800a838:	2030      	movs	r0, #48	; 0x30
 800a83a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a83e:	4422      	add	r2, r4
 800a840:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a844:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a848:	3302      	adds	r3, #2
 800a84a:	e7c7      	b.n	800a7dc <_printf_common+0x58>
 800a84c:	2301      	movs	r3, #1
 800a84e:	4622      	mov	r2, r4
 800a850:	4649      	mov	r1, r9
 800a852:	4638      	mov	r0, r7
 800a854:	47c0      	blx	r8
 800a856:	3001      	adds	r0, #1
 800a858:	d0e6      	beq.n	800a828 <_printf_common+0xa4>
 800a85a:	3601      	adds	r6, #1
 800a85c:	e7d9      	b.n	800a812 <_printf_common+0x8e>
	...

0800a860 <_printf_i>:
 800a860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a864:	7e0f      	ldrb	r7, [r1, #24]
 800a866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a868:	2f78      	cmp	r7, #120	; 0x78
 800a86a:	4691      	mov	r9, r2
 800a86c:	4680      	mov	r8, r0
 800a86e:	460c      	mov	r4, r1
 800a870:	469a      	mov	sl, r3
 800a872:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a876:	d807      	bhi.n	800a888 <_printf_i+0x28>
 800a878:	2f62      	cmp	r7, #98	; 0x62
 800a87a:	d80a      	bhi.n	800a892 <_printf_i+0x32>
 800a87c:	2f00      	cmp	r7, #0
 800a87e:	f000 80d8 	beq.w	800aa32 <_printf_i+0x1d2>
 800a882:	2f58      	cmp	r7, #88	; 0x58
 800a884:	f000 80a3 	beq.w	800a9ce <_printf_i+0x16e>
 800a888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a88c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a890:	e03a      	b.n	800a908 <_printf_i+0xa8>
 800a892:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a896:	2b15      	cmp	r3, #21
 800a898:	d8f6      	bhi.n	800a888 <_printf_i+0x28>
 800a89a:	a101      	add	r1, pc, #4	; (adr r1, 800a8a0 <_printf_i+0x40>)
 800a89c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8a0:	0800a8f9 	.word	0x0800a8f9
 800a8a4:	0800a90d 	.word	0x0800a90d
 800a8a8:	0800a889 	.word	0x0800a889
 800a8ac:	0800a889 	.word	0x0800a889
 800a8b0:	0800a889 	.word	0x0800a889
 800a8b4:	0800a889 	.word	0x0800a889
 800a8b8:	0800a90d 	.word	0x0800a90d
 800a8bc:	0800a889 	.word	0x0800a889
 800a8c0:	0800a889 	.word	0x0800a889
 800a8c4:	0800a889 	.word	0x0800a889
 800a8c8:	0800a889 	.word	0x0800a889
 800a8cc:	0800aa19 	.word	0x0800aa19
 800a8d0:	0800a93d 	.word	0x0800a93d
 800a8d4:	0800a9fb 	.word	0x0800a9fb
 800a8d8:	0800a889 	.word	0x0800a889
 800a8dc:	0800a889 	.word	0x0800a889
 800a8e0:	0800aa3b 	.word	0x0800aa3b
 800a8e4:	0800a889 	.word	0x0800a889
 800a8e8:	0800a93d 	.word	0x0800a93d
 800a8ec:	0800a889 	.word	0x0800a889
 800a8f0:	0800a889 	.word	0x0800a889
 800a8f4:	0800aa03 	.word	0x0800aa03
 800a8f8:	682b      	ldr	r3, [r5, #0]
 800a8fa:	1d1a      	adds	r2, r3, #4
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	602a      	str	r2, [r5, #0]
 800a900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a908:	2301      	movs	r3, #1
 800a90a:	e0a3      	b.n	800aa54 <_printf_i+0x1f4>
 800a90c:	6820      	ldr	r0, [r4, #0]
 800a90e:	6829      	ldr	r1, [r5, #0]
 800a910:	0606      	lsls	r6, r0, #24
 800a912:	f101 0304 	add.w	r3, r1, #4
 800a916:	d50a      	bpl.n	800a92e <_printf_i+0xce>
 800a918:	680e      	ldr	r6, [r1, #0]
 800a91a:	602b      	str	r3, [r5, #0]
 800a91c:	2e00      	cmp	r6, #0
 800a91e:	da03      	bge.n	800a928 <_printf_i+0xc8>
 800a920:	232d      	movs	r3, #45	; 0x2d
 800a922:	4276      	negs	r6, r6
 800a924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a928:	485e      	ldr	r0, [pc, #376]	; (800aaa4 <_printf_i+0x244>)
 800a92a:	230a      	movs	r3, #10
 800a92c:	e019      	b.n	800a962 <_printf_i+0x102>
 800a92e:	680e      	ldr	r6, [r1, #0]
 800a930:	602b      	str	r3, [r5, #0]
 800a932:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a936:	bf18      	it	ne
 800a938:	b236      	sxthne	r6, r6
 800a93a:	e7ef      	b.n	800a91c <_printf_i+0xbc>
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	6820      	ldr	r0, [r4, #0]
 800a940:	1d19      	adds	r1, r3, #4
 800a942:	6029      	str	r1, [r5, #0]
 800a944:	0601      	lsls	r1, r0, #24
 800a946:	d501      	bpl.n	800a94c <_printf_i+0xec>
 800a948:	681e      	ldr	r6, [r3, #0]
 800a94a:	e002      	b.n	800a952 <_printf_i+0xf2>
 800a94c:	0646      	lsls	r6, r0, #25
 800a94e:	d5fb      	bpl.n	800a948 <_printf_i+0xe8>
 800a950:	881e      	ldrh	r6, [r3, #0]
 800a952:	4854      	ldr	r0, [pc, #336]	; (800aaa4 <_printf_i+0x244>)
 800a954:	2f6f      	cmp	r7, #111	; 0x6f
 800a956:	bf0c      	ite	eq
 800a958:	2308      	moveq	r3, #8
 800a95a:	230a      	movne	r3, #10
 800a95c:	2100      	movs	r1, #0
 800a95e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a962:	6865      	ldr	r5, [r4, #4]
 800a964:	60a5      	str	r5, [r4, #8]
 800a966:	2d00      	cmp	r5, #0
 800a968:	bfa2      	ittt	ge
 800a96a:	6821      	ldrge	r1, [r4, #0]
 800a96c:	f021 0104 	bicge.w	r1, r1, #4
 800a970:	6021      	strge	r1, [r4, #0]
 800a972:	b90e      	cbnz	r6, 800a978 <_printf_i+0x118>
 800a974:	2d00      	cmp	r5, #0
 800a976:	d04d      	beq.n	800aa14 <_printf_i+0x1b4>
 800a978:	4615      	mov	r5, r2
 800a97a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a97e:	fb03 6711 	mls	r7, r3, r1, r6
 800a982:	5dc7      	ldrb	r7, [r0, r7]
 800a984:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a988:	4637      	mov	r7, r6
 800a98a:	42bb      	cmp	r3, r7
 800a98c:	460e      	mov	r6, r1
 800a98e:	d9f4      	bls.n	800a97a <_printf_i+0x11a>
 800a990:	2b08      	cmp	r3, #8
 800a992:	d10b      	bne.n	800a9ac <_printf_i+0x14c>
 800a994:	6823      	ldr	r3, [r4, #0]
 800a996:	07de      	lsls	r6, r3, #31
 800a998:	d508      	bpl.n	800a9ac <_printf_i+0x14c>
 800a99a:	6923      	ldr	r3, [r4, #16]
 800a99c:	6861      	ldr	r1, [r4, #4]
 800a99e:	4299      	cmp	r1, r3
 800a9a0:	bfde      	ittt	le
 800a9a2:	2330      	movle	r3, #48	; 0x30
 800a9a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9ac:	1b52      	subs	r2, r2, r5
 800a9ae:	6122      	str	r2, [r4, #16]
 800a9b0:	f8cd a000 	str.w	sl, [sp]
 800a9b4:	464b      	mov	r3, r9
 800a9b6:	aa03      	add	r2, sp, #12
 800a9b8:	4621      	mov	r1, r4
 800a9ba:	4640      	mov	r0, r8
 800a9bc:	f7ff fee2 	bl	800a784 <_printf_common>
 800a9c0:	3001      	adds	r0, #1
 800a9c2:	d14c      	bne.n	800aa5e <_printf_i+0x1fe>
 800a9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c8:	b004      	add	sp, #16
 800a9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ce:	4835      	ldr	r0, [pc, #212]	; (800aaa4 <_printf_i+0x244>)
 800a9d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a9d4:	6829      	ldr	r1, [r5, #0]
 800a9d6:	6823      	ldr	r3, [r4, #0]
 800a9d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9dc:	6029      	str	r1, [r5, #0]
 800a9de:	061d      	lsls	r5, r3, #24
 800a9e0:	d514      	bpl.n	800aa0c <_printf_i+0x1ac>
 800a9e2:	07df      	lsls	r7, r3, #31
 800a9e4:	bf44      	itt	mi
 800a9e6:	f043 0320 	orrmi.w	r3, r3, #32
 800a9ea:	6023      	strmi	r3, [r4, #0]
 800a9ec:	b91e      	cbnz	r6, 800a9f6 <_printf_i+0x196>
 800a9ee:	6823      	ldr	r3, [r4, #0]
 800a9f0:	f023 0320 	bic.w	r3, r3, #32
 800a9f4:	6023      	str	r3, [r4, #0]
 800a9f6:	2310      	movs	r3, #16
 800a9f8:	e7b0      	b.n	800a95c <_printf_i+0xfc>
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	f043 0320 	orr.w	r3, r3, #32
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	2378      	movs	r3, #120	; 0x78
 800aa04:	4828      	ldr	r0, [pc, #160]	; (800aaa8 <_printf_i+0x248>)
 800aa06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa0a:	e7e3      	b.n	800a9d4 <_printf_i+0x174>
 800aa0c:	0659      	lsls	r1, r3, #25
 800aa0e:	bf48      	it	mi
 800aa10:	b2b6      	uxthmi	r6, r6
 800aa12:	e7e6      	b.n	800a9e2 <_printf_i+0x182>
 800aa14:	4615      	mov	r5, r2
 800aa16:	e7bb      	b.n	800a990 <_printf_i+0x130>
 800aa18:	682b      	ldr	r3, [r5, #0]
 800aa1a:	6826      	ldr	r6, [r4, #0]
 800aa1c:	6961      	ldr	r1, [r4, #20]
 800aa1e:	1d18      	adds	r0, r3, #4
 800aa20:	6028      	str	r0, [r5, #0]
 800aa22:	0635      	lsls	r5, r6, #24
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	d501      	bpl.n	800aa2c <_printf_i+0x1cc>
 800aa28:	6019      	str	r1, [r3, #0]
 800aa2a:	e002      	b.n	800aa32 <_printf_i+0x1d2>
 800aa2c:	0670      	lsls	r0, r6, #25
 800aa2e:	d5fb      	bpl.n	800aa28 <_printf_i+0x1c8>
 800aa30:	8019      	strh	r1, [r3, #0]
 800aa32:	2300      	movs	r3, #0
 800aa34:	6123      	str	r3, [r4, #16]
 800aa36:	4615      	mov	r5, r2
 800aa38:	e7ba      	b.n	800a9b0 <_printf_i+0x150>
 800aa3a:	682b      	ldr	r3, [r5, #0]
 800aa3c:	1d1a      	adds	r2, r3, #4
 800aa3e:	602a      	str	r2, [r5, #0]
 800aa40:	681d      	ldr	r5, [r3, #0]
 800aa42:	6862      	ldr	r2, [r4, #4]
 800aa44:	2100      	movs	r1, #0
 800aa46:	4628      	mov	r0, r5
 800aa48:	f7f5 fbf2 	bl	8000230 <memchr>
 800aa4c:	b108      	cbz	r0, 800aa52 <_printf_i+0x1f2>
 800aa4e:	1b40      	subs	r0, r0, r5
 800aa50:	6060      	str	r0, [r4, #4]
 800aa52:	6863      	ldr	r3, [r4, #4]
 800aa54:	6123      	str	r3, [r4, #16]
 800aa56:	2300      	movs	r3, #0
 800aa58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa5c:	e7a8      	b.n	800a9b0 <_printf_i+0x150>
 800aa5e:	6923      	ldr	r3, [r4, #16]
 800aa60:	462a      	mov	r2, r5
 800aa62:	4649      	mov	r1, r9
 800aa64:	4640      	mov	r0, r8
 800aa66:	47d0      	blx	sl
 800aa68:	3001      	adds	r0, #1
 800aa6a:	d0ab      	beq.n	800a9c4 <_printf_i+0x164>
 800aa6c:	6823      	ldr	r3, [r4, #0]
 800aa6e:	079b      	lsls	r3, r3, #30
 800aa70:	d413      	bmi.n	800aa9a <_printf_i+0x23a>
 800aa72:	68e0      	ldr	r0, [r4, #12]
 800aa74:	9b03      	ldr	r3, [sp, #12]
 800aa76:	4298      	cmp	r0, r3
 800aa78:	bfb8      	it	lt
 800aa7a:	4618      	movlt	r0, r3
 800aa7c:	e7a4      	b.n	800a9c8 <_printf_i+0x168>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	4632      	mov	r2, r6
 800aa82:	4649      	mov	r1, r9
 800aa84:	4640      	mov	r0, r8
 800aa86:	47d0      	blx	sl
 800aa88:	3001      	adds	r0, #1
 800aa8a:	d09b      	beq.n	800a9c4 <_printf_i+0x164>
 800aa8c:	3501      	adds	r5, #1
 800aa8e:	68e3      	ldr	r3, [r4, #12]
 800aa90:	9903      	ldr	r1, [sp, #12]
 800aa92:	1a5b      	subs	r3, r3, r1
 800aa94:	42ab      	cmp	r3, r5
 800aa96:	dcf2      	bgt.n	800aa7e <_printf_i+0x21e>
 800aa98:	e7eb      	b.n	800aa72 <_printf_i+0x212>
 800aa9a:	2500      	movs	r5, #0
 800aa9c:	f104 0619 	add.w	r6, r4, #25
 800aaa0:	e7f5      	b.n	800aa8e <_printf_i+0x22e>
 800aaa2:	bf00      	nop
 800aaa4:	0800dca6 	.word	0x0800dca6
 800aaa8:	0800dcb7 	.word	0x0800dcb7

0800aaac <iprintf>:
 800aaac:	b40f      	push	{r0, r1, r2, r3}
 800aaae:	4b0a      	ldr	r3, [pc, #40]	; (800aad8 <iprintf+0x2c>)
 800aab0:	b513      	push	{r0, r1, r4, lr}
 800aab2:	681c      	ldr	r4, [r3, #0]
 800aab4:	b124      	cbz	r4, 800aac0 <iprintf+0x14>
 800aab6:	69a3      	ldr	r3, [r4, #24]
 800aab8:	b913      	cbnz	r3, 800aac0 <iprintf+0x14>
 800aaba:	4620      	mov	r0, r4
 800aabc:	f001 f8f8 	bl	800bcb0 <__sinit>
 800aac0:	ab05      	add	r3, sp, #20
 800aac2:	9a04      	ldr	r2, [sp, #16]
 800aac4:	68a1      	ldr	r1, [r4, #8]
 800aac6:	9301      	str	r3, [sp, #4]
 800aac8:	4620      	mov	r0, r4
 800aaca:	f002 f811 	bl	800caf0 <_vfiprintf_r>
 800aace:	b002      	add	sp, #8
 800aad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aad4:	b004      	add	sp, #16
 800aad6:	4770      	bx	lr
 800aad8:	20000010 	.word	0x20000010

0800aadc <_puts_r>:
 800aadc:	b570      	push	{r4, r5, r6, lr}
 800aade:	460e      	mov	r6, r1
 800aae0:	4605      	mov	r5, r0
 800aae2:	b118      	cbz	r0, 800aaec <_puts_r+0x10>
 800aae4:	6983      	ldr	r3, [r0, #24]
 800aae6:	b90b      	cbnz	r3, 800aaec <_puts_r+0x10>
 800aae8:	f001 f8e2 	bl	800bcb0 <__sinit>
 800aaec:	69ab      	ldr	r3, [r5, #24]
 800aaee:	68ac      	ldr	r4, [r5, #8]
 800aaf0:	b913      	cbnz	r3, 800aaf8 <_puts_r+0x1c>
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	f001 f8dc 	bl	800bcb0 <__sinit>
 800aaf8:	4b2c      	ldr	r3, [pc, #176]	; (800abac <_puts_r+0xd0>)
 800aafa:	429c      	cmp	r4, r3
 800aafc:	d120      	bne.n	800ab40 <_puts_r+0x64>
 800aafe:	686c      	ldr	r4, [r5, #4]
 800ab00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab02:	07db      	lsls	r3, r3, #31
 800ab04:	d405      	bmi.n	800ab12 <_puts_r+0x36>
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	0598      	lsls	r0, r3, #22
 800ab0a:	d402      	bmi.n	800ab12 <_puts_r+0x36>
 800ab0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab0e:	f001 f972 	bl	800bdf6 <__retarget_lock_acquire_recursive>
 800ab12:	89a3      	ldrh	r3, [r4, #12]
 800ab14:	0719      	lsls	r1, r3, #28
 800ab16:	d51d      	bpl.n	800ab54 <_puts_r+0x78>
 800ab18:	6923      	ldr	r3, [r4, #16]
 800ab1a:	b1db      	cbz	r3, 800ab54 <_puts_r+0x78>
 800ab1c:	3e01      	subs	r6, #1
 800ab1e:	68a3      	ldr	r3, [r4, #8]
 800ab20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ab24:	3b01      	subs	r3, #1
 800ab26:	60a3      	str	r3, [r4, #8]
 800ab28:	bb39      	cbnz	r1, 800ab7a <_puts_r+0x9e>
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	da38      	bge.n	800aba0 <_puts_r+0xc4>
 800ab2e:	4622      	mov	r2, r4
 800ab30:	210a      	movs	r1, #10
 800ab32:	4628      	mov	r0, r5
 800ab34:	f000 f868 	bl	800ac08 <__swbuf_r>
 800ab38:	3001      	adds	r0, #1
 800ab3a:	d011      	beq.n	800ab60 <_puts_r+0x84>
 800ab3c:	250a      	movs	r5, #10
 800ab3e:	e011      	b.n	800ab64 <_puts_r+0x88>
 800ab40:	4b1b      	ldr	r3, [pc, #108]	; (800abb0 <_puts_r+0xd4>)
 800ab42:	429c      	cmp	r4, r3
 800ab44:	d101      	bne.n	800ab4a <_puts_r+0x6e>
 800ab46:	68ac      	ldr	r4, [r5, #8]
 800ab48:	e7da      	b.n	800ab00 <_puts_r+0x24>
 800ab4a:	4b1a      	ldr	r3, [pc, #104]	; (800abb4 <_puts_r+0xd8>)
 800ab4c:	429c      	cmp	r4, r3
 800ab4e:	bf08      	it	eq
 800ab50:	68ec      	ldreq	r4, [r5, #12]
 800ab52:	e7d5      	b.n	800ab00 <_puts_r+0x24>
 800ab54:	4621      	mov	r1, r4
 800ab56:	4628      	mov	r0, r5
 800ab58:	f000 f8a8 	bl	800acac <__swsetup_r>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d0dd      	beq.n	800ab1c <_puts_r+0x40>
 800ab60:	f04f 35ff 	mov.w	r5, #4294967295
 800ab64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab66:	07da      	lsls	r2, r3, #31
 800ab68:	d405      	bmi.n	800ab76 <_puts_r+0x9a>
 800ab6a:	89a3      	ldrh	r3, [r4, #12]
 800ab6c:	059b      	lsls	r3, r3, #22
 800ab6e:	d402      	bmi.n	800ab76 <_puts_r+0x9a>
 800ab70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab72:	f001 f941 	bl	800bdf8 <__retarget_lock_release_recursive>
 800ab76:	4628      	mov	r0, r5
 800ab78:	bd70      	pop	{r4, r5, r6, pc}
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	da04      	bge.n	800ab88 <_puts_r+0xac>
 800ab7e:	69a2      	ldr	r2, [r4, #24]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	dc06      	bgt.n	800ab92 <_puts_r+0xb6>
 800ab84:	290a      	cmp	r1, #10
 800ab86:	d004      	beq.n	800ab92 <_puts_r+0xb6>
 800ab88:	6823      	ldr	r3, [r4, #0]
 800ab8a:	1c5a      	adds	r2, r3, #1
 800ab8c:	6022      	str	r2, [r4, #0]
 800ab8e:	7019      	strb	r1, [r3, #0]
 800ab90:	e7c5      	b.n	800ab1e <_puts_r+0x42>
 800ab92:	4622      	mov	r2, r4
 800ab94:	4628      	mov	r0, r5
 800ab96:	f000 f837 	bl	800ac08 <__swbuf_r>
 800ab9a:	3001      	adds	r0, #1
 800ab9c:	d1bf      	bne.n	800ab1e <_puts_r+0x42>
 800ab9e:	e7df      	b.n	800ab60 <_puts_r+0x84>
 800aba0:	6823      	ldr	r3, [r4, #0]
 800aba2:	250a      	movs	r5, #10
 800aba4:	1c5a      	adds	r2, r3, #1
 800aba6:	6022      	str	r2, [r4, #0]
 800aba8:	701d      	strb	r5, [r3, #0]
 800abaa:	e7db      	b.n	800ab64 <_puts_r+0x88>
 800abac:	0800dd78 	.word	0x0800dd78
 800abb0:	0800dd98 	.word	0x0800dd98
 800abb4:	0800dd58 	.word	0x0800dd58

0800abb8 <puts>:
 800abb8:	4b02      	ldr	r3, [pc, #8]	; (800abc4 <puts+0xc>)
 800abba:	4601      	mov	r1, r0
 800abbc:	6818      	ldr	r0, [r3, #0]
 800abbe:	f7ff bf8d 	b.w	800aadc <_puts_r>
 800abc2:	bf00      	nop
 800abc4:	20000010 	.word	0x20000010

0800abc8 <siprintf>:
 800abc8:	b40e      	push	{r1, r2, r3}
 800abca:	b500      	push	{lr}
 800abcc:	b09c      	sub	sp, #112	; 0x70
 800abce:	ab1d      	add	r3, sp, #116	; 0x74
 800abd0:	9002      	str	r0, [sp, #8]
 800abd2:	9006      	str	r0, [sp, #24]
 800abd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800abd8:	4809      	ldr	r0, [pc, #36]	; (800ac00 <siprintf+0x38>)
 800abda:	9107      	str	r1, [sp, #28]
 800abdc:	9104      	str	r1, [sp, #16]
 800abde:	4909      	ldr	r1, [pc, #36]	; (800ac04 <siprintf+0x3c>)
 800abe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800abe4:	9105      	str	r1, [sp, #20]
 800abe6:	6800      	ldr	r0, [r0, #0]
 800abe8:	9301      	str	r3, [sp, #4]
 800abea:	a902      	add	r1, sp, #8
 800abec:	f001 fe56 	bl	800c89c <_svfiprintf_r>
 800abf0:	9b02      	ldr	r3, [sp, #8]
 800abf2:	2200      	movs	r2, #0
 800abf4:	701a      	strb	r2, [r3, #0]
 800abf6:	b01c      	add	sp, #112	; 0x70
 800abf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800abfc:	b003      	add	sp, #12
 800abfe:	4770      	bx	lr
 800ac00:	20000010 	.word	0x20000010
 800ac04:	ffff0208 	.word	0xffff0208

0800ac08 <__swbuf_r>:
 800ac08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac0a:	460e      	mov	r6, r1
 800ac0c:	4614      	mov	r4, r2
 800ac0e:	4605      	mov	r5, r0
 800ac10:	b118      	cbz	r0, 800ac1a <__swbuf_r+0x12>
 800ac12:	6983      	ldr	r3, [r0, #24]
 800ac14:	b90b      	cbnz	r3, 800ac1a <__swbuf_r+0x12>
 800ac16:	f001 f84b 	bl	800bcb0 <__sinit>
 800ac1a:	4b21      	ldr	r3, [pc, #132]	; (800aca0 <__swbuf_r+0x98>)
 800ac1c:	429c      	cmp	r4, r3
 800ac1e:	d12b      	bne.n	800ac78 <__swbuf_r+0x70>
 800ac20:	686c      	ldr	r4, [r5, #4]
 800ac22:	69a3      	ldr	r3, [r4, #24]
 800ac24:	60a3      	str	r3, [r4, #8]
 800ac26:	89a3      	ldrh	r3, [r4, #12]
 800ac28:	071a      	lsls	r2, r3, #28
 800ac2a:	d52f      	bpl.n	800ac8c <__swbuf_r+0x84>
 800ac2c:	6923      	ldr	r3, [r4, #16]
 800ac2e:	b36b      	cbz	r3, 800ac8c <__swbuf_r+0x84>
 800ac30:	6923      	ldr	r3, [r4, #16]
 800ac32:	6820      	ldr	r0, [r4, #0]
 800ac34:	1ac0      	subs	r0, r0, r3
 800ac36:	6963      	ldr	r3, [r4, #20]
 800ac38:	b2f6      	uxtb	r6, r6
 800ac3a:	4283      	cmp	r3, r0
 800ac3c:	4637      	mov	r7, r6
 800ac3e:	dc04      	bgt.n	800ac4a <__swbuf_r+0x42>
 800ac40:	4621      	mov	r1, r4
 800ac42:	4628      	mov	r0, r5
 800ac44:	f000 ffa0 	bl	800bb88 <_fflush_r>
 800ac48:	bb30      	cbnz	r0, 800ac98 <__swbuf_r+0x90>
 800ac4a:	68a3      	ldr	r3, [r4, #8]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	60a3      	str	r3, [r4, #8]
 800ac50:	6823      	ldr	r3, [r4, #0]
 800ac52:	1c5a      	adds	r2, r3, #1
 800ac54:	6022      	str	r2, [r4, #0]
 800ac56:	701e      	strb	r6, [r3, #0]
 800ac58:	6963      	ldr	r3, [r4, #20]
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	4283      	cmp	r3, r0
 800ac5e:	d004      	beq.n	800ac6a <__swbuf_r+0x62>
 800ac60:	89a3      	ldrh	r3, [r4, #12]
 800ac62:	07db      	lsls	r3, r3, #31
 800ac64:	d506      	bpl.n	800ac74 <__swbuf_r+0x6c>
 800ac66:	2e0a      	cmp	r6, #10
 800ac68:	d104      	bne.n	800ac74 <__swbuf_r+0x6c>
 800ac6a:	4621      	mov	r1, r4
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	f000 ff8b 	bl	800bb88 <_fflush_r>
 800ac72:	b988      	cbnz	r0, 800ac98 <__swbuf_r+0x90>
 800ac74:	4638      	mov	r0, r7
 800ac76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac78:	4b0a      	ldr	r3, [pc, #40]	; (800aca4 <__swbuf_r+0x9c>)
 800ac7a:	429c      	cmp	r4, r3
 800ac7c:	d101      	bne.n	800ac82 <__swbuf_r+0x7a>
 800ac7e:	68ac      	ldr	r4, [r5, #8]
 800ac80:	e7cf      	b.n	800ac22 <__swbuf_r+0x1a>
 800ac82:	4b09      	ldr	r3, [pc, #36]	; (800aca8 <__swbuf_r+0xa0>)
 800ac84:	429c      	cmp	r4, r3
 800ac86:	bf08      	it	eq
 800ac88:	68ec      	ldreq	r4, [r5, #12]
 800ac8a:	e7ca      	b.n	800ac22 <__swbuf_r+0x1a>
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	4628      	mov	r0, r5
 800ac90:	f000 f80c 	bl	800acac <__swsetup_r>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d0cb      	beq.n	800ac30 <__swbuf_r+0x28>
 800ac98:	f04f 37ff 	mov.w	r7, #4294967295
 800ac9c:	e7ea      	b.n	800ac74 <__swbuf_r+0x6c>
 800ac9e:	bf00      	nop
 800aca0:	0800dd78 	.word	0x0800dd78
 800aca4:	0800dd98 	.word	0x0800dd98
 800aca8:	0800dd58 	.word	0x0800dd58

0800acac <__swsetup_r>:
 800acac:	4b32      	ldr	r3, [pc, #200]	; (800ad78 <__swsetup_r+0xcc>)
 800acae:	b570      	push	{r4, r5, r6, lr}
 800acb0:	681d      	ldr	r5, [r3, #0]
 800acb2:	4606      	mov	r6, r0
 800acb4:	460c      	mov	r4, r1
 800acb6:	b125      	cbz	r5, 800acc2 <__swsetup_r+0x16>
 800acb8:	69ab      	ldr	r3, [r5, #24]
 800acba:	b913      	cbnz	r3, 800acc2 <__swsetup_r+0x16>
 800acbc:	4628      	mov	r0, r5
 800acbe:	f000 fff7 	bl	800bcb0 <__sinit>
 800acc2:	4b2e      	ldr	r3, [pc, #184]	; (800ad7c <__swsetup_r+0xd0>)
 800acc4:	429c      	cmp	r4, r3
 800acc6:	d10f      	bne.n	800ace8 <__swsetup_r+0x3c>
 800acc8:	686c      	ldr	r4, [r5, #4]
 800acca:	89a3      	ldrh	r3, [r4, #12]
 800accc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acd0:	0719      	lsls	r1, r3, #28
 800acd2:	d42c      	bmi.n	800ad2e <__swsetup_r+0x82>
 800acd4:	06dd      	lsls	r5, r3, #27
 800acd6:	d411      	bmi.n	800acfc <__swsetup_r+0x50>
 800acd8:	2309      	movs	r3, #9
 800acda:	6033      	str	r3, [r6, #0]
 800acdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ace0:	81a3      	strh	r3, [r4, #12]
 800ace2:	f04f 30ff 	mov.w	r0, #4294967295
 800ace6:	e03e      	b.n	800ad66 <__swsetup_r+0xba>
 800ace8:	4b25      	ldr	r3, [pc, #148]	; (800ad80 <__swsetup_r+0xd4>)
 800acea:	429c      	cmp	r4, r3
 800acec:	d101      	bne.n	800acf2 <__swsetup_r+0x46>
 800acee:	68ac      	ldr	r4, [r5, #8]
 800acf0:	e7eb      	b.n	800acca <__swsetup_r+0x1e>
 800acf2:	4b24      	ldr	r3, [pc, #144]	; (800ad84 <__swsetup_r+0xd8>)
 800acf4:	429c      	cmp	r4, r3
 800acf6:	bf08      	it	eq
 800acf8:	68ec      	ldreq	r4, [r5, #12]
 800acfa:	e7e6      	b.n	800acca <__swsetup_r+0x1e>
 800acfc:	0758      	lsls	r0, r3, #29
 800acfe:	d512      	bpl.n	800ad26 <__swsetup_r+0x7a>
 800ad00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad02:	b141      	cbz	r1, 800ad16 <__swsetup_r+0x6a>
 800ad04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad08:	4299      	cmp	r1, r3
 800ad0a:	d002      	beq.n	800ad12 <__swsetup_r+0x66>
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	f001 fc89 	bl	800c624 <_free_r>
 800ad12:	2300      	movs	r3, #0
 800ad14:	6363      	str	r3, [r4, #52]	; 0x34
 800ad16:	89a3      	ldrh	r3, [r4, #12]
 800ad18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad1c:	81a3      	strh	r3, [r4, #12]
 800ad1e:	2300      	movs	r3, #0
 800ad20:	6063      	str	r3, [r4, #4]
 800ad22:	6923      	ldr	r3, [r4, #16]
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	89a3      	ldrh	r3, [r4, #12]
 800ad28:	f043 0308 	orr.w	r3, r3, #8
 800ad2c:	81a3      	strh	r3, [r4, #12]
 800ad2e:	6923      	ldr	r3, [r4, #16]
 800ad30:	b94b      	cbnz	r3, 800ad46 <__swsetup_r+0x9a>
 800ad32:	89a3      	ldrh	r3, [r4, #12]
 800ad34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad3c:	d003      	beq.n	800ad46 <__swsetup_r+0x9a>
 800ad3e:	4621      	mov	r1, r4
 800ad40:	4630      	mov	r0, r6
 800ad42:	f001 f87f 	bl	800be44 <__smakebuf_r>
 800ad46:	89a0      	ldrh	r0, [r4, #12]
 800ad48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad4c:	f010 0301 	ands.w	r3, r0, #1
 800ad50:	d00a      	beq.n	800ad68 <__swsetup_r+0xbc>
 800ad52:	2300      	movs	r3, #0
 800ad54:	60a3      	str	r3, [r4, #8]
 800ad56:	6963      	ldr	r3, [r4, #20]
 800ad58:	425b      	negs	r3, r3
 800ad5a:	61a3      	str	r3, [r4, #24]
 800ad5c:	6923      	ldr	r3, [r4, #16]
 800ad5e:	b943      	cbnz	r3, 800ad72 <__swsetup_r+0xc6>
 800ad60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad64:	d1ba      	bne.n	800acdc <__swsetup_r+0x30>
 800ad66:	bd70      	pop	{r4, r5, r6, pc}
 800ad68:	0781      	lsls	r1, r0, #30
 800ad6a:	bf58      	it	pl
 800ad6c:	6963      	ldrpl	r3, [r4, #20]
 800ad6e:	60a3      	str	r3, [r4, #8]
 800ad70:	e7f4      	b.n	800ad5c <__swsetup_r+0xb0>
 800ad72:	2000      	movs	r0, #0
 800ad74:	e7f7      	b.n	800ad66 <__swsetup_r+0xba>
 800ad76:	bf00      	nop
 800ad78:	20000010 	.word	0x20000010
 800ad7c:	0800dd78 	.word	0x0800dd78
 800ad80:	0800dd98 	.word	0x0800dd98
 800ad84:	0800dd58 	.word	0x0800dd58

0800ad88 <quorem>:
 800ad88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8c:	6903      	ldr	r3, [r0, #16]
 800ad8e:	690c      	ldr	r4, [r1, #16]
 800ad90:	42a3      	cmp	r3, r4
 800ad92:	4607      	mov	r7, r0
 800ad94:	f2c0 8081 	blt.w	800ae9a <quorem+0x112>
 800ad98:	3c01      	subs	r4, #1
 800ad9a:	f101 0814 	add.w	r8, r1, #20
 800ad9e:	f100 0514 	add.w	r5, r0, #20
 800ada2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ada6:	9301      	str	r3, [sp, #4]
 800ada8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800adac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adb0:	3301      	adds	r3, #1
 800adb2:	429a      	cmp	r2, r3
 800adb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800adb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800adbc:	fbb2 f6f3 	udiv	r6, r2, r3
 800adc0:	d331      	bcc.n	800ae26 <quorem+0x9e>
 800adc2:	f04f 0e00 	mov.w	lr, #0
 800adc6:	4640      	mov	r0, r8
 800adc8:	46ac      	mov	ip, r5
 800adca:	46f2      	mov	sl, lr
 800adcc:	f850 2b04 	ldr.w	r2, [r0], #4
 800add0:	b293      	uxth	r3, r2
 800add2:	fb06 e303 	mla	r3, r6, r3, lr
 800add6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800adda:	b29b      	uxth	r3, r3
 800addc:	ebaa 0303 	sub.w	r3, sl, r3
 800ade0:	f8dc a000 	ldr.w	sl, [ip]
 800ade4:	0c12      	lsrs	r2, r2, #16
 800ade6:	fa13 f38a 	uxtah	r3, r3, sl
 800adea:	fb06 e202 	mla	r2, r6, r2, lr
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	9b00      	ldr	r3, [sp, #0]
 800adf2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800adf6:	b292      	uxth	r2, r2
 800adf8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800adfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae00:	f8bd 3000 	ldrh.w	r3, [sp]
 800ae04:	4581      	cmp	r9, r0
 800ae06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae0a:	f84c 3b04 	str.w	r3, [ip], #4
 800ae0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae12:	d2db      	bcs.n	800adcc <quorem+0x44>
 800ae14:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae18:	b92b      	cbnz	r3, 800ae26 <quorem+0x9e>
 800ae1a:	9b01      	ldr	r3, [sp, #4]
 800ae1c:	3b04      	subs	r3, #4
 800ae1e:	429d      	cmp	r5, r3
 800ae20:	461a      	mov	r2, r3
 800ae22:	d32e      	bcc.n	800ae82 <quorem+0xfa>
 800ae24:	613c      	str	r4, [r7, #16]
 800ae26:	4638      	mov	r0, r7
 800ae28:	f001 fae4 	bl	800c3f4 <__mcmp>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	db24      	blt.n	800ae7a <quorem+0xf2>
 800ae30:	3601      	adds	r6, #1
 800ae32:	4628      	mov	r0, r5
 800ae34:	f04f 0c00 	mov.w	ip, #0
 800ae38:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae3c:	f8d0 e000 	ldr.w	lr, [r0]
 800ae40:	b293      	uxth	r3, r2
 800ae42:	ebac 0303 	sub.w	r3, ip, r3
 800ae46:	0c12      	lsrs	r2, r2, #16
 800ae48:	fa13 f38e 	uxtah	r3, r3, lr
 800ae4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ae50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae5a:	45c1      	cmp	r9, r8
 800ae5c:	f840 3b04 	str.w	r3, [r0], #4
 800ae60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ae64:	d2e8      	bcs.n	800ae38 <quorem+0xb0>
 800ae66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae6e:	b922      	cbnz	r2, 800ae7a <quorem+0xf2>
 800ae70:	3b04      	subs	r3, #4
 800ae72:	429d      	cmp	r5, r3
 800ae74:	461a      	mov	r2, r3
 800ae76:	d30a      	bcc.n	800ae8e <quorem+0x106>
 800ae78:	613c      	str	r4, [r7, #16]
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	b003      	add	sp, #12
 800ae7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae82:	6812      	ldr	r2, [r2, #0]
 800ae84:	3b04      	subs	r3, #4
 800ae86:	2a00      	cmp	r2, #0
 800ae88:	d1cc      	bne.n	800ae24 <quorem+0x9c>
 800ae8a:	3c01      	subs	r4, #1
 800ae8c:	e7c7      	b.n	800ae1e <quorem+0x96>
 800ae8e:	6812      	ldr	r2, [r2, #0]
 800ae90:	3b04      	subs	r3, #4
 800ae92:	2a00      	cmp	r2, #0
 800ae94:	d1f0      	bne.n	800ae78 <quorem+0xf0>
 800ae96:	3c01      	subs	r4, #1
 800ae98:	e7eb      	b.n	800ae72 <quorem+0xea>
 800ae9a:	2000      	movs	r0, #0
 800ae9c:	e7ee      	b.n	800ae7c <quorem+0xf4>
	...

0800aea0 <_dtoa_r>:
 800aea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea4:	ed2d 8b04 	vpush	{d8-d9}
 800aea8:	ec57 6b10 	vmov	r6, r7, d0
 800aeac:	b093      	sub	sp, #76	; 0x4c
 800aeae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aeb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aeb4:	9106      	str	r1, [sp, #24]
 800aeb6:	ee10 aa10 	vmov	sl, s0
 800aeba:	4604      	mov	r4, r0
 800aebc:	9209      	str	r2, [sp, #36]	; 0x24
 800aebe:	930c      	str	r3, [sp, #48]	; 0x30
 800aec0:	46bb      	mov	fp, r7
 800aec2:	b975      	cbnz	r5, 800aee2 <_dtoa_r+0x42>
 800aec4:	2010      	movs	r0, #16
 800aec6:	f000 fffd 	bl	800bec4 <malloc>
 800aeca:	4602      	mov	r2, r0
 800aecc:	6260      	str	r0, [r4, #36]	; 0x24
 800aece:	b920      	cbnz	r0, 800aeda <_dtoa_r+0x3a>
 800aed0:	4ba7      	ldr	r3, [pc, #668]	; (800b170 <_dtoa_r+0x2d0>)
 800aed2:	21ea      	movs	r1, #234	; 0xea
 800aed4:	48a7      	ldr	r0, [pc, #668]	; (800b174 <_dtoa_r+0x2d4>)
 800aed6:	f001 ffa1 	bl	800ce1c <__assert_func>
 800aeda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aede:	6005      	str	r5, [r0, #0]
 800aee0:	60c5      	str	r5, [r0, #12]
 800aee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aee4:	6819      	ldr	r1, [r3, #0]
 800aee6:	b151      	cbz	r1, 800aefe <_dtoa_r+0x5e>
 800aee8:	685a      	ldr	r2, [r3, #4]
 800aeea:	604a      	str	r2, [r1, #4]
 800aeec:	2301      	movs	r3, #1
 800aeee:	4093      	lsls	r3, r2
 800aef0:	608b      	str	r3, [r1, #8]
 800aef2:	4620      	mov	r0, r4
 800aef4:	f001 f83c 	bl	800bf70 <_Bfree>
 800aef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aefa:	2200      	movs	r2, #0
 800aefc:	601a      	str	r2, [r3, #0]
 800aefe:	1e3b      	subs	r3, r7, #0
 800af00:	bfaa      	itet	ge
 800af02:	2300      	movge	r3, #0
 800af04:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800af08:	f8c8 3000 	strge.w	r3, [r8]
 800af0c:	4b9a      	ldr	r3, [pc, #616]	; (800b178 <_dtoa_r+0x2d8>)
 800af0e:	bfbc      	itt	lt
 800af10:	2201      	movlt	r2, #1
 800af12:	f8c8 2000 	strlt.w	r2, [r8]
 800af16:	ea33 030b 	bics.w	r3, r3, fp
 800af1a:	d11b      	bne.n	800af54 <_dtoa_r+0xb4>
 800af1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af1e:	f242 730f 	movw	r3, #9999	; 0x270f
 800af22:	6013      	str	r3, [r2, #0]
 800af24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af28:	4333      	orrs	r3, r6
 800af2a:	f000 8592 	beq.w	800ba52 <_dtoa_r+0xbb2>
 800af2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af30:	b963      	cbnz	r3, 800af4c <_dtoa_r+0xac>
 800af32:	4b92      	ldr	r3, [pc, #584]	; (800b17c <_dtoa_r+0x2dc>)
 800af34:	e022      	b.n	800af7c <_dtoa_r+0xdc>
 800af36:	4b92      	ldr	r3, [pc, #584]	; (800b180 <_dtoa_r+0x2e0>)
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	3308      	adds	r3, #8
 800af3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af3e:	6013      	str	r3, [r2, #0]
 800af40:	9801      	ldr	r0, [sp, #4]
 800af42:	b013      	add	sp, #76	; 0x4c
 800af44:	ecbd 8b04 	vpop	{d8-d9}
 800af48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af4c:	4b8b      	ldr	r3, [pc, #556]	; (800b17c <_dtoa_r+0x2dc>)
 800af4e:	9301      	str	r3, [sp, #4]
 800af50:	3303      	adds	r3, #3
 800af52:	e7f3      	b.n	800af3c <_dtoa_r+0x9c>
 800af54:	2200      	movs	r2, #0
 800af56:	2300      	movs	r3, #0
 800af58:	4650      	mov	r0, sl
 800af5a:	4659      	mov	r1, fp
 800af5c:	f7f5 fddc 	bl	8000b18 <__aeabi_dcmpeq>
 800af60:	ec4b ab19 	vmov	d9, sl, fp
 800af64:	4680      	mov	r8, r0
 800af66:	b158      	cbz	r0, 800af80 <_dtoa_r+0xe0>
 800af68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af6a:	2301      	movs	r3, #1
 800af6c:	6013      	str	r3, [r2, #0]
 800af6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af70:	2b00      	cmp	r3, #0
 800af72:	f000 856b 	beq.w	800ba4c <_dtoa_r+0xbac>
 800af76:	4883      	ldr	r0, [pc, #524]	; (800b184 <_dtoa_r+0x2e4>)
 800af78:	6018      	str	r0, [r3, #0]
 800af7a:	1e43      	subs	r3, r0, #1
 800af7c:	9301      	str	r3, [sp, #4]
 800af7e:	e7df      	b.n	800af40 <_dtoa_r+0xa0>
 800af80:	ec4b ab10 	vmov	d0, sl, fp
 800af84:	aa10      	add	r2, sp, #64	; 0x40
 800af86:	a911      	add	r1, sp, #68	; 0x44
 800af88:	4620      	mov	r0, r4
 800af8a:	f001 fad9 	bl	800c540 <__d2b>
 800af8e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800af92:	ee08 0a10 	vmov	s16, r0
 800af96:	2d00      	cmp	r5, #0
 800af98:	f000 8084 	beq.w	800b0a4 <_dtoa_r+0x204>
 800af9c:	ee19 3a90 	vmov	r3, s19
 800afa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afa4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800afa8:	4656      	mov	r6, sl
 800afaa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800afae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800afb2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800afb6:	4b74      	ldr	r3, [pc, #464]	; (800b188 <_dtoa_r+0x2e8>)
 800afb8:	2200      	movs	r2, #0
 800afba:	4630      	mov	r0, r6
 800afbc:	4639      	mov	r1, r7
 800afbe:	f7f5 f98b 	bl	80002d8 <__aeabi_dsub>
 800afc2:	a365      	add	r3, pc, #404	; (adr r3, 800b158 <_dtoa_r+0x2b8>)
 800afc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc8:	f7f5 fb3e 	bl	8000648 <__aeabi_dmul>
 800afcc:	a364      	add	r3, pc, #400	; (adr r3, 800b160 <_dtoa_r+0x2c0>)
 800afce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd2:	f7f5 f983 	bl	80002dc <__adddf3>
 800afd6:	4606      	mov	r6, r0
 800afd8:	4628      	mov	r0, r5
 800afda:	460f      	mov	r7, r1
 800afdc:	f7f5 faca 	bl	8000574 <__aeabi_i2d>
 800afe0:	a361      	add	r3, pc, #388	; (adr r3, 800b168 <_dtoa_r+0x2c8>)
 800afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe6:	f7f5 fb2f 	bl	8000648 <__aeabi_dmul>
 800afea:	4602      	mov	r2, r0
 800afec:	460b      	mov	r3, r1
 800afee:	4630      	mov	r0, r6
 800aff0:	4639      	mov	r1, r7
 800aff2:	f7f5 f973 	bl	80002dc <__adddf3>
 800aff6:	4606      	mov	r6, r0
 800aff8:	460f      	mov	r7, r1
 800affa:	f7f5 fdd5 	bl	8000ba8 <__aeabi_d2iz>
 800affe:	2200      	movs	r2, #0
 800b000:	9000      	str	r0, [sp, #0]
 800b002:	2300      	movs	r3, #0
 800b004:	4630      	mov	r0, r6
 800b006:	4639      	mov	r1, r7
 800b008:	f7f5 fd90 	bl	8000b2c <__aeabi_dcmplt>
 800b00c:	b150      	cbz	r0, 800b024 <_dtoa_r+0x184>
 800b00e:	9800      	ldr	r0, [sp, #0]
 800b010:	f7f5 fab0 	bl	8000574 <__aeabi_i2d>
 800b014:	4632      	mov	r2, r6
 800b016:	463b      	mov	r3, r7
 800b018:	f7f5 fd7e 	bl	8000b18 <__aeabi_dcmpeq>
 800b01c:	b910      	cbnz	r0, 800b024 <_dtoa_r+0x184>
 800b01e:	9b00      	ldr	r3, [sp, #0]
 800b020:	3b01      	subs	r3, #1
 800b022:	9300      	str	r3, [sp, #0]
 800b024:	9b00      	ldr	r3, [sp, #0]
 800b026:	2b16      	cmp	r3, #22
 800b028:	d85a      	bhi.n	800b0e0 <_dtoa_r+0x240>
 800b02a:	9a00      	ldr	r2, [sp, #0]
 800b02c:	4b57      	ldr	r3, [pc, #348]	; (800b18c <_dtoa_r+0x2ec>)
 800b02e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b036:	ec51 0b19 	vmov	r0, r1, d9
 800b03a:	f7f5 fd77 	bl	8000b2c <__aeabi_dcmplt>
 800b03e:	2800      	cmp	r0, #0
 800b040:	d050      	beq.n	800b0e4 <_dtoa_r+0x244>
 800b042:	9b00      	ldr	r3, [sp, #0]
 800b044:	3b01      	subs	r3, #1
 800b046:	9300      	str	r3, [sp, #0]
 800b048:	2300      	movs	r3, #0
 800b04a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b04c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b04e:	1b5d      	subs	r5, r3, r5
 800b050:	1e6b      	subs	r3, r5, #1
 800b052:	9305      	str	r3, [sp, #20]
 800b054:	bf45      	ittet	mi
 800b056:	f1c5 0301 	rsbmi	r3, r5, #1
 800b05a:	9304      	strmi	r3, [sp, #16]
 800b05c:	2300      	movpl	r3, #0
 800b05e:	2300      	movmi	r3, #0
 800b060:	bf4c      	ite	mi
 800b062:	9305      	strmi	r3, [sp, #20]
 800b064:	9304      	strpl	r3, [sp, #16]
 800b066:	9b00      	ldr	r3, [sp, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	db3d      	blt.n	800b0e8 <_dtoa_r+0x248>
 800b06c:	9b05      	ldr	r3, [sp, #20]
 800b06e:	9a00      	ldr	r2, [sp, #0]
 800b070:	920a      	str	r2, [sp, #40]	; 0x28
 800b072:	4413      	add	r3, r2
 800b074:	9305      	str	r3, [sp, #20]
 800b076:	2300      	movs	r3, #0
 800b078:	9307      	str	r3, [sp, #28]
 800b07a:	9b06      	ldr	r3, [sp, #24]
 800b07c:	2b09      	cmp	r3, #9
 800b07e:	f200 8089 	bhi.w	800b194 <_dtoa_r+0x2f4>
 800b082:	2b05      	cmp	r3, #5
 800b084:	bfc4      	itt	gt
 800b086:	3b04      	subgt	r3, #4
 800b088:	9306      	strgt	r3, [sp, #24]
 800b08a:	9b06      	ldr	r3, [sp, #24]
 800b08c:	f1a3 0302 	sub.w	r3, r3, #2
 800b090:	bfcc      	ite	gt
 800b092:	2500      	movgt	r5, #0
 800b094:	2501      	movle	r5, #1
 800b096:	2b03      	cmp	r3, #3
 800b098:	f200 8087 	bhi.w	800b1aa <_dtoa_r+0x30a>
 800b09c:	e8df f003 	tbb	[pc, r3]
 800b0a0:	59383a2d 	.word	0x59383a2d
 800b0a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b0a8:	441d      	add	r5, r3
 800b0aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b0ae:	2b20      	cmp	r3, #32
 800b0b0:	bfc1      	itttt	gt
 800b0b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b0b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b0ba:	fa0b f303 	lslgt.w	r3, fp, r3
 800b0be:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b0c2:	bfda      	itte	le
 800b0c4:	f1c3 0320 	rsble	r3, r3, #32
 800b0c8:	fa06 f003 	lslle.w	r0, r6, r3
 800b0cc:	4318      	orrgt	r0, r3
 800b0ce:	f7f5 fa41 	bl	8000554 <__aeabi_ui2d>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b0da:	3d01      	subs	r5, #1
 800b0dc:	930e      	str	r3, [sp, #56]	; 0x38
 800b0de:	e76a      	b.n	800afb6 <_dtoa_r+0x116>
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e7b2      	b.n	800b04a <_dtoa_r+0x1aa>
 800b0e4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b0e6:	e7b1      	b.n	800b04c <_dtoa_r+0x1ac>
 800b0e8:	9b04      	ldr	r3, [sp, #16]
 800b0ea:	9a00      	ldr	r2, [sp, #0]
 800b0ec:	1a9b      	subs	r3, r3, r2
 800b0ee:	9304      	str	r3, [sp, #16]
 800b0f0:	4253      	negs	r3, r2
 800b0f2:	9307      	str	r3, [sp, #28]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b0f8:	e7bf      	b.n	800b07a <_dtoa_r+0x1da>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	9308      	str	r3, [sp, #32]
 800b0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b100:	2b00      	cmp	r3, #0
 800b102:	dc55      	bgt.n	800b1b0 <_dtoa_r+0x310>
 800b104:	2301      	movs	r3, #1
 800b106:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b10a:	461a      	mov	r2, r3
 800b10c:	9209      	str	r2, [sp, #36]	; 0x24
 800b10e:	e00c      	b.n	800b12a <_dtoa_r+0x28a>
 800b110:	2301      	movs	r3, #1
 800b112:	e7f3      	b.n	800b0fc <_dtoa_r+0x25c>
 800b114:	2300      	movs	r3, #0
 800b116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b118:	9308      	str	r3, [sp, #32]
 800b11a:	9b00      	ldr	r3, [sp, #0]
 800b11c:	4413      	add	r3, r2
 800b11e:	9302      	str	r3, [sp, #8]
 800b120:	3301      	adds	r3, #1
 800b122:	2b01      	cmp	r3, #1
 800b124:	9303      	str	r3, [sp, #12]
 800b126:	bfb8      	it	lt
 800b128:	2301      	movlt	r3, #1
 800b12a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b12c:	2200      	movs	r2, #0
 800b12e:	6042      	str	r2, [r0, #4]
 800b130:	2204      	movs	r2, #4
 800b132:	f102 0614 	add.w	r6, r2, #20
 800b136:	429e      	cmp	r6, r3
 800b138:	6841      	ldr	r1, [r0, #4]
 800b13a:	d93d      	bls.n	800b1b8 <_dtoa_r+0x318>
 800b13c:	4620      	mov	r0, r4
 800b13e:	f000 fed7 	bl	800bef0 <_Balloc>
 800b142:	9001      	str	r0, [sp, #4]
 800b144:	2800      	cmp	r0, #0
 800b146:	d13b      	bne.n	800b1c0 <_dtoa_r+0x320>
 800b148:	4b11      	ldr	r3, [pc, #68]	; (800b190 <_dtoa_r+0x2f0>)
 800b14a:	4602      	mov	r2, r0
 800b14c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b150:	e6c0      	b.n	800aed4 <_dtoa_r+0x34>
 800b152:	2301      	movs	r3, #1
 800b154:	e7df      	b.n	800b116 <_dtoa_r+0x276>
 800b156:	bf00      	nop
 800b158:	636f4361 	.word	0x636f4361
 800b15c:	3fd287a7 	.word	0x3fd287a7
 800b160:	8b60c8b3 	.word	0x8b60c8b3
 800b164:	3fc68a28 	.word	0x3fc68a28
 800b168:	509f79fb 	.word	0x509f79fb
 800b16c:	3fd34413 	.word	0x3fd34413
 800b170:	0800dcd5 	.word	0x0800dcd5
 800b174:	0800dcec 	.word	0x0800dcec
 800b178:	7ff00000 	.word	0x7ff00000
 800b17c:	0800dcd1 	.word	0x0800dcd1
 800b180:	0800dcc8 	.word	0x0800dcc8
 800b184:	0800dca5 	.word	0x0800dca5
 800b188:	3ff80000 	.word	0x3ff80000
 800b18c:	0800de40 	.word	0x0800de40
 800b190:	0800dd47 	.word	0x0800dd47
 800b194:	2501      	movs	r5, #1
 800b196:	2300      	movs	r3, #0
 800b198:	9306      	str	r3, [sp, #24]
 800b19a:	9508      	str	r5, [sp, #32]
 800b19c:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	2312      	movs	r3, #18
 800b1a8:	e7b0      	b.n	800b10c <_dtoa_r+0x26c>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	9308      	str	r3, [sp, #32]
 800b1ae:	e7f5      	b.n	800b19c <_dtoa_r+0x2fc>
 800b1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b1b6:	e7b8      	b.n	800b12a <_dtoa_r+0x28a>
 800b1b8:	3101      	adds	r1, #1
 800b1ba:	6041      	str	r1, [r0, #4]
 800b1bc:	0052      	lsls	r2, r2, #1
 800b1be:	e7b8      	b.n	800b132 <_dtoa_r+0x292>
 800b1c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1c2:	9a01      	ldr	r2, [sp, #4]
 800b1c4:	601a      	str	r2, [r3, #0]
 800b1c6:	9b03      	ldr	r3, [sp, #12]
 800b1c8:	2b0e      	cmp	r3, #14
 800b1ca:	f200 809d 	bhi.w	800b308 <_dtoa_r+0x468>
 800b1ce:	2d00      	cmp	r5, #0
 800b1d0:	f000 809a 	beq.w	800b308 <_dtoa_r+0x468>
 800b1d4:	9b00      	ldr	r3, [sp, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	dd32      	ble.n	800b240 <_dtoa_r+0x3a0>
 800b1da:	4ab7      	ldr	r2, [pc, #732]	; (800b4b8 <_dtoa_r+0x618>)
 800b1dc:	f003 030f 	and.w	r3, r3, #15
 800b1e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b1e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1e8:	9b00      	ldr	r3, [sp, #0]
 800b1ea:	05d8      	lsls	r0, r3, #23
 800b1ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b1f0:	d516      	bpl.n	800b220 <_dtoa_r+0x380>
 800b1f2:	4bb2      	ldr	r3, [pc, #712]	; (800b4bc <_dtoa_r+0x61c>)
 800b1f4:	ec51 0b19 	vmov	r0, r1, d9
 800b1f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1fc:	f7f5 fb4e 	bl	800089c <__aeabi_ddiv>
 800b200:	f007 070f 	and.w	r7, r7, #15
 800b204:	4682      	mov	sl, r0
 800b206:	468b      	mov	fp, r1
 800b208:	2503      	movs	r5, #3
 800b20a:	4eac      	ldr	r6, [pc, #688]	; (800b4bc <_dtoa_r+0x61c>)
 800b20c:	b957      	cbnz	r7, 800b224 <_dtoa_r+0x384>
 800b20e:	4642      	mov	r2, r8
 800b210:	464b      	mov	r3, r9
 800b212:	4650      	mov	r0, sl
 800b214:	4659      	mov	r1, fp
 800b216:	f7f5 fb41 	bl	800089c <__aeabi_ddiv>
 800b21a:	4682      	mov	sl, r0
 800b21c:	468b      	mov	fp, r1
 800b21e:	e028      	b.n	800b272 <_dtoa_r+0x3d2>
 800b220:	2502      	movs	r5, #2
 800b222:	e7f2      	b.n	800b20a <_dtoa_r+0x36a>
 800b224:	07f9      	lsls	r1, r7, #31
 800b226:	d508      	bpl.n	800b23a <_dtoa_r+0x39a>
 800b228:	4640      	mov	r0, r8
 800b22a:	4649      	mov	r1, r9
 800b22c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b230:	f7f5 fa0a 	bl	8000648 <__aeabi_dmul>
 800b234:	3501      	adds	r5, #1
 800b236:	4680      	mov	r8, r0
 800b238:	4689      	mov	r9, r1
 800b23a:	107f      	asrs	r7, r7, #1
 800b23c:	3608      	adds	r6, #8
 800b23e:	e7e5      	b.n	800b20c <_dtoa_r+0x36c>
 800b240:	f000 809b 	beq.w	800b37a <_dtoa_r+0x4da>
 800b244:	9b00      	ldr	r3, [sp, #0]
 800b246:	4f9d      	ldr	r7, [pc, #628]	; (800b4bc <_dtoa_r+0x61c>)
 800b248:	425e      	negs	r6, r3
 800b24a:	4b9b      	ldr	r3, [pc, #620]	; (800b4b8 <_dtoa_r+0x618>)
 800b24c:	f006 020f 	and.w	r2, r6, #15
 800b250:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	ec51 0b19 	vmov	r0, r1, d9
 800b25c:	f7f5 f9f4 	bl	8000648 <__aeabi_dmul>
 800b260:	1136      	asrs	r6, r6, #4
 800b262:	4682      	mov	sl, r0
 800b264:	468b      	mov	fp, r1
 800b266:	2300      	movs	r3, #0
 800b268:	2502      	movs	r5, #2
 800b26a:	2e00      	cmp	r6, #0
 800b26c:	d17a      	bne.n	800b364 <_dtoa_r+0x4c4>
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1d3      	bne.n	800b21a <_dtoa_r+0x37a>
 800b272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b274:	2b00      	cmp	r3, #0
 800b276:	f000 8082 	beq.w	800b37e <_dtoa_r+0x4de>
 800b27a:	4b91      	ldr	r3, [pc, #580]	; (800b4c0 <_dtoa_r+0x620>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	4650      	mov	r0, sl
 800b280:	4659      	mov	r1, fp
 800b282:	f7f5 fc53 	bl	8000b2c <__aeabi_dcmplt>
 800b286:	2800      	cmp	r0, #0
 800b288:	d079      	beq.n	800b37e <_dtoa_r+0x4de>
 800b28a:	9b03      	ldr	r3, [sp, #12]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d076      	beq.n	800b37e <_dtoa_r+0x4de>
 800b290:	9b02      	ldr	r3, [sp, #8]
 800b292:	2b00      	cmp	r3, #0
 800b294:	dd36      	ble.n	800b304 <_dtoa_r+0x464>
 800b296:	9b00      	ldr	r3, [sp, #0]
 800b298:	4650      	mov	r0, sl
 800b29a:	4659      	mov	r1, fp
 800b29c:	1e5f      	subs	r7, r3, #1
 800b29e:	2200      	movs	r2, #0
 800b2a0:	4b88      	ldr	r3, [pc, #544]	; (800b4c4 <_dtoa_r+0x624>)
 800b2a2:	f7f5 f9d1 	bl	8000648 <__aeabi_dmul>
 800b2a6:	9e02      	ldr	r6, [sp, #8]
 800b2a8:	4682      	mov	sl, r0
 800b2aa:	468b      	mov	fp, r1
 800b2ac:	3501      	adds	r5, #1
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	f7f5 f960 	bl	8000574 <__aeabi_i2d>
 800b2b4:	4652      	mov	r2, sl
 800b2b6:	465b      	mov	r3, fp
 800b2b8:	f7f5 f9c6 	bl	8000648 <__aeabi_dmul>
 800b2bc:	4b82      	ldr	r3, [pc, #520]	; (800b4c8 <_dtoa_r+0x628>)
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f7f5 f80c 	bl	80002dc <__adddf3>
 800b2c4:	46d0      	mov	r8, sl
 800b2c6:	46d9      	mov	r9, fp
 800b2c8:	4682      	mov	sl, r0
 800b2ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b2ce:	2e00      	cmp	r6, #0
 800b2d0:	d158      	bne.n	800b384 <_dtoa_r+0x4e4>
 800b2d2:	4b7e      	ldr	r3, [pc, #504]	; (800b4cc <_dtoa_r+0x62c>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	4640      	mov	r0, r8
 800b2d8:	4649      	mov	r1, r9
 800b2da:	f7f4 fffd 	bl	80002d8 <__aeabi_dsub>
 800b2de:	4652      	mov	r2, sl
 800b2e0:	465b      	mov	r3, fp
 800b2e2:	4680      	mov	r8, r0
 800b2e4:	4689      	mov	r9, r1
 800b2e6:	f7f5 fc3f 	bl	8000b68 <__aeabi_dcmpgt>
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	f040 8295 	bne.w	800b81a <_dtoa_r+0x97a>
 800b2f0:	4652      	mov	r2, sl
 800b2f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b2f6:	4640      	mov	r0, r8
 800b2f8:	4649      	mov	r1, r9
 800b2fa:	f7f5 fc17 	bl	8000b2c <__aeabi_dcmplt>
 800b2fe:	2800      	cmp	r0, #0
 800b300:	f040 8289 	bne.w	800b816 <_dtoa_r+0x976>
 800b304:	ec5b ab19 	vmov	sl, fp, d9
 800b308:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f2c0 8148 	blt.w	800b5a0 <_dtoa_r+0x700>
 800b310:	9a00      	ldr	r2, [sp, #0]
 800b312:	2a0e      	cmp	r2, #14
 800b314:	f300 8144 	bgt.w	800b5a0 <_dtoa_r+0x700>
 800b318:	4b67      	ldr	r3, [pc, #412]	; (800b4b8 <_dtoa_r+0x618>)
 800b31a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b31e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b324:	2b00      	cmp	r3, #0
 800b326:	f280 80d5 	bge.w	800b4d4 <_dtoa_r+0x634>
 800b32a:	9b03      	ldr	r3, [sp, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	f300 80d1 	bgt.w	800b4d4 <_dtoa_r+0x634>
 800b332:	f040 826f 	bne.w	800b814 <_dtoa_r+0x974>
 800b336:	4b65      	ldr	r3, [pc, #404]	; (800b4cc <_dtoa_r+0x62c>)
 800b338:	2200      	movs	r2, #0
 800b33a:	4640      	mov	r0, r8
 800b33c:	4649      	mov	r1, r9
 800b33e:	f7f5 f983 	bl	8000648 <__aeabi_dmul>
 800b342:	4652      	mov	r2, sl
 800b344:	465b      	mov	r3, fp
 800b346:	f7f5 fc05 	bl	8000b54 <__aeabi_dcmpge>
 800b34a:	9e03      	ldr	r6, [sp, #12]
 800b34c:	4637      	mov	r7, r6
 800b34e:	2800      	cmp	r0, #0
 800b350:	f040 8245 	bne.w	800b7de <_dtoa_r+0x93e>
 800b354:	9d01      	ldr	r5, [sp, #4]
 800b356:	2331      	movs	r3, #49	; 0x31
 800b358:	f805 3b01 	strb.w	r3, [r5], #1
 800b35c:	9b00      	ldr	r3, [sp, #0]
 800b35e:	3301      	adds	r3, #1
 800b360:	9300      	str	r3, [sp, #0]
 800b362:	e240      	b.n	800b7e6 <_dtoa_r+0x946>
 800b364:	07f2      	lsls	r2, r6, #31
 800b366:	d505      	bpl.n	800b374 <_dtoa_r+0x4d4>
 800b368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b36c:	f7f5 f96c 	bl	8000648 <__aeabi_dmul>
 800b370:	3501      	adds	r5, #1
 800b372:	2301      	movs	r3, #1
 800b374:	1076      	asrs	r6, r6, #1
 800b376:	3708      	adds	r7, #8
 800b378:	e777      	b.n	800b26a <_dtoa_r+0x3ca>
 800b37a:	2502      	movs	r5, #2
 800b37c:	e779      	b.n	800b272 <_dtoa_r+0x3d2>
 800b37e:	9f00      	ldr	r7, [sp, #0]
 800b380:	9e03      	ldr	r6, [sp, #12]
 800b382:	e794      	b.n	800b2ae <_dtoa_r+0x40e>
 800b384:	9901      	ldr	r1, [sp, #4]
 800b386:	4b4c      	ldr	r3, [pc, #304]	; (800b4b8 <_dtoa_r+0x618>)
 800b388:	4431      	add	r1, r6
 800b38a:	910d      	str	r1, [sp, #52]	; 0x34
 800b38c:	9908      	ldr	r1, [sp, #32]
 800b38e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b392:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b396:	2900      	cmp	r1, #0
 800b398:	d043      	beq.n	800b422 <_dtoa_r+0x582>
 800b39a:	494d      	ldr	r1, [pc, #308]	; (800b4d0 <_dtoa_r+0x630>)
 800b39c:	2000      	movs	r0, #0
 800b39e:	f7f5 fa7d 	bl	800089c <__aeabi_ddiv>
 800b3a2:	4652      	mov	r2, sl
 800b3a4:	465b      	mov	r3, fp
 800b3a6:	f7f4 ff97 	bl	80002d8 <__aeabi_dsub>
 800b3aa:	9d01      	ldr	r5, [sp, #4]
 800b3ac:	4682      	mov	sl, r0
 800b3ae:	468b      	mov	fp, r1
 800b3b0:	4649      	mov	r1, r9
 800b3b2:	4640      	mov	r0, r8
 800b3b4:	f7f5 fbf8 	bl	8000ba8 <__aeabi_d2iz>
 800b3b8:	4606      	mov	r6, r0
 800b3ba:	f7f5 f8db 	bl	8000574 <__aeabi_i2d>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	4640      	mov	r0, r8
 800b3c4:	4649      	mov	r1, r9
 800b3c6:	f7f4 ff87 	bl	80002d8 <__aeabi_dsub>
 800b3ca:	3630      	adds	r6, #48	; 0x30
 800b3cc:	f805 6b01 	strb.w	r6, [r5], #1
 800b3d0:	4652      	mov	r2, sl
 800b3d2:	465b      	mov	r3, fp
 800b3d4:	4680      	mov	r8, r0
 800b3d6:	4689      	mov	r9, r1
 800b3d8:	f7f5 fba8 	bl	8000b2c <__aeabi_dcmplt>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d163      	bne.n	800b4a8 <_dtoa_r+0x608>
 800b3e0:	4642      	mov	r2, r8
 800b3e2:	464b      	mov	r3, r9
 800b3e4:	4936      	ldr	r1, [pc, #216]	; (800b4c0 <_dtoa_r+0x620>)
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	f7f4 ff76 	bl	80002d8 <__aeabi_dsub>
 800b3ec:	4652      	mov	r2, sl
 800b3ee:	465b      	mov	r3, fp
 800b3f0:	f7f5 fb9c 	bl	8000b2c <__aeabi_dcmplt>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	f040 80b5 	bne.w	800b564 <_dtoa_r+0x6c4>
 800b3fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3fc:	429d      	cmp	r5, r3
 800b3fe:	d081      	beq.n	800b304 <_dtoa_r+0x464>
 800b400:	4b30      	ldr	r3, [pc, #192]	; (800b4c4 <_dtoa_r+0x624>)
 800b402:	2200      	movs	r2, #0
 800b404:	4650      	mov	r0, sl
 800b406:	4659      	mov	r1, fp
 800b408:	f7f5 f91e 	bl	8000648 <__aeabi_dmul>
 800b40c:	4b2d      	ldr	r3, [pc, #180]	; (800b4c4 <_dtoa_r+0x624>)
 800b40e:	4682      	mov	sl, r0
 800b410:	468b      	mov	fp, r1
 800b412:	4640      	mov	r0, r8
 800b414:	4649      	mov	r1, r9
 800b416:	2200      	movs	r2, #0
 800b418:	f7f5 f916 	bl	8000648 <__aeabi_dmul>
 800b41c:	4680      	mov	r8, r0
 800b41e:	4689      	mov	r9, r1
 800b420:	e7c6      	b.n	800b3b0 <_dtoa_r+0x510>
 800b422:	4650      	mov	r0, sl
 800b424:	4659      	mov	r1, fp
 800b426:	f7f5 f90f 	bl	8000648 <__aeabi_dmul>
 800b42a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b42c:	9d01      	ldr	r5, [sp, #4]
 800b42e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b430:	4682      	mov	sl, r0
 800b432:	468b      	mov	fp, r1
 800b434:	4649      	mov	r1, r9
 800b436:	4640      	mov	r0, r8
 800b438:	f7f5 fbb6 	bl	8000ba8 <__aeabi_d2iz>
 800b43c:	4606      	mov	r6, r0
 800b43e:	f7f5 f899 	bl	8000574 <__aeabi_i2d>
 800b442:	3630      	adds	r6, #48	; 0x30
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	4640      	mov	r0, r8
 800b44a:	4649      	mov	r1, r9
 800b44c:	f7f4 ff44 	bl	80002d8 <__aeabi_dsub>
 800b450:	f805 6b01 	strb.w	r6, [r5], #1
 800b454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b456:	429d      	cmp	r5, r3
 800b458:	4680      	mov	r8, r0
 800b45a:	4689      	mov	r9, r1
 800b45c:	f04f 0200 	mov.w	r2, #0
 800b460:	d124      	bne.n	800b4ac <_dtoa_r+0x60c>
 800b462:	4b1b      	ldr	r3, [pc, #108]	; (800b4d0 <_dtoa_r+0x630>)
 800b464:	4650      	mov	r0, sl
 800b466:	4659      	mov	r1, fp
 800b468:	f7f4 ff38 	bl	80002dc <__adddf3>
 800b46c:	4602      	mov	r2, r0
 800b46e:	460b      	mov	r3, r1
 800b470:	4640      	mov	r0, r8
 800b472:	4649      	mov	r1, r9
 800b474:	f7f5 fb78 	bl	8000b68 <__aeabi_dcmpgt>
 800b478:	2800      	cmp	r0, #0
 800b47a:	d173      	bne.n	800b564 <_dtoa_r+0x6c4>
 800b47c:	4652      	mov	r2, sl
 800b47e:	465b      	mov	r3, fp
 800b480:	4913      	ldr	r1, [pc, #76]	; (800b4d0 <_dtoa_r+0x630>)
 800b482:	2000      	movs	r0, #0
 800b484:	f7f4 ff28 	bl	80002d8 <__aeabi_dsub>
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	4640      	mov	r0, r8
 800b48e:	4649      	mov	r1, r9
 800b490:	f7f5 fb4c 	bl	8000b2c <__aeabi_dcmplt>
 800b494:	2800      	cmp	r0, #0
 800b496:	f43f af35 	beq.w	800b304 <_dtoa_r+0x464>
 800b49a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b49c:	1e6b      	subs	r3, r5, #1
 800b49e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b4a4:	2b30      	cmp	r3, #48	; 0x30
 800b4a6:	d0f8      	beq.n	800b49a <_dtoa_r+0x5fa>
 800b4a8:	9700      	str	r7, [sp, #0]
 800b4aa:	e049      	b.n	800b540 <_dtoa_r+0x6a0>
 800b4ac:	4b05      	ldr	r3, [pc, #20]	; (800b4c4 <_dtoa_r+0x624>)
 800b4ae:	f7f5 f8cb 	bl	8000648 <__aeabi_dmul>
 800b4b2:	4680      	mov	r8, r0
 800b4b4:	4689      	mov	r9, r1
 800b4b6:	e7bd      	b.n	800b434 <_dtoa_r+0x594>
 800b4b8:	0800de40 	.word	0x0800de40
 800b4bc:	0800de18 	.word	0x0800de18
 800b4c0:	3ff00000 	.word	0x3ff00000
 800b4c4:	40240000 	.word	0x40240000
 800b4c8:	401c0000 	.word	0x401c0000
 800b4cc:	40140000 	.word	0x40140000
 800b4d0:	3fe00000 	.word	0x3fe00000
 800b4d4:	9d01      	ldr	r5, [sp, #4]
 800b4d6:	4656      	mov	r6, sl
 800b4d8:	465f      	mov	r7, fp
 800b4da:	4642      	mov	r2, r8
 800b4dc:	464b      	mov	r3, r9
 800b4de:	4630      	mov	r0, r6
 800b4e0:	4639      	mov	r1, r7
 800b4e2:	f7f5 f9db 	bl	800089c <__aeabi_ddiv>
 800b4e6:	f7f5 fb5f 	bl	8000ba8 <__aeabi_d2iz>
 800b4ea:	4682      	mov	sl, r0
 800b4ec:	f7f5 f842 	bl	8000574 <__aeabi_i2d>
 800b4f0:	4642      	mov	r2, r8
 800b4f2:	464b      	mov	r3, r9
 800b4f4:	f7f5 f8a8 	bl	8000648 <__aeabi_dmul>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	4639      	mov	r1, r7
 800b500:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b504:	f7f4 fee8 	bl	80002d8 <__aeabi_dsub>
 800b508:	f805 6b01 	strb.w	r6, [r5], #1
 800b50c:	9e01      	ldr	r6, [sp, #4]
 800b50e:	9f03      	ldr	r7, [sp, #12]
 800b510:	1bae      	subs	r6, r5, r6
 800b512:	42b7      	cmp	r7, r6
 800b514:	4602      	mov	r2, r0
 800b516:	460b      	mov	r3, r1
 800b518:	d135      	bne.n	800b586 <_dtoa_r+0x6e6>
 800b51a:	f7f4 fedf 	bl	80002dc <__adddf3>
 800b51e:	4642      	mov	r2, r8
 800b520:	464b      	mov	r3, r9
 800b522:	4606      	mov	r6, r0
 800b524:	460f      	mov	r7, r1
 800b526:	f7f5 fb1f 	bl	8000b68 <__aeabi_dcmpgt>
 800b52a:	b9d0      	cbnz	r0, 800b562 <_dtoa_r+0x6c2>
 800b52c:	4642      	mov	r2, r8
 800b52e:	464b      	mov	r3, r9
 800b530:	4630      	mov	r0, r6
 800b532:	4639      	mov	r1, r7
 800b534:	f7f5 faf0 	bl	8000b18 <__aeabi_dcmpeq>
 800b538:	b110      	cbz	r0, 800b540 <_dtoa_r+0x6a0>
 800b53a:	f01a 0f01 	tst.w	sl, #1
 800b53e:	d110      	bne.n	800b562 <_dtoa_r+0x6c2>
 800b540:	4620      	mov	r0, r4
 800b542:	ee18 1a10 	vmov	r1, s16
 800b546:	f000 fd13 	bl	800bf70 <_Bfree>
 800b54a:	2300      	movs	r3, #0
 800b54c:	9800      	ldr	r0, [sp, #0]
 800b54e:	702b      	strb	r3, [r5, #0]
 800b550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b552:	3001      	adds	r0, #1
 800b554:	6018      	str	r0, [r3, #0]
 800b556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b558:	2b00      	cmp	r3, #0
 800b55a:	f43f acf1 	beq.w	800af40 <_dtoa_r+0xa0>
 800b55e:	601d      	str	r5, [r3, #0]
 800b560:	e4ee      	b.n	800af40 <_dtoa_r+0xa0>
 800b562:	9f00      	ldr	r7, [sp, #0]
 800b564:	462b      	mov	r3, r5
 800b566:	461d      	mov	r5, r3
 800b568:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b56c:	2a39      	cmp	r2, #57	; 0x39
 800b56e:	d106      	bne.n	800b57e <_dtoa_r+0x6de>
 800b570:	9a01      	ldr	r2, [sp, #4]
 800b572:	429a      	cmp	r2, r3
 800b574:	d1f7      	bne.n	800b566 <_dtoa_r+0x6c6>
 800b576:	9901      	ldr	r1, [sp, #4]
 800b578:	2230      	movs	r2, #48	; 0x30
 800b57a:	3701      	adds	r7, #1
 800b57c:	700a      	strb	r2, [r1, #0]
 800b57e:	781a      	ldrb	r2, [r3, #0]
 800b580:	3201      	adds	r2, #1
 800b582:	701a      	strb	r2, [r3, #0]
 800b584:	e790      	b.n	800b4a8 <_dtoa_r+0x608>
 800b586:	4ba6      	ldr	r3, [pc, #664]	; (800b820 <_dtoa_r+0x980>)
 800b588:	2200      	movs	r2, #0
 800b58a:	f7f5 f85d 	bl	8000648 <__aeabi_dmul>
 800b58e:	2200      	movs	r2, #0
 800b590:	2300      	movs	r3, #0
 800b592:	4606      	mov	r6, r0
 800b594:	460f      	mov	r7, r1
 800b596:	f7f5 fabf 	bl	8000b18 <__aeabi_dcmpeq>
 800b59a:	2800      	cmp	r0, #0
 800b59c:	d09d      	beq.n	800b4da <_dtoa_r+0x63a>
 800b59e:	e7cf      	b.n	800b540 <_dtoa_r+0x6a0>
 800b5a0:	9a08      	ldr	r2, [sp, #32]
 800b5a2:	2a00      	cmp	r2, #0
 800b5a4:	f000 80d7 	beq.w	800b756 <_dtoa_r+0x8b6>
 800b5a8:	9a06      	ldr	r2, [sp, #24]
 800b5aa:	2a01      	cmp	r2, #1
 800b5ac:	f300 80ba 	bgt.w	800b724 <_dtoa_r+0x884>
 800b5b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5b2:	2a00      	cmp	r2, #0
 800b5b4:	f000 80b2 	beq.w	800b71c <_dtoa_r+0x87c>
 800b5b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b5bc:	9e07      	ldr	r6, [sp, #28]
 800b5be:	9d04      	ldr	r5, [sp, #16]
 800b5c0:	9a04      	ldr	r2, [sp, #16]
 800b5c2:	441a      	add	r2, r3
 800b5c4:	9204      	str	r2, [sp, #16]
 800b5c6:	9a05      	ldr	r2, [sp, #20]
 800b5c8:	2101      	movs	r1, #1
 800b5ca:	441a      	add	r2, r3
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	9205      	str	r2, [sp, #20]
 800b5d0:	f000 fd86 	bl	800c0e0 <__i2b>
 800b5d4:	4607      	mov	r7, r0
 800b5d6:	2d00      	cmp	r5, #0
 800b5d8:	dd0c      	ble.n	800b5f4 <_dtoa_r+0x754>
 800b5da:	9b05      	ldr	r3, [sp, #20]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	dd09      	ble.n	800b5f4 <_dtoa_r+0x754>
 800b5e0:	42ab      	cmp	r3, r5
 800b5e2:	9a04      	ldr	r2, [sp, #16]
 800b5e4:	bfa8      	it	ge
 800b5e6:	462b      	movge	r3, r5
 800b5e8:	1ad2      	subs	r2, r2, r3
 800b5ea:	9204      	str	r2, [sp, #16]
 800b5ec:	9a05      	ldr	r2, [sp, #20]
 800b5ee:	1aed      	subs	r5, r5, r3
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	9305      	str	r3, [sp, #20]
 800b5f4:	9b07      	ldr	r3, [sp, #28]
 800b5f6:	b31b      	cbz	r3, 800b640 <_dtoa_r+0x7a0>
 800b5f8:	9b08      	ldr	r3, [sp, #32]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	f000 80af 	beq.w	800b75e <_dtoa_r+0x8be>
 800b600:	2e00      	cmp	r6, #0
 800b602:	dd13      	ble.n	800b62c <_dtoa_r+0x78c>
 800b604:	4639      	mov	r1, r7
 800b606:	4632      	mov	r2, r6
 800b608:	4620      	mov	r0, r4
 800b60a:	f000 fe29 	bl	800c260 <__pow5mult>
 800b60e:	ee18 2a10 	vmov	r2, s16
 800b612:	4601      	mov	r1, r0
 800b614:	4607      	mov	r7, r0
 800b616:	4620      	mov	r0, r4
 800b618:	f000 fd78 	bl	800c10c <__multiply>
 800b61c:	ee18 1a10 	vmov	r1, s16
 800b620:	4680      	mov	r8, r0
 800b622:	4620      	mov	r0, r4
 800b624:	f000 fca4 	bl	800bf70 <_Bfree>
 800b628:	ee08 8a10 	vmov	s16, r8
 800b62c:	9b07      	ldr	r3, [sp, #28]
 800b62e:	1b9a      	subs	r2, r3, r6
 800b630:	d006      	beq.n	800b640 <_dtoa_r+0x7a0>
 800b632:	ee18 1a10 	vmov	r1, s16
 800b636:	4620      	mov	r0, r4
 800b638:	f000 fe12 	bl	800c260 <__pow5mult>
 800b63c:	ee08 0a10 	vmov	s16, r0
 800b640:	2101      	movs	r1, #1
 800b642:	4620      	mov	r0, r4
 800b644:	f000 fd4c 	bl	800c0e0 <__i2b>
 800b648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	4606      	mov	r6, r0
 800b64e:	f340 8088 	ble.w	800b762 <_dtoa_r+0x8c2>
 800b652:	461a      	mov	r2, r3
 800b654:	4601      	mov	r1, r0
 800b656:	4620      	mov	r0, r4
 800b658:	f000 fe02 	bl	800c260 <__pow5mult>
 800b65c:	9b06      	ldr	r3, [sp, #24]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	4606      	mov	r6, r0
 800b662:	f340 8081 	ble.w	800b768 <_dtoa_r+0x8c8>
 800b666:	f04f 0800 	mov.w	r8, #0
 800b66a:	6933      	ldr	r3, [r6, #16]
 800b66c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b670:	6918      	ldr	r0, [r3, #16]
 800b672:	f000 fce5 	bl	800c040 <__hi0bits>
 800b676:	f1c0 0020 	rsb	r0, r0, #32
 800b67a:	9b05      	ldr	r3, [sp, #20]
 800b67c:	4418      	add	r0, r3
 800b67e:	f010 001f 	ands.w	r0, r0, #31
 800b682:	f000 8092 	beq.w	800b7aa <_dtoa_r+0x90a>
 800b686:	f1c0 0320 	rsb	r3, r0, #32
 800b68a:	2b04      	cmp	r3, #4
 800b68c:	f340 808a 	ble.w	800b7a4 <_dtoa_r+0x904>
 800b690:	f1c0 001c 	rsb	r0, r0, #28
 800b694:	9b04      	ldr	r3, [sp, #16]
 800b696:	4403      	add	r3, r0
 800b698:	9304      	str	r3, [sp, #16]
 800b69a:	9b05      	ldr	r3, [sp, #20]
 800b69c:	4403      	add	r3, r0
 800b69e:	4405      	add	r5, r0
 800b6a0:	9305      	str	r3, [sp, #20]
 800b6a2:	9b04      	ldr	r3, [sp, #16]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	dd07      	ble.n	800b6b8 <_dtoa_r+0x818>
 800b6a8:	ee18 1a10 	vmov	r1, s16
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f000 fe30 	bl	800c314 <__lshift>
 800b6b4:	ee08 0a10 	vmov	s16, r0
 800b6b8:	9b05      	ldr	r3, [sp, #20]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	dd05      	ble.n	800b6ca <_dtoa_r+0x82a>
 800b6be:	4631      	mov	r1, r6
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f000 fe26 	bl	800c314 <__lshift>
 800b6c8:	4606      	mov	r6, r0
 800b6ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d06e      	beq.n	800b7ae <_dtoa_r+0x90e>
 800b6d0:	ee18 0a10 	vmov	r0, s16
 800b6d4:	4631      	mov	r1, r6
 800b6d6:	f000 fe8d 	bl	800c3f4 <__mcmp>
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	da67      	bge.n	800b7ae <_dtoa_r+0x90e>
 800b6de:	9b00      	ldr	r3, [sp, #0]
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	ee18 1a10 	vmov	r1, s16
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	220a      	movs	r2, #10
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	f000 fc61 	bl	800bfb4 <__multadd>
 800b6f2:	9b08      	ldr	r3, [sp, #32]
 800b6f4:	ee08 0a10 	vmov	s16, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	f000 81b1 	beq.w	800ba60 <_dtoa_r+0xbc0>
 800b6fe:	2300      	movs	r3, #0
 800b700:	4639      	mov	r1, r7
 800b702:	220a      	movs	r2, #10
 800b704:	4620      	mov	r0, r4
 800b706:	f000 fc55 	bl	800bfb4 <__multadd>
 800b70a:	9b02      	ldr	r3, [sp, #8]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	4607      	mov	r7, r0
 800b710:	f300 808e 	bgt.w	800b830 <_dtoa_r+0x990>
 800b714:	9b06      	ldr	r3, [sp, #24]
 800b716:	2b02      	cmp	r3, #2
 800b718:	dc51      	bgt.n	800b7be <_dtoa_r+0x91e>
 800b71a:	e089      	b.n	800b830 <_dtoa_r+0x990>
 800b71c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b71e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b722:	e74b      	b.n	800b5bc <_dtoa_r+0x71c>
 800b724:	9b03      	ldr	r3, [sp, #12]
 800b726:	1e5e      	subs	r6, r3, #1
 800b728:	9b07      	ldr	r3, [sp, #28]
 800b72a:	42b3      	cmp	r3, r6
 800b72c:	bfbf      	itttt	lt
 800b72e:	9b07      	ldrlt	r3, [sp, #28]
 800b730:	9607      	strlt	r6, [sp, #28]
 800b732:	1af2      	sublt	r2, r6, r3
 800b734:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b736:	bfb6      	itet	lt
 800b738:	189b      	addlt	r3, r3, r2
 800b73a:	1b9e      	subge	r6, r3, r6
 800b73c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b73e:	9b03      	ldr	r3, [sp, #12]
 800b740:	bfb8      	it	lt
 800b742:	2600      	movlt	r6, #0
 800b744:	2b00      	cmp	r3, #0
 800b746:	bfb7      	itett	lt
 800b748:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b74c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b750:	1a9d      	sublt	r5, r3, r2
 800b752:	2300      	movlt	r3, #0
 800b754:	e734      	b.n	800b5c0 <_dtoa_r+0x720>
 800b756:	9e07      	ldr	r6, [sp, #28]
 800b758:	9d04      	ldr	r5, [sp, #16]
 800b75a:	9f08      	ldr	r7, [sp, #32]
 800b75c:	e73b      	b.n	800b5d6 <_dtoa_r+0x736>
 800b75e:	9a07      	ldr	r2, [sp, #28]
 800b760:	e767      	b.n	800b632 <_dtoa_r+0x792>
 800b762:	9b06      	ldr	r3, [sp, #24]
 800b764:	2b01      	cmp	r3, #1
 800b766:	dc18      	bgt.n	800b79a <_dtoa_r+0x8fa>
 800b768:	f1ba 0f00 	cmp.w	sl, #0
 800b76c:	d115      	bne.n	800b79a <_dtoa_r+0x8fa>
 800b76e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b772:	b993      	cbnz	r3, 800b79a <_dtoa_r+0x8fa>
 800b774:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b778:	0d1b      	lsrs	r3, r3, #20
 800b77a:	051b      	lsls	r3, r3, #20
 800b77c:	b183      	cbz	r3, 800b7a0 <_dtoa_r+0x900>
 800b77e:	9b04      	ldr	r3, [sp, #16]
 800b780:	3301      	adds	r3, #1
 800b782:	9304      	str	r3, [sp, #16]
 800b784:	9b05      	ldr	r3, [sp, #20]
 800b786:	3301      	adds	r3, #1
 800b788:	9305      	str	r3, [sp, #20]
 800b78a:	f04f 0801 	mov.w	r8, #1
 800b78e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b790:	2b00      	cmp	r3, #0
 800b792:	f47f af6a 	bne.w	800b66a <_dtoa_r+0x7ca>
 800b796:	2001      	movs	r0, #1
 800b798:	e76f      	b.n	800b67a <_dtoa_r+0x7da>
 800b79a:	f04f 0800 	mov.w	r8, #0
 800b79e:	e7f6      	b.n	800b78e <_dtoa_r+0x8ee>
 800b7a0:	4698      	mov	r8, r3
 800b7a2:	e7f4      	b.n	800b78e <_dtoa_r+0x8ee>
 800b7a4:	f43f af7d 	beq.w	800b6a2 <_dtoa_r+0x802>
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	301c      	adds	r0, #28
 800b7ac:	e772      	b.n	800b694 <_dtoa_r+0x7f4>
 800b7ae:	9b03      	ldr	r3, [sp, #12]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	dc37      	bgt.n	800b824 <_dtoa_r+0x984>
 800b7b4:	9b06      	ldr	r3, [sp, #24]
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	dd34      	ble.n	800b824 <_dtoa_r+0x984>
 800b7ba:	9b03      	ldr	r3, [sp, #12]
 800b7bc:	9302      	str	r3, [sp, #8]
 800b7be:	9b02      	ldr	r3, [sp, #8]
 800b7c0:	b96b      	cbnz	r3, 800b7de <_dtoa_r+0x93e>
 800b7c2:	4631      	mov	r1, r6
 800b7c4:	2205      	movs	r2, #5
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f000 fbf4 	bl	800bfb4 <__multadd>
 800b7cc:	4601      	mov	r1, r0
 800b7ce:	4606      	mov	r6, r0
 800b7d0:	ee18 0a10 	vmov	r0, s16
 800b7d4:	f000 fe0e 	bl	800c3f4 <__mcmp>
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	f73f adbb 	bgt.w	800b354 <_dtoa_r+0x4b4>
 800b7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7e0:	9d01      	ldr	r5, [sp, #4]
 800b7e2:	43db      	mvns	r3, r3
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	f04f 0800 	mov.w	r8, #0
 800b7ea:	4631      	mov	r1, r6
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f000 fbbf 	bl	800bf70 <_Bfree>
 800b7f2:	2f00      	cmp	r7, #0
 800b7f4:	f43f aea4 	beq.w	800b540 <_dtoa_r+0x6a0>
 800b7f8:	f1b8 0f00 	cmp.w	r8, #0
 800b7fc:	d005      	beq.n	800b80a <_dtoa_r+0x96a>
 800b7fe:	45b8      	cmp	r8, r7
 800b800:	d003      	beq.n	800b80a <_dtoa_r+0x96a>
 800b802:	4641      	mov	r1, r8
 800b804:	4620      	mov	r0, r4
 800b806:	f000 fbb3 	bl	800bf70 <_Bfree>
 800b80a:	4639      	mov	r1, r7
 800b80c:	4620      	mov	r0, r4
 800b80e:	f000 fbaf 	bl	800bf70 <_Bfree>
 800b812:	e695      	b.n	800b540 <_dtoa_r+0x6a0>
 800b814:	2600      	movs	r6, #0
 800b816:	4637      	mov	r7, r6
 800b818:	e7e1      	b.n	800b7de <_dtoa_r+0x93e>
 800b81a:	9700      	str	r7, [sp, #0]
 800b81c:	4637      	mov	r7, r6
 800b81e:	e599      	b.n	800b354 <_dtoa_r+0x4b4>
 800b820:	40240000 	.word	0x40240000
 800b824:	9b08      	ldr	r3, [sp, #32]
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 80ca 	beq.w	800b9c0 <_dtoa_r+0xb20>
 800b82c:	9b03      	ldr	r3, [sp, #12]
 800b82e:	9302      	str	r3, [sp, #8]
 800b830:	2d00      	cmp	r5, #0
 800b832:	dd05      	ble.n	800b840 <_dtoa_r+0x9a0>
 800b834:	4639      	mov	r1, r7
 800b836:	462a      	mov	r2, r5
 800b838:	4620      	mov	r0, r4
 800b83a:	f000 fd6b 	bl	800c314 <__lshift>
 800b83e:	4607      	mov	r7, r0
 800b840:	f1b8 0f00 	cmp.w	r8, #0
 800b844:	d05b      	beq.n	800b8fe <_dtoa_r+0xa5e>
 800b846:	6879      	ldr	r1, [r7, #4]
 800b848:	4620      	mov	r0, r4
 800b84a:	f000 fb51 	bl	800bef0 <_Balloc>
 800b84e:	4605      	mov	r5, r0
 800b850:	b928      	cbnz	r0, 800b85e <_dtoa_r+0x9be>
 800b852:	4b87      	ldr	r3, [pc, #540]	; (800ba70 <_dtoa_r+0xbd0>)
 800b854:	4602      	mov	r2, r0
 800b856:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b85a:	f7ff bb3b 	b.w	800aed4 <_dtoa_r+0x34>
 800b85e:	693a      	ldr	r2, [r7, #16]
 800b860:	3202      	adds	r2, #2
 800b862:	0092      	lsls	r2, r2, #2
 800b864:	f107 010c 	add.w	r1, r7, #12
 800b868:	300c      	adds	r0, #12
 800b86a:	f000 fb33 	bl	800bed4 <memcpy>
 800b86e:	2201      	movs	r2, #1
 800b870:	4629      	mov	r1, r5
 800b872:	4620      	mov	r0, r4
 800b874:	f000 fd4e 	bl	800c314 <__lshift>
 800b878:	9b01      	ldr	r3, [sp, #4]
 800b87a:	f103 0901 	add.w	r9, r3, #1
 800b87e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b882:	4413      	add	r3, r2
 800b884:	9305      	str	r3, [sp, #20]
 800b886:	f00a 0301 	and.w	r3, sl, #1
 800b88a:	46b8      	mov	r8, r7
 800b88c:	9304      	str	r3, [sp, #16]
 800b88e:	4607      	mov	r7, r0
 800b890:	4631      	mov	r1, r6
 800b892:	ee18 0a10 	vmov	r0, s16
 800b896:	f7ff fa77 	bl	800ad88 <quorem>
 800b89a:	4641      	mov	r1, r8
 800b89c:	9002      	str	r0, [sp, #8]
 800b89e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b8a2:	ee18 0a10 	vmov	r0, s16
 800b8a6:	f000 fda5 	bl	800c3f4 <__mcmp>
 800b8aa:	463a      	mov	r2, r7
 800b8ac:	9003      	str	r0, [sp, #12]
 800b8ae:	4631      	mov	r1, r6
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	f000 fdbb 	bl	800c42c <__mdiff>
 800b8b6:	68c2      	ldr	r2, [r0, #12]
 800b8b8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b8bc:	4605      	mov	r5, r0
 800b8be:	bb02      	cbnz	r2, 800b902 <_dtoa_r+0xa62>
 800b8c0:	4601      	mov	r1, r0
 800b8c2:	ee18 0a10 	vmov	r0, s16
 800b8c6:	f000 fd95 	bl	800c3f4 <__mcmp>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	4629      	mov	r1, r5
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	9207      	str	r2, [sp, #28]
 800b8d2:	f000 fb4d 	bl	800bf70 <_Bfree>
 800b8d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b8da:	ea43 0102 	orr.w	r1, r3, r2
 800b8de:	9b04      	ldr	r3, [sp, #16]
 800b8e0:	430b      	orrs	r3, r1
 800b8e2:	464d      	mov	r5, r9
 800b8e4:	d10f      	bne.n	800b906 <_dtoa_r+0xa66>
 800b8e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b8ea:	d02a      	beq.n	800b942 <_dtoa_r+0xaa2>
 800b8ec:	9b03      	ldr	r3, [sp, #12]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	dd02      	ble.n	800b8f8 <_dtoa_r+0xa58>
 800b8f2:	9b02      	ldr	r3, [sp, #8]
 800b8f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b8f8:	f88b a000 	strb.w	sl, [fp]
 800b8fc:	e775      	b.n	800b7ea <_dtoa_r+0x94a>
 800b8fe:	4638      	mov	r0, r7
 800b900:	e7ba      	b.n	800b878 <_dtoa_r+0x9d8>
 800b902:	2201      	movs	r2, #1
 800b904:	e7e2      	b.n	800b8cc <_dtoa_r+0xa2c>
 800b906:	9b03      	ldr	r3, [sp, #12]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	db04      	blt.n	800b916 <_dtoa_r+0xa76>
 800b90c:	9906      	ldr	r1, [sp, #24]
 800b90e:	430b      	orrs	r3, r1
 800b910:	9904      	ldr	r1, [sp, #16]
 800b912:	430b      	orrs	r3, r1
 800b914:	d122      	bne.n	800b95c <_dtoa_r+0xabc>
 800b916:	2a00      	cmp	r2, #0
 800b918:	ddee      	ble.n	800b8f8 <_dtoa_r+0xa58>
 800b91a:	ee18 1a10 	vmov	r1, s16
 800b91e:	2201      	movs	r2, #1
 800b920:	4620      	mov	r0, r4
 800b922:	f000 fcf7 	bl	800c314 <__lshift>
 800b926:	4631      	mov	r1, r6
 800b928:	ee08 0a10 	vmov	s16, r0
 800b92c:	f000 fd62 	bl	800c3f4 <__mcmp>
 800b930:	2800      	cmp	r0, #0
 800b932:	dc03      	bgt.n	800b93c <_dtoa_r+0xa9c>
 800b934:	d1e0      	bne.n	800b8f8 <_dtoa_r+0xa58>
 800b936:	f01a 0f01 	tst.w	sl, #1
 800b93a:	d0dd      	beq.n	800b8f8 <_dtoa_r+0xa58>
 800b93c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b940:	d1d7      	bne.n	800b8f2 <_dtoa_r+0xa52>
 800b942:	2339      	movs	r3, #57	; 0x39
 800b944:	f88b 3000 	strb.w	r3, [fp]
 800b948:	462b      	mov	r3, r5
 800b94a:	461d      	mov	r5, r3
 800b94c:	3b01      	subs	r3, #1
 800b94e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b952:	2a39      	cmp	r2, #57	; 0x39
 800b954:	d071      	beq.n	800ba3a <_dtoa_r+0xb9a>
 800b956:	3201      	adds	r2, #1
 800b958:	701a      	strb	r2, [r3, #0]
 800b95a:	e746      	b.n	800b7ea <_dtoa_r+0x94a>
 800b95c:	2a00      	cmp	r2, #0
 800b95e:	dd07      	ble.n	800b970 <_dtoa_r+0xad0>
 800b960:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b964:	d0ed      	beq.n	800b942 <_dtoa_r+0xaa2>
 800b966:	f10a 0301 	add.w	r3, sl, #1
 800b96a:	f88b 3000 	strb.w	r3, [fp]
 800b96e:	e73c      	b.n	800b7ea <_dtoa_r+0x94a>
 800b970:	9b05      	ldr	r3, [sp, #20]
 800b972:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b976:	4599      	cmp	r9, r3
 800b978:	d047      	beq.n	800ba0a <_dtoa_r+0xb6a>
 800b97a:	ee18 1a10 	vmov	r1, s16
 800b97e:	2300      	movs	r3, #0
 800b980:	220a      	movs	r2, #10
 800b982:	4620      	mov	r0, r4
 800b984:	f000 fb16 	bl	800bfb4 <__multadd>
 800b988:	45b8      	cmp	r8, r7
 800b98a:	ee08 0a10 	vmov	s16, r0
 800b98e:	f04f 0300 	mov.w	r3, #0
 800b992:	f04f 020a 	mov.w	r2, #10
 800b996:	4641      	mov	r1, r8
 800b998:	4620      	mov	r0, r4
 800b99a:	d106      	bne.n	800b9aa <_dtoa_r+0xb0a>
 800b99c:	f000 fb0a 	bl	800bfb4 <__multadd>
 800b9a0:	4680      	mov	r8, r0
 800b9a2:	4607      	mov	r7, r0
 800b9a4:	f109 0901 	add.w	r9, r9, #1
 800b9a8:	e772      	b.n	800b890 <_dtoa_r+0x9f0>
 800b9aa:	f000 fb03 	bl	800bfb4 <__multadd>
 800b9ae:	4639      	mov	r1, r7
 800b9b0:	4680      	mov	r8, r0
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	220a      	movs	r2, #10
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	f000 fafc 	bl	800bfb4 <__multadd>
 800b9bc:	4607      	mov	r7, r0
 800b9be:	e7f1      	b.n	800b9a4 <_dtoa_r+0xb04>
 800b9c0:	9b03      	ldr	r3, [sp, #12]
 800b9c2:	9302      	str	r3, [sp, #8]
 800b9c4:	9d01      	ldr	r5, [sp, #4]
 800b9c6:	ee18 0a10 	vmov	r0, s16
 800b9ca:	4631      	mov	r1, r6
 800b9cc:	f7ff f9dc 	bl	800ad88 <quorem>
 800b9d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b9d4:	9b01      	ldr	r3, [sp, #4]
 800b9d6:	f805 ab01 	strb.w	sl, [r5], #1
 800b9da:	1aea      	subs	r2, r5, r3
 800b9dc:	9b02      	ldr	r3, [sp, #8]
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	dd09      	ble.n	800b9f6 <_dtoa_r+0xb56>
 800b9e2:	ee18 1a10 	vmov	r1, s16
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	220a      	movs	r2, #10
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f000 fae2 	bl	800bfb4 <__multadd>
 800b9f0:	ee08 0a10 	vmov	s16, r0
 800b9f4:	e7e7      	b.n	800b9c6 <_dtoa_r+0xb26>
 800b9f6:	9b02      	ldr	r3, [sp, #8]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	bfc8      	it	gt
 800b9fc:	461d      	movgt	r5, r3
 800b9fe:	9b01      	ldr	r3, [sp, #4]
 800ba00:	bfd8      	it	le
 800ba02:	2501      	movle	r5, #1
 800ba04:	441d      	add	r5, r3
 800ba06:	f04f 0800 	mov.w	r8, #0
 800ba0a:	ee18 1a10 	vmov	r1, s16
 800ba0e:	2201      	movs	r2, #1
 800ba10:	4620      	mov	r0, r4
 800ba12:	f000 fc7f 	bl	800c314 <__lshift>
 800ba16:	4631      	mov	r1, r6
 800ba18:	ee08 0a10 	vmov	s16, r0
 800ba1c:	f000 fcea 	bl	800c3f4 <__mcmp>
 800ba20:	2800      	cmp	r0, #0
 800ba22:	dc91      	bgt.n	800b948 <_dtoa_r+0xaa8>
 800ba24:	d102      	bne.n	800ba2c <_dtoa_r+0xb8c>
 800ba26:	f01a 0f01 	tst.w	sl, #1
 800ba2a:	d18d      	bne.n	800b948 <_dtoa_r+0xaa8>
 800ba2c:	462b      	mov	r3, r5
 800ba2e:	461d      	mov	r5, r3
 800ba30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba34:	2a30      	cmp	r2, #48	; 0x30
 800ba36:	d0fa      	beq.n	800ba2e <_dtoa_r+0xb8e>
 800ba38:	e6d7      	b.n	800b7ea <_dtoa_r+0x94a>
 800ba3a:	9a01      	ldr	r2, [sp, #4]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d184      	bne.n	800b94a <_dtoa_r+0xaaa>
 800ba40:	9b00      	ldr	r3, [sp, #0]
 800ba42:	3301      	adds	r3, #1
 800ba44:	9300      	str	r3, [sp, #0]
 800ba46:	2331      	movs	r3, #49	; 0x31
 800ba48:	7013      	strb	r3, [r2, #0]
 800ba4a:	e6ce      	b.n	800b7ea <_dtoa_r+0x94a>
 800ba4c:	4b09      	ldr	r3, [pc, #36]	; (800ba74 <_dtoa_r+0xbd4>)
 800ba4e:	f7ff ba95 	b.w	800af7c <_dtoa_r+0xdc>
 800ba52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f47f aa6e 	bne.w	800af36 <_dtoa_r+0x96>
 800ba5a:	4b07      	ldr	r3, [pc, #28]	; (800ba78 <_dtoa_r+0xbd8>)
 800ba5c:	f7ff ba8e 	b.w	800af7c <_dtoa_r+0xdc>
 800ba60:	9b02      	ldr	r3, [sp, #8]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	dcae      	bgt.n	800b9c4 <_dtoa_r+0xb24>
 800ba66:	9b06      	ldr	r3, [sp, #24]
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	f73f aea8 	bgt.w	800b7be <_dtoa_r+0x91e>
 800ba6e:	e7a9      	b.n	800b9c4 <_dtoa_r+0xb24>
 800ba70:	0800dd47 	.word	0x0800dd47
 800ba74:	0800dca4 	.word	0x0800dca4
 800ba78:	0800dcc8 	.word	0x0800dcc8

0800ba7c <__sflush_r>:
 800ba7c:	898a      	ldrh	r2, [r1, #12]
 800ba7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba82:	4605      	mov	r5, r0
 800ba84:	0710      	lsls	r0, r2, #28
 800ba86:	460c      	mov	r4, r1
 800ba88:	d458      	bmi.n	800bb3c <__sflush_r+0xc0>
 800ba8a:	684b      	ldr	r3, [r1, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	dc05      	bgt.n	800ba9c <__sflush_r+0x20>
 800ba90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	dc02      	bgt.n	800ba9c <__sflush_r+0x20>
 800ba96:	2000      	movs	r0, #0
 800ba98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba9e:	2e00      	cmp	r6, #0
 800baa0:	d0f9      	beq.n	800ba96 <__sflush_r+0x1a>
 800baa2:	2300      	movs	r3, #0
 800baa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800baa8:	682f      	ldr	r7, [r5, #0]
 800baaa:	602b      	str	r3, [r5, #0]
 800baac:	d032      	beq.n	800bb14 <__sflush_r+0x98>
 800baae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bab0:	89a3      	ldrh	r3, [r4, #12]
 800bab2:	075a      	lsls	r2, r3, #29
 800bab4:	d505      	bpl.n	800bac2 <__sflush_r+0x46>
 800bab6:	6863      	ldr	r3, [r4, #4]
 800bab8:	1ac0      	subs	r0, r0, r3
 800baba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800babc:	b10b      	cbz	r3, 800bac2 <__sflush_r+0x46>
 800babe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bac0:	1ac0      	subs	r0, r0, r3
 800bac2:	2300      	movs	r3, #0
 800bac4:	4602      	mov	r2, r0
 800bac6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bac8:	6a21      	ldr	r1, [r4, #32]
 800baca:	4628      	mov	r0, r5
 800bacc:	47b0      	blx	r6
 800bace:	1c43      	adds	r3, r0, #1
 800bad0:	89a3      	ldrh	r3, [r4, #12]
 800bad2:	d106      	bne.n	800bae2 <__sflush_r+0x66>
 800bad4:	6829      	ldr	r1, [r5, #0]
 800bad6:	291d      	cmp	r1, #29
 800bad8:	d82c      	bhi.n	800bb34 <__sflush_r+0xb8>
 800bada:	4a2a      	ldr	r2, [pc, #168]	; (800bb84 <__sflush_r+0x108>)
 800badc:	40ca      	lsrs	r2, r1
 800bade:	07d6      	lsls	r6, r2, #31
 800bae0:	d528      	bpl.n	800bb34 <__sflush_r+0xb8>
 800bae2:	2200      	movs	r2, #0
 800bae4:	6062      	str	r2, [r4, #4]
 800bae6:	04d9      	lsls	r1, r3, #19
 800bae8:	6922      	ldr	r2, [r4, #16]
 800baea:	6022      	str	r2, [r4, #0]
 800baec:	d504      	bpl.n	800baf8 <__sflush_r+0x7c>
 800baee:	1c42      	adds	r2, r0, #1
 800baf0:	d101      	bne.n	800baf6 <__sflush_r+0x7a>
 800baf2:	682b      	ldr	r3, [r5, #0]
 800baf4:	b903      	cbnz	r3, 800baf8 <__sflush_r+0x7c>
 800baf6:	6560      	str	r0, [r4, #84]	; 0x54
 800baf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bafa:	602f      	str	r7, [r5, #0]
 800bafc:	2900      	cmp	r1, #0
 800bafe:	d0ca      	beq.n	800ba96 <__sflush_r+0x1a>
 800bb00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb04:	4299      	cmp	r1, r3
 800bb06:	d002      	beq.n	800bb0e <__sflush_r+0x92>
 800bb08:	4628      	mov	r0, r5
 800bb0a:	f000 fd8b 	bl	800c624 <_free_r>
 800bb0e:	2000      	movs	r0, #0
 800bb10:	6360      	str	r0, [r4, #52]	; 0x34
 800bb12:	e7c1      	b.n	800ba98 <__sflush_r+0x1c>
 800bb14:	6a21      	ldr	r1, [r4, #32]
 800bb16:	2301      	movs	r3, #1
 800bb18:	4628      	mov	r0, r5
 800bb1a:	47b0      	blx	r6
 800bb1c:	1c41      	adds	r1, r0, #1
 800bb1e:	d1c7      	bne.n	800bab0 <__sflush_r+0x34>
 800bb20:	682b      	ldr	r3, [r5, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d0c4      	beq.n	800bab0 <__sflush_r+0x34>
 800bb26:	2b1d      	cmp	r3, #29
 800bb28:	d001      	beq.n	800bb2e <__sflush_r+0xb2>
 800bb2a:	2b16      	cmp	r3, #22
 800bb2c:	d101      	bne.n	800bb32 <__sflush_r+0xb6>
 800bb2e:	602f      	str	r7, [r5, #0]
 800bb30:	e7b1      	b.n	800ba96 <__sflush_r+0x1a>
 800bb32:	89a3      	ldrh	r3, [r4, #12]
 800bb34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb38:	81a3      	strh	r3, [r4, #12]
 800bb3a:	e7ad      	b.n	800ba98 <__sflush_r+0x1c>
 800bb3c:	690f      	ldr	r7, [r1, #16]
 800bb3e:	2f00      	cmp	r7, #0
 800bb40:	d0a9      	beq.n	800ba96 <__sflush_r+0x1a>
 800bb42:	0793      	lsls	r3, r2, #30
 800bb44:	680e      	ldr	r6, [r1, #0]
 800bb46:	bf08      	it	eq
 800bb48:	694b      	ldreq	r3, [r1, #20]
 800bb4a:	600f      	str	r7, [r1, #0]
 800bb4c:	bf18      	it	ne
 800bb4e:	2300      	movne	r3, #0
 800bb50:	eba6 0807 	sub.w	r8, r6, r7
 800bb54:	608b      	str	r3, [r1, #8]
 800bb56:	f1b8 0f00 	cmp.w	r8, #0
 800bb5a:	dd9c      	ble.n	800ba96 <__sflush_r+0x1a>
 800bb5c:	6a21      	ldr	r1, [r4, #32]
 800bb5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bb60:	4643      	mov	r3, r8
 800bb62:	463a      	mov	r2, r7
 800bb64:	4628      	mov	r0, r5
 800bb66:	47b0      	blx	r6
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	dc06      	bgt.n	800bb7a <__sflush_r+0xfe>
 800bb6c:	89a3      	ldrh	r3, [r4, #12]
 800bb6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb72:	81a3      	strh	r3, [r4, #12]
 800bb74:	f04f 30ff 	mov.w	r0, #4294967295
 800bb78:	e78e      	b.n	800ba98 <__sflush_r+0x1c>
 800bb7a:	4407      	add	r7, r0
 800bb7c:	eba8 0800 	sub.w	r8, r8, r0
 800bb80:	e7e9      	b.n	800bb56 <__sflush_r+0xda>
 800bb82:	bf00      	nop
 800bb84:	20400001 	.word	0x20400001

0800bb88 <_fflush_r>:
 800bb88:	b538      	push	{r3, r4, r5, lr}
 800bb8a:	690b      	ldr	r3, [r1, #16]
 800bb8c:	4605      	mov	r5, r0
 800bb8e:	460c      	mov	r4, r1
 800bb90:	b913      	cbnz	r3, 800bb98 <_fflush_r+0x10>
 800bb92:	2500      	movs	r5, #0
 800bb94:	4628      	mov	r0, r5
 800bb96:	bd38      	pop	{r3, r4, r5, pc}
 800bb98:	b118      	cbz	r0, 800bba2 <_fflush_r+0x1a>
 800bb9a:	6983      	ldr	r3, [r0, #24]
 800bb9c:	b90b      	cbnz	r3, 800bba2 <_fflush_r+0x1a>
 800bb9e:	f000 f887 	bl	800bcb0 <__sinit>
 800bba2:	4b14      	ldr	r3, [pc, #80]	; (800bbf4 <_fflush_r+0x6c>)
 800bba4:	429c      	cmp	r4, r3
 800bba6:	d11b      	bne.n	800bbe0 <_fflush_r+0x58>
 800bba8:	686c      	ldr	r4, [r5, #4]
 800bbaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d0ef      	beq.n	800bb92 <_fflush_r+0xa>
 800bbb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bbb4:	07d0      	lsls	r0, r2, #31
 800bbb6:	d404      	bmi.n	800bbc2 <_fflush_r+0x3a>
 800bbb8:	0599      	lsls	r1, r3, #22
 800bbba:	d402      	bmi.n	800bbc2 <_fflush_r+0x3a>
 800bbbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbbe:	f000 f91a 	bl	800bdf6 <__retarget_lock_acquire_recursive>
 800bbc2:	4628      	mov	r0, r5
 800bbc4:	4621      	mov	r1, r4
 800bbc6:	f7ff ff59 	bl	800ba7c <__sflush_r>
 800bbca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbcc:	07da      	lsls	r2, r3, #31
 800bbce:	4605      	mov	r5, r0
 800bbd0:	d4e0      	bmi.n	800bb94 <_fflush_r+0xc>
 800bbd2:	89a3      	ldrh	r3, [r4, #12]
 800bbd4:	059b      	lsls	r3, r3, #22
 800bbd6:	d4dd      	bmi.n	800bb94 <_fflush_r+0xc>
 800bbd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbda:	f000 f90d 	bl	800bdf8 <__retarget_lock_release_recursive>
 800bbde:	e7d9      	b.n	800bb94 <_fflush_r+0xc>
 800bbe0:	4b05      	ldr	r3, [pc, #20]	; (800bbf8 <_fflush_r+0x70>)
 800bbe2:	429c      	cmp	r4, r3
 800bbe4:	d101      	bne.n	800bbea <_fflush_r+0x62>
 800bbe6:	68ac      	ldr	r4, [r5, #8]
 800bbe8:	e7df      	b.n	800bbaa <_fflush_r+0x22>
 800bbea:	4b04      	ldr	r3, [pc, #16]	; (800bbfc <_fflush_r+0x74>)
 800bbec:	429c      	cmp	r4, r3
 800bbee:	bf08      	it	eq
 800bbf0:	68ec      	ldreq	r4, [r5, #12]
 800bbf2:	e7da      	b.n	800bbaa <_fflush_r+0x22>
 800bbf4:	0800dd78 	.word	0x0800dd78
 800bbf8:	0800dd98 	.word	0x0800dd98
 800bbfc:	0800dd58 	.word	0x0800dd58

0800bc00 <std>:
 800bc00:	2300      	movs	r3, #0
 800bc02:	b510      	push	{r4, lr}
 800bc04:	4604      	mov	r4, r0
 800bc06:	e9c0 3300 	strd	r3, r3, [r0]
 800bc0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc0e:	6083      	str	r3, [r0, #8]
 800bc10:	8181      	strh	r1, [r0, #12]
 800bc12:	6643      	str	r3, [r0, #100]	; 0x64
 800bc14:	81c2      	strh	r2, [r0, #14]
 800bc16:	6183      	str	r3, [r0, #24]
 800bc18:	4619      	mov	r1, r3
 800bc1a:	2208      	movs	r2, #8
 800bc1c:	305c      	adds	r0, #92	; 0x5c
 800bc1e:	f7fe fad3 	bl	800a1c8 <memset>
 800bc22:	4b05      	ldr	r3, [pc, #20]	; (800bc38 <std+0x38>)
 800bc24:	6263      	str	r3, [r4, #36]	; 0x24
 800bc26:	4b05      	ldr	r3, [pc, #20]	; (800bc3c <std+0x3c>)
 800bc28:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc2a:	4b05      	ldr	r3, [pc, #20]	; (800bc40 <std+0x40>)
 800bc2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc2e:	4b05      	ldr	r3, [pc, #20]	; (800bc44 <std+0x44>)
 800bc30:	6224      	str	r4, [r4, #32]
 800bc32:	6323      	str	r3, [r4, #48]	; 0x30
 800bc34:	bd10      	pop	{r4, pc}
 800bc36:	bf00      	nop
 800bc38:	0800cd71 	.word	0x0800cd71
 800bc3c:	0800cd93 	.word	0x0800cd93
 800bc40:	0800cdcb 	.word	0x0800cdcb
 800bc44:	0800cdef 	.word	0x0800cdef

0800bc48 <_cleanup_r>:
 800bc48:	4901      	ldr	r1, [pc, #4]	; (800bc50 <_cleanup_r+0x8>)
 800bc4a:	f000 b8af 	b.w	800bdac <_fwalk_reent>
 800bc4e:	bf00      	nop
 800bc50:	0800bb89 	.word	0x0800bb89

0800bc54 <__sfmoreglue>:
 800bc54:	b570      	push	{r4, r5, r6, lr}
 800bc56:	2268      	movs	r2, #104	; 0x68
 800bc58:	1e4d      	subs	r5, r1, #1
 800bc5a:	4355      	muls	r5, r2
 800bc5c:	460e      	mov	r6, r1
 800bc5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bc62:	f000 fd4b 	bl	800c6fc <_malloc_r>
 800bc66:	4604      	mov	r4, r0
 800bc68:	b140      	cbz	r0, 800bc7c <__sfmoreglue+0x28>
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	e9c0 1600 	strd	r1, r6, [r0]
 800bc70:	300c      	adds	r0, #12
 800bc72:	60a0      	str	r0, [r4, #8]
 800bc74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc78:	f7fe faa6 	bl	800a1c8 <memset>
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	bd70      	pop	{r4, r5, r6, pc}

0800bc80 <__sfp_lock_acquire>:
 800bc80:	4801      	ldr	r0, [pc, #4]	; (800bc88 <__sfp_lock_acquire+0x8>)
 800bc82:	f000 b8b8 	b.w	800bdf6 <__retarget_lock_acquire_recursive>
 800bc86:	bf00      	nop
 800bc88:	2000064d 	.word	0x2000064d

0800bc8c <__sfp_lock_release>:
 800bc8c:	4801      	ldr	r0, [pc, #4]	; (800bc94 <__sfp_lock_release+0x8>)
 800bc8e:	f000 b8b3 	b.w	800bdf8 <__retarget_lock_release_recursive>
 800bc92:	bf00      	nop
 800bc94:	2000064d 	.word	0x2000064d

0800bc98 <__sinit_lock_acquire>:
 800bc98:	4801      	ldr	r0, [pc, #4]	; (800bca0 <__sinit_lock_acquire+0x8>)
 800bc9a:	f000 b8ac 	b.w	800bdf6 <__retarget_lock_acquire_recursive>
 800bc9e:	bf00      	nop
 800bca0:	2000064e 	.word	0x2000064e

0800bca4 <__sinit_lock_release>:
 800bca4:	4801      	ldr	r0, [pc, #4]	; (800bcac <__sinit_lock_release+0x8>)
 800bca6:	f000 b8a7 	b.w	800bdf8 <__retarget_lock_release_recursive>
 800bcaa:	bf00      	nop
 800bcac:	2000064e 	.word	0x2000064e

0800bcb0 <__sinit>:
 800bcb0:	b510      	push	{r4, lr}
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	f7ff fff0 	bl	800bc98 <__sinit_lock_acquire>
 800bcb8:	69a3      	ldr	r3, [r4, #24]
 800bcba:	b11b      	cbz	r3, 800bcc4 <__sinit+0x14>
 800bcbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcc0:	f7ff bff0 	b.w	800bca4 <__sinit_lock_release>
 800bcc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bcc8:	6523      	str	r3, [r4, #80]	; 0x50
 800bcca:	4b13      	ldr	r3, [pc, #76]	; (800bd18 <__sinit+0x68>)
 800bccc:	4a13      	ldr	r2, [pc, #76]	; (800bd1c <__sinit+0x6c>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bcd2:	42a3      	cmp	r3, r4
 800bcd4:	bf04      	itt	eq
 800bcd6:	2301      	moveq	r3, #1
 800bcd8:	61a3      	streq	r3, [r4, #24]
 800bcda:	4620      	mov	r0, r4
 800bcdc:	f000 f820 	bl	800bd20 <__sfp>
 800bce0:	6060      	str	r0, [r4, #4]
 800bce2:	4620      	mov	r0, r4
 800bce4:	f000 f81c 	bl	800bd20 <__sfp>
 800bce8:	60a0      	str	r0, [r4, #8]
 800bcea:	4620      	mov	r0, r4
 800bcec:	f000 f818 	bl	800bd20 <__sfp>
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	60e0      	str	r0, [r4, #12]
 800bcf4:	2104      	movs	r1, #4
 800bcf6:	6860      	ldr	r0, [r4, #4]
 800bcf8:	f7ff ff82 	bl	800bc00 <std>
 800bcfc:	68a0      	ldr	r0, [r4, #8]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	2109      	movs	r1, #9
 800bd02:	f7ff ff7d 	bl	800bc00 <std>
 800bd06:	68e0      	ldr	r0, [r4, #12]
 800bd08:	2202      	movs	r2, #2
 800bd0a:	2112      	movs	r1, #18
 800bd0c:	f7ff ff78 	bl	800bc00 <std>
 800bd10:	2301      	movs	r3, #1
 800bd12:	61a3      	str	r3, [r4, #24]
 800bd14:	e7d2      	b.n	800bcbc <__sinit+0xc>
 800bd16:	bf00      	nop
 800bd18:	0800dc90 	.word	0x0800dc90
 800bd1c:	0800bc49 	.word	0x0800bc49

0800bd20 <__sfp>:
 800bd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd22:	4607      	mov	r7, r0
 800bd24:	f7ff ffac 	bl	800bc80 <__sfp_lock_acquire>
 800bd28:	4b1e      	ldr	r3, [pc, #120]	; (800bda4 <__sfp+0x84>)
 800bd2a:	681e      	ldr	r6, [r3, #0]
 800bd2c:	69b3      	ldr	r3, [r6, #24]
 800bd2e:	b913      	cbnz	r3, 800bd36 <__sfp+0x16>
 800bd30:	4630      	mov	r0, r6
 800bd32:	f7ff ffbd 	bl	800bcb0 <__sinit>
 800bd36:	3648      	adds	r6, #72	; 0x48
 800bd38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bd3c:	3b01      	subs	r3, #1
 800bd3e:	d503      	bpl.n	800bd48 <__sfp+0x28>
 800bd40:	6833      	ldr	r3, [r6, #0]
 800bd42:	b30b      	cbz	r3, 800bd88 <__sfp+0x68>
 800bd44:	6836      	ldr	r6, [r6, #0]
 800bd46:	e7f7      	b.n	800bd38 <__sfp+0x18>
 800bd48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bd4c:	b9d5      	cbnz	r5, 800bd84 <__sfp+0x64>
 800bd4e:	4b16      	ldr	r3, [pc, #88]	; (800bda8 <__sfp+0x88>)
 800bd50:	60e3      	str	r3, [r4, #12]
 800bd52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bd56:	6665      	str	r5, [r4, #100]	; 0x64
 800bd58:	f000 f84c 	bl	800bdf4 <__retarget_lock_init_recursive>
 800bd5c:	f7ff ff96 	bl	800bc8c <__sfp_lock_release>
 800bd60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bd64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bd68:	6025      	str	r5, [r4, #0]
 800bd6a:	61a5      	str	r5, [r4, #24]
 800bd6c:	2208      	movs	r2, #8
 800bd6e:	4629      	mov	r1, r5
 800bd70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bd74:	f7fe fa28 	bl	800a1c8 <memset>
 800bd78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd80:	4620      	mov	r0, r4
 800bd82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd84:	3468      	adds	r4, #104	; 0x68
 800bd86:	e7d9      	b.n	800bd3c <__sfp+0x1c>
 800bd88:	2104      	movs	r1, #4
 800bd8a:	4638      	mov	r0, r7
 800bd8c:	f7ff ff62 	bl	800bc54 <__sfmoreglue>
 800bd90:	4604      	mov	r4, r0
 800bd92:	6030      	str	r0, [r6, #0]
 800bd94:	2800      	cmp	r0, #0
 800bd96:	d1d5      	bne.n	800bd44 <__sfp+0x24>
 800bd98:	f7ff ff78 	bl	800bc8c <__sfp_lock_release>
 800bd9c:	230c      	movs	r3, #12
 800bd9e:	603b      	str	r3, [r7, #0]
 800bda0:	e7ee      	b.n	800bd80 <__sfp+0x60>
 800bda2:	bf00      	nop
 800bda4:	0800dc90 	.word	0x0800dc90
 800bda8:	ffff0001 	.word	0xffff0001

0800bdac <_fwalk_reent>:
 800bdac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdb0:	4606      	mov	r6, r0
 800bdb2:	4688      	mov	r8, r1
 800bdb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bdb8:	2700      	movs	r7, #0
 800bdba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bdbe:	f1b9 0901 	subs.w	r9, r9, #1
 800bdc2:	d505      	bpl.n	800bdd0 <_fwalk_reent+0x24>
 800bdc4:	6824      	ldr	r4, [r4, #0]
 800bdc6:	2c00      	cmp	r4, #0
 800bdc8:	d1f7      	bne.n	800bdba <_fwalk_reent+0xe>
 800bdca:	4638      	mov	r0, r7
 800bdcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdd0:	89ab      	ldrh	r3, [r5, #12]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d907      	bls.n	800bde6 <_fwalk_reent+0x3a>
 800bdd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bdda:	3301      	adds	r3, #1
 800bddc:	d003      	beq.n	800bde6 <_fwalk_reent+0x3a>
 800bdde:	4629      	mov	r1, r5
 800bde0:	4630      	mov	r0, r6
 800bde2:	47c0      	blx	r8
 800bde4:	4307      	orrs	r7, r0
 800bde6:	3568      	adds	r5, #104	; 0x68
 800bde8:	e7e9      	b.n	800bdbe <_fwalk_reent+0x12>
	...

0800bdec <_localeconv_r>:
 800bdec:	4800      	ldr	r0, [pc, #0]	; (800bdf0 <_localeconv_r+0x4>)
 800bdee:	4770      	bx	lr
 800bdf0:	20000164 	.word	0x20000164

0800bdf4 <__retarget_lock_init_recursive>:
 800bdf4:	4770      	bx	lr

0800bdf6 <__retarget_lock_acquire_recursive>:
 800bdf6:	4770      	bx	lr

0800bdf8 <__retarget_lock_release_recursive>:
 800bdf8:	4770      	bx	lr

0800bdfa <__swhatbuf_r>:
 800bdfa:	b570      	push	{r4, r5, r6, lr}
 800bdfc:	460e      	mov	r6, r1
 800bdfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be02:	2900      	cmp	r1, #0
 800be04:	b096      	sub	sp, #88	; 0x58
 800be06:	4614      	mov	r4, r2
 800be08:	461d      	mov	r5, r3
 800be0a:	da08      	bge.n	800be1e <__swhatbuf_r+0x24>
 800be0c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800be10:	2200      	movs	r2, #0
 800be12:	602a      	str	r2, [r5, #0]
 800be14:	061a      	lsls	r2, r3, #24
 800be16:	d410      	bmi.n	800be3a <__swhatbuf_r+0x40>
 800be18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be1c:	e00e      	b.n	800be3c <__swhatbuf_r+0x42>
 800be1e:	466a      	mov	r2, sp
 800be20:	f001 f83c 	bl	800ce9c <_fstat_r>
 800be24:	2800      	cmp	r0, #0
 800be26:	dbf1      	blt.n	800be0c <__swhatbuf_r+0x12>
 800be28:	9a01      	ldr	r2, [sp, #4]
 800be2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800be2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800be32:	425a      	negs	r2, r3
 800be34:	415a      	adcs	r2, r3
 800be36:	602a      	str	r2, [r5, #0]
 800be38:	e7ee      	b.n	800be18 <__swhatbuf_r+0x1e>
 800be3a:	2340      	movs	r3, #64	; 0x40
 800be3c:	2000      	movs	r0, #0
 800be3e:	6023      	str	r3, [r4, #0]
 800be40:	b016      	add	sp, #88	; 0x58
 800be42:	bd70      	pop	{r4, r5, r6, pc}

0800be44 <__smakebuf_r>:
 800be44:	898b      	ldrh	r3, [r1, #12]
 800be46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be48:	079d      	lsls	r5, r3, #30
 800be4a:	4606      	mov	r6, r0
 800be4c:	460c      	mov	r4, r1
 800be4e:	d507      	bpl.n	800be60 <__smakebuf_r+0x1c>
 800be50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be54:	6023      	str	r3, [r4, #0]
 800be56:	6123      	str	r3, [r4, #16]
 800be58:	2301      	movs	r3, #1
 800be5a:	6163      	str	r3, [r4, #20]
 800be5c:	b002      	add	sp, #8
 800be5e:	bd70      	pop	{r4, r5, r6, pc}
 800be60:	ab01      	add	r3, sp, #4
 800be62:	466a      	mov	r2, sp
 800be64:	f7ff ffc9 	bl	800bdfa <__swhatbuf_r>
 800be68:	9900      	ldr	r1, [sp, #0]
 800be6a:	4605      	mov	r5, r0
 800be6c:	4630      	mov	r0, r6
 800be6e:	f000 fc45 	bl	800c6fc <_malloc_r>
 800be72:	b948      	cbnz	r0, 800be88 <__smakebuf_r+0x44>
 800be74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be78:	059a      	lsls	r2, r3, #22
 800be7a:	d4ef      	bmi.n	800be5c <__smakebuf_r+0x18>
 800be7c:	f023 0303 	bic.w	r3, r3, #3
 800be80:	f043 0302 	orr.w	r3, r3, #2
 800be84:	81a3      	strh	r3, [r4, #12]
 800be86:	e7e3      	b.n	800be50 <__smakebuf_r+0xc>
 800be88:	4b0d      	ldr	r3, [pc, #52]	; (800bec0 <__smakebuf_r+0x7c>)
 800be8a:	62b3      	str	r3, [r6, #40]	; 0x28
 800be8c:	89a3      	ldrh	r3, [r4, #12]
 800be8e:	6020      	str	r0, [r4, #0]
 800be90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be94:	81a3      	strh	r3, [r4, #12]
 800be96:	9b00      	ldr	r3, [sp, #0]
 800be98:	6163      	str	r3, [r4, #20]
 800be9a:	9b01      	ldr	r3, [sp, #4]
 800be9c:	6120      	str	r0, [r4, #16]
 800be9e:	b15b      	cbz	r3, 800beb8 <__smakebuf_r+0x74>
 800bea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bea4:	4630      	mov	r0, r6
 800bea6:	f001 f80b 	bl	800cec0 <_isatty_r>
 800beaa:	b128      	cbz	r0, 800beb8 <__smakebuf_r+0x74>
 800beac:	89a3      	ldrh	r3, [r4, #12]
 800beae:	f023 0303 	bic.w	r3, r3, #3
 800beb2:	f043 0301 	orr.w	r3, r3, #1
 800beb6:	81a3      	strh	r3, [r4, #12]
 800beb8:	89a0      	ldrh	r0, [r4, #12]
 800beba:	4305      	orrs	r5, r0
 800bebc:	81a5      	strh	r5, [r4, #12]
 800bebe:	e7cd      	b.n	800be5c <__smakebuf_r+0x18>
 800bec0:	0800bc49 	.word	0x0800bc49

0800bec4 <malloc>:
 800bec4:	4b02      	ldr	r3, [pc, #8]	; (800bed0 <malloc+0xc>)
 800bec6:	4601      	mov	r1, r0
 800bec8:	6818      	ldr	r0, [r3, #0]
 800beca:	f000 bc17 	b.w	800c6fc <_malloc_r>
 800bece:	bf00      	nop
 800bed0:	20000010 	.word	0x20000010

0800bed4 <memcpy>:
 800bed4:	440a      	add	r2, r1
 800bed6:	4291      	cmp	r1, r2
 800bed8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bedc:	d100      	bne.n	800bee0 <memcpy+0xc>
 800bede:	4770      	bx	lr
 800bee0:	b510      	push	{r4, lr}
 800bee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800beea:	4291      	cmp	r1, r2
 800beec:	d1f9      	bne.n	800bee2 <memcpy+0xe>
 800beee:	bd10      	pop	{r4, pc}

0800bef0 <_Balloc>:
 800bef0:	b570      	push	{r4, r5, r6, lr}
 800bef2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bef4:	4604      	mov	r4, r0
 800bef6:	460d      	mov	r5, r1
 800bef8:	b976      	cbnz	r6, 800bf18 <_Balloc+0x28>
 800befa:	2010      	movs	r0, #16
 800befc:	f7ff ffe2 	bl	800bec4 <malloc>
 800bf00:	4602      	mov	r2, r0
 800bf02:	6260      	str	r0, [r4, #36]	; 0x24
 800bf04:	b920      	cbnz	r0, 800bf10 <_Balloc+0x20>
 800bf06:	4b18      	ldr	r3, [pc, #96]	; (800bf68 <_Balloc+0x78>)
 800bf08:	4818      	ldr	r0, [pc, #96]	; (800bf6c <_Balloc+0x7c>)
 800bf0a:	2166      	movs	r1, #102	; 0x66
 800bf0c:	f000 ff86 	bl	800ce1c <__assert_func>
 800bf10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf14:	6006      	str	r6, [r0, #0]
 800bf16:	60c6      	str	r6, [r0, #12]
 800bf18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf1a:	68f3      	ldr	r3, [r6, #12]
 800bf1c:	b183      	cbz	r3, 800bf40 <_Balloc+0x50>
 800bf1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf26:	b9b8      	cbnz	r0, 800bf58 <_Balloc+0x68>
 800bf28:	2101      	movs	r1, #1
 800bf2a:	fa01 f605 	lsl.w	r6, r1, r5
 800bf2e:	1d72      	adds	r2, r6, #5
 800bf30:	0092      	lsls	r2, r2, #2
 800bf32:	4620      	mov	r0, r4
 800bf34:	f000 fb60 	bl	800c5f8 <_calloc_r>
 800bf38:	b160      	cbz	r0, 800bf54 <_Balloc+0x64>
 800bf3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf3e:	e00e      	b.n	800bf5e <_Balloc+0x6e>
 800bf40:	2221      	movs	r2, #33	; 0x21
 800bf42:	2104      	movs	r1, #4
 800bf44:	4620      	mov	r0, r4
 800bf46:	f000 fb57 	bl	800c5f8 <_calloc_r>
 800bf4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf4c:	60f0      	str	r0, [r6, #12]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d1e4      	bne.n	800bf1e <_Balloc+0x2e>
 800bf54:	2000      	movs	r0, #0
 800bf56:	bd70      	pop	{r4, r5, r6, pc}
 800bf58:	6802      	ldr	r2, [r0, #0]
 800bf5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf5e:	2300      	movs	r3, #0
 800bf60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf64:	e7f7      	b.n	800bf56 <_Balloc+0x66>
 800bf66:	bf00      	nop
 800bf68:	0800dcd5 	.word	0x0800dcd5
 800bf6c:	0800ddb8 	.word	0x0800ddb8

0800bf70 <_Bfree>:
 800bf70:	b570      	push	{r4, r5, r6, lr}
 800bf72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf74:	4605      	mov	r5, r0
 800bf76:	460c      	mov	r4, r1
 800bf78:	b976      	cbnz	r6, 800bf98 <_Bfree+0x28>
 800bf7a:	2010      	movs	r0, #16
 800bf7c:	f7ff ffa2 	bl	800bec4 <malloc>
 800bf80:	4602      	mov	r2, r0
 800bf82:	6268      	str	r0, [r5, #36]	; 0x24
 800bf84:	b920      	cbnz	r0, 800bf90 <_Bfree+0x20>
 800bf86:	4b09      	ldr	r3, [pc, #36]	; (800bfac <_Bfree+0x3c>)
 800bf88:	4809      	ldr	r0, [pc, #36]	; (800bfb0 <_Bfree+0x40>)
 800bf8a:	218a      	movs	r1, #138	; 0x8a
 800bf8c:	f000 ff46 	bl	800ce1c <__assert_func>
 800bf90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf94:	6006      	str	r6, [r0, #0]
 800bf96:	60c6      	str	r6, [r0, #12]
 800bf98:	b13c      	cbz	r4, 800bfaa <_Bfree+0x3a>
 800bf9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf9c:	6862      	ldr	r2, [r4, #4]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfa4:	6021      	str	r1, [r4, #0]
 800bfa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bfaa:	bd70      	pop	{r4, r5, r6, pc}
 800bfac:	0800dcd5 	.word	0x0800dcd5
 800bfb0:	0800ddb8 	.word	0x0800ddb8

0800bfb4 <__multadd>:
 800bfb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb8:	690d      	ldr	r5, [r1, #16]
 800bfba:	4607      	mov	r7, r0
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	461e      	mov	r6, r3
 800bfc0:	f101 0c14 	add.w	ip, r1, #20
 800bfc4:	2000      	movs	r0, #0
 800bfc6:	f8dc 3000 	ldr.w	r3, [ip]
 800bfca:	b299      	uxth	r1, r3
 800bfcc:	fb02 6101 	mla	r1, r2, r1, r6
 800bfd0:	0c1e      	lsrs	r6, r3, #16
 800bfd2:	0c0b      	lsrs	r3, r1, #16
 800bfd4:	fb02 3306 	mla	r3, r2, r6, r3
 800bfd8:	b289      	uxth	r1, r1
 800bfda:	3001      	adds	r0, #1
 800bfdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfe0:	4285      	cmp	r5, r0
 800bfe2:	f84c 1b04 	str.w	r1, [ip], #4
 800bfe6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfea:	dcec      	bgt.n	800bfc6 <__multadd+0x12>
 800bfec:	b30e      	cbz	r6, 800c032 <__multadd+0x7e>
 800bfee:	68a3      	ldr	r3, [r4, #8]
 800bff0:	42ab      	cmp	r3, r5
 800bff2:	dc19      	bgt.n	800c028 <__multadd+0x74>
 800bff4:	6861      	ldr	r1, [r4, #4]
 800bff6:	4638      	mov	r0, r7
 800bff8:	3101      	adds	r1, #1
 800bffa:	f7ff ff79 	bl	800bef0 <_Balloc>
 800bffe:	4680      	mov	r8, r0
 800c000:	b928      	cbnz	r0, 800c00e <__multadd+0x5a>
 800c002:	4602      	mov	r2, r0
 800c004:	4b0c      	ldr	r3, [pc, #48]	; (800c038 <__multadd+0x84>)
 800c006:	480d      	ldr	r0, [pc, #52]	; (800c03c <__multadd+0x88>)
 800c008:	21b5      	movs	r1, #181	; 0xb5
 800c00a:	f000 ff07 	bl	800ce1c <__assert_func>
 800c00e:	6922      	ldr	r2, [r4, #16]
 800c010:	3202      	adds	r2, #2
 800c012:	f104 010c 	add.w	r1, r4, #12
 800c016:	0092      	lsls	r2, r2, #2
 800c018:	300c      	adds	r0, #12
 800c01a:	f7ff ff5b 	bl	800bed4 <memcpy>
 800c01e:	4621      	mov	r1, r4
 800c020:	4638      	mov	r0, r7
 800c022:	f7ff ffa5 	bl	800bf70 <_Bfree>
 800c026:	4644      	mov	r4, r8
 800c028:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c02c:	3501      	adds	r5, #1
 800c02e:	615e      	str	r6, [r3, #20]
 800c030:	6125      	str	r5, [r4, #16]
 800c032:	4620      	mov	r0, r4
 800c034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c038:	0800dd47 	.word	0x0800dd47
 800c03c:	0800ddb8 	.word	0x0800ddb8

0800c040 <__hi0bits>:
 800c040:	0c03      	lsrs	r3, r0, #16
 800c042:	041b      	lsls	r3, r3, #16
 800c044:	b9d3      	cbnz	r3, 800c07c <__hi0bits+0x3c>
 800c046:	0400      	lsls	r0, r0, #16
 800c048:	2310      	movs	r3, #16
 800c04a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c04e:	bf04      	itt	eq
 800c050:	0200      	lsleq	r0, r0, #8
 800c052:	3308      	addeq	r3, #8
 800c054:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c058:	bf04      	itt	eq
 800c05a:	0100      	lsleq	r0, r0, #4
 800c05c:	3304      	addeq	r3, #4
 800c05e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c062:	bf04      	itt	eq
 800c064:	0080      	lsleq	r0, r0, #2
 800c066:	3302      	addeq	r3, #2
 800c068:	2800      	cmp	r0, #0
 800c06a:	db05      	blt.n	800c078 <__hi0bits+0x38>
 800c06c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c070:	f103 0301 	add.w	r3, r3, #1
 800c074:	bf08      	it	eq
 800c076:	2320      	moveq	r3, #32
 800c078:	4618      	mov	r0, r3
 800c07a:	4770      	bx	lr
 800c07c:	2300      	movs	r3, #0
 800c07e:	e7e4      	b.n	800c04a <__hi0bits+0xa>

0800c080 <__lo0bits>:
 800c080:	6803      	ldr	r3, [r0, #0]
 800c082:	f013 0207 	ands.w	r2, r3, #7
 800c086:	4601      	mov	r1, r0
 800c088:	d00b      	beq.n	800c0a2 <__lo0bits+0x22>
 800c08a:	07da      	lsls	r2, r3, #31
 800c08c:	d423      	bmi.n	800c0d6 <__lo0bits+0x56>
 800c08e:	0798      	lsls	r0, r3, #30
 800c090:	bf49      	itett	mi
 800c092:	085b      	lsrmi	r3, r3, #1
 800c094:	089b      	lsrpl	r3, r3, #2
 800c096:	2001      	movmi	r0, #1
 800c098:	600b      	strmi	r3, [r1, #0]
 800c09a:	bf5c      	itt	pl
 800c09c:	600b      	strpl	r3, [r1, #0]
 800c09e:	2002      	movpl	r0, #2
 800c0a0:	4770      	bx	lr
 800c0a2:	b298      	uxth	r0, r3
 800c0a4:	b9a8      	cbnz	r0, 800c0d2 <__lo0bits+0x52>
 800c0a6:	0c1b      	lsrs	r3, r3, #16
 800c0a8:	2010      	movs	r0, #16
 800c0aa:	b2da      	uxtb	r2, r3
 800c0ac:	b90a      	cbnz	r2, 800c0b2 <__lo0bits+0x32>
 800c0ae:	3008      	adds	r0, #8
 800c0b0:	0a1b      	lsrs	r3, r3, #8
 800c0b2:	071a      	lsls	r2, r3, #28
 800c0b4:	bf04      	itt	eq
 800c0b6:	091b      	lsreq	r3, r3, #4
 800c0b8:	3004      	addeq	r0, #4
 800c0ba:	079a      	lsls	r2, r3, #30
 800c0bc:	bf04      	itt	eq
 800c0be:	089b      	lsreq	r3, r3, #2
 800c0c0:	3002      	addeq	r0, #2
 800c0c2:	07da      	lsls	r2, r3, #31
 800c0c4:	d403      	bmi.n	800c0ce <__lo0bits+0x4e>
 800c0c6:	085b      	lsrs	r3, r3, #1
 800c0c8:	f100 0001 	add.w	r0, r0, #1
 800c0cc:	d005      	beq.n	800c0da <__lo0bits+0x5a>
 800c0ce:	600b      	str	r3, [r1, #0]
 800c0d0:	4770      	bx	lr
 800c0d2:	4610      	mov	r0, r2
 800c0d4:	e7e9      	b.n	800c0aa <__lo0bits+0x2a>
 800c0d6:	2000      	movs	r0, #0
 800c0d8:	4770      	bx	lr
 800c0da:	2020      	movs	r0, #32
 800c0dc:	4770      	bx	lr
	...

0800c0e0 <__i2b>:
 800c0e0:	b510      	push	{r4, lr}
 800c0e2:	460c      	mov	r4, r1
 800c0e4:	2101      	movs	r1, #1
 800c0e6:	f7ff ff03 	bl	800bef0 <_Balloc>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	b928      	cbnz	r0, 800c0fa <__i2b+0x1a>
 800c0ee:	4b05      	ldr	r3, [pc, #20]	; (800c104 <__i2b+0x24>)
 800c0f0:	4805      	ldr	r0, [pc, #20]	; (800c108 <__i2b+0x28>)
 800c0f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c0f6:	f000 fe91 	bl	800ce1c <__assert_func>
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	6144      	str	r4, [r0, #20]
 800c0fe:	6103      	str	r3, [r0, #16]
 800c100:	bd10      	pop	{r4, pc}
 800c102:	bf00      	nop
 800c104:	0800dd47 	.word	0x0800dd47
 800c108:	0800ddb8 	.word	0x0800ddb8

0800c10c <__multiply>:
 800c10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c110:	4691      	mov	r9, r2
 800c112:	690a      	ldr	r2, [r1, #16]
 800c114:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c118:	429a      	cmp	r2, r3
 800c11a:	bfb8      	it	lt
 800c11c:	460b      	movlt	r3, r1
 800c11e:	460c      	mov	r4, r1
 800c120:	bfbc      	itt	lt
 800c122:	464c      	movlt	r4, r9
 800c124:	4699      	movlt	r9, r3
 800c126:	6927      	ldr	r7, [r4, #16]
 800c128:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c12c:	68a3      	ldr	r3, [r4, #8]
 800c12e:	6861      	ldr	r1, [r4, #4]
 800c130:	eb07 060a 	add.w	r6, r7, sl
 800c134:	42b3      	cmp	r3, r6
 800c136:	b085      	sub	sp, #20
 800c138:	bfb8      	it	lt
 800c13a:	3101      	addlt	r1, #1
 800c13c:	f7ff fed8 	bl	800bef0 <_Balloc>
 800c140:	b930      	cbnz	r0, 800c150 <__multiply+0x44>
 800c142:	4602      	mov	r2, r0
 800c144:	4b44      	ldr	r3, [pc, #272]	; (800c258 <__multiply+0x14c>)
 800c146:	4845      	ldr	r0, [pc, #276]	; (800c25c <__multiply+0x150>)
 800c148:	f240 115d 	movw	r1, #349	; 0x15d
 800c14c:	f000 fe66 	bl	800ce1c <__assert_func>
 800c150:	f100 0514 	add.w	r5, r0, #20
 800c154:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c158:	462b      	mov	r3, r5
 800c15a:	2200      	movs	r2, #0
 800c15c:	4543      	cmp	r3, r8
 800c15e:	d321      	bcc.n	800c1a4 <__multiply+0x98>
 800c160:	f104 0314 	add.w	r3, r4, #20
 800c164:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c168:	f109 0314 	add.w	r3, r9, #20
 800c16c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c170:	9202      	str	r2, [sp, #8]
 800c172:	1b3a      	subs	r2, r7, r4
 800c174:	3a15      	subs	r2, #21
 800c176:	f022 0203 	bic.w	r2, r2, #3
 800c17a:	3204      	adds	r2, #4
 800c17c:	f104 0115 	add.w	r1, r4, #21
 800c180:	428f      	cmp	r7, r1
 800c182:	bf38      	it	cc
 800c184:	2204      	movcc	r2, #4
 800c186:	9201      	str	r2, [sp, #4]
 800c188:	9a02      	ldr	r2, [sp, #8]
 800c18a:	9303      	str	r3, [sp, #12]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d80c      	bhi.n	800c1aa <__multiply+0x9e>
 800c190:	2e00      	cmp	r6, #0
 800c192:	dd03      	ble.n	800c19c <__multiply+0x90>
 800c194:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d05a      	beq.n	800c252 <__multiply+0x146>
 800c19c:	6106      	str	r6, [r0, #16]
 800c19e:	b005      	add	sp, #20
 800c1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a4:	f843 2b04 	str.w	r2, [r3], #4
 800c1a8:	e7d8      	b.n	800c15c <__multiply+0x50>
 800c1aa:	f8b3 a000 	ldrh.w	sl, [r3]
 800c1ae:	f1ba 0f00 	cmp.w	sl, #0
 800c1b2:	d024      	beq.n	800c1fe <__multiply+0xf2>
 800c1b4:	f104 0e14 	add.w	lr, r4, #20
 800c1b8:	46a9      	mov	r9, r5
 800c1ba:	f04f 0c00 	mov.w	ip, #0
 800c1be:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c1c2:	f8d9 1000 	ldr.w	r1, [r9]
 800c1c6:	fa1f fb82 	uxth.w	fp, r2
 800c1ca:	b289      	uxth	r1, r1
 800c1cc:	fb0a 110b 	mla	r1, sl, fp, r1
 800c1d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c1d4:	f8d9 2000 	ldr.w	r2, [r9]
 800c1d8:	4461      	add	r1, ip
 800c1da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1de:	fb0a c20b 	mla	r2, sl, fp, ip
 800c1e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c1e6:	b289      	uxth	r1, r1
 800c1e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c1ec:	4577      	cmp	r7, lr
 800c1ee:	f849 1b04 	str.w	r1, [r9], #4
 800c1f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1f6:	d8e2      	bhi.n	800c1be <__multiply+0xb2>
 800c1f8:	9a01      	ldr	r2, [sp, #4]
 800c1fa:	f845 c002 	str.w	ip, [r5, r2]
 800c1fe:	9a03      	ldr	r2, [sp, #12]
 800c200:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c204:	3304      	adds	r3, #4
 800c206:	f1b9 0f00 	cmp.w	r9, #0
 800c20a:	d020      	beq.n	800c24e <__multiply+0x142>
 800c20c:	6829      	ldr	r1, [r5, #0]
 800c20e:	f104 0c14 	add.w	ip, r4, #20
 800c212:	46ae      	mov	lr, r5
 800c214:	f04f 0a00 	mov.w	sl, #0
 800c218:	f8bc b000 	ldrh.w	fp, [ip]
 800c21c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c220:	fb09 220b 	mla	r2, r9, fp, r2
 800c224:	4492      	add	sl, r2
 800c226:	b289      	uxth	r1, r1
 800c228:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c22c:	f84e 1b04 	str.w	r1, [lr], #4
 800c230:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c234:	f8be 1000 	ldrh.w	r1, [lr]
 800c238:	0c12      	lsrs	r2, r2, #16
 800c23a:	fb09 1102 	mla	r1, r9, r2, r1
 800c23e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c242:	4567      	cmp	r7, ip
 800c244:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c248:	d8e6      	bhi.n	800c218 <__multiply+0x10c>
 800c24a:	9a01      	ldr	r2, [sp, #4]
 800c24c:	50a9      	str	r1, [r5, r2]
 800c24e:	3504      	adds	r5, #4
 800c250:	e79a      	b.n	800c188 <__multiply+0x7c>
 800c252:	3e01      	subs	r6, #1
 800c254:	e79c      	b.n	800c190 <__multiply+0x84>
 800c256:	bf00      	nop
 800c258:	0800dd47 	.word	0x0800dd47
 800c25c:	0800ddb8 	.word	0x0800ddb8

0800c260 <__pow5mult>:
 800c260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c264:	4615      	mov	r5, r2
 800c266:	f012 0203 	ands.w	r2, r2, #3
 800c26a:	4606      	mov	r6, r0
 800c26c:	460f      	mov	r7, r1
 800c26e:	d007      	beq.n	800c280 <__pow5mult+0x20>
 800c270:	4c25      	ldr	r4, [pc, #148]	; (800c308 <__pow5mult+0xa8>)
 800c272:	3a01      	subs	r2, #1
 800c274:	2300      	movs	r3, #0
 800c276:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c27a:	f7ff fe9b 	bl	800bfb4 <__multadd>
 800c27e:	4607      	mov	r7, r0
 800c280:	10ad      	asrs	r5, r5, #2
 800c282:	d03d      	beq.n	800c300 <__pow5mult+0xa0>
 800c284:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c286:	b97c      	cbnz	r4, 800c2a8 <__pow5mult+0x48>
 800c288:	2010      	movs	r0, #16
 800c28a:	f7ff fe1b 	bl	800bec4 <malloc>
 800c28e:	4602      	mov	r2, r0
 800c290:	6270      	str	r0, [r6, #36]	; 0x24
 800c292:	b928      	cbnz	r0, 800c2a0 <__pow5mult+0x40>
 800c294:	4b1d      	ldr	r3, [pc, #116]	; (800c30c <__pow5mult+0xac>)
 800c296:	481e      	ldr	r0, [pc, #120]	; (800c310 <__pow5mult+0xb0>)
 800c298:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c29c:	f000 fdbe 	bl	800ce1c <__assert_func>
 800c2a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2a4:	6004      	str	r4, [r0, #0]
 800c2a6:	60c4      	str	r4, [r0, #12]
 800c2a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c2ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2b0:	b94c      	cbnz	r4, 800c2c6 <__pow5mult+0x66>
 800c2b2:	f240 2171 	movw	r1, #625	; 0x271
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f7ff ff12 	bl	800c0e0 <__i2b>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	6003      	str	r3, [r0, #0]
 800c2c6:	f04f 0900 	mov.w	r9, #0
 800c2ca:	07eb      	lsls	r3, r5, #31
 800c2cc:	d50a      	bpl.n	800c2e4 <__pow5mult+0x84>
 800c2ce:	4639      	mov	r1, r7
 800c2d0:	4622      	mov	r2, r4
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f7ff ff1a 	bl	800c10c <__multiply>
 800c2d8:	4639      	mov	r1, r7
 800c2da:	4680      	mov	r8, r0
 800c2dc:	4630      	mov	r0, r6
 800c2de:	f7ff fe47 	bl	800bf70 <_Bfree>
 800c2e2:	4647      	mov	r7, r8
 800c2e4:	106d      	asrs	r5, r5, #1
 800c2e6:	d00b      	beq.n	800c300 <__pow5mult+0xa0>
 800c2e8:	6820      	ldr	r0, [r4, #0]
 800c2ea:	b938      	cbnz	r0, 800c2fc <__pow5mult+0x9c>
 800c2ec:	4622      	mov	r2, r4
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	f7ff ff0b 	bl	800c10c <__multiply>
 800c2f6:	6020      	str	r0, [r4, #0]
 800c2f8:	f8c0 9000 	str.w	r9, [r0]
 800c2fc:	4604      	mov	r4, r0
 800c2fe:	e7e4      	b.n	800c2ca <__pow5mult+0x6a>
 800c300:	4638      	mov	r0, r7
 800c302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c306:	bf00      	nop
 800c308:	0800df08 	.word	0x0800df08
 800c30c:	0800dcd5 	.word	0x0800dcd5
 800c310:	0800ddb8 	.word	0x0800ddb8

0800c314 <__lshift>:
 800c314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c318:	460c      	mov	r4, r1
 800c31a:	6849      	ldr	r1, [r1, #4]
 800c31c:	6923      	ldr	r3, [r4, #16]
 800c31e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c322:	68a3      	ldr	r3, [r4, #8]
 800c324:	4607      	mov	r7, r0
 800c326:	4691      	mov	r9, r2
 800c328:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c32c:	f108 0601 	add.w	r6, r8, #1
 800c330:	42b3      	cmp	r3, r6
 800c332:	db0b      	blt.n	800c34c <__lshift+0x38>
 800c334:	4638      	mov	r0, r7
 800c336:	f7ff fddb 	bl	800bef0 <_Balloc>
 800c33a:	4605      	mov	r5, r0
 800c33c:	b948      	cbnz	r0, 800c352 <__lshift+0x3e>
 800c33e:	4602      	mov	r2, r0
 800c340:	4b2a      	ldr	r3, [pc, #168]	; (800c3ec <__lshift+0xd8>)
 800c342:	482b      	ldr	r0, [pc, #172]	; (800c3f0 <__lshift+0xdc>)
 800c344:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c348:	f000 fd68 	bl	800ce1c <__assert_func>
 800c34c:	3101      	adds	r1, #1
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	e7ee      	b.n	800c330 <__lshift+0x1c>
 800c352:	2300      	movs	r3, #0
 800c354:	f100 0114 	add.w	r1, r0, #20
 800c358:	f100 0210 	add.w	r2, r0, #16
 800c35c:	4618      	mov	r0, r3
 800c35e:	4553      	cmp	r3, sl
 800c360:	db37      	blt.n	800c3d2 <__lshift+0xbe>
 800c362:	6920      	ldr	r0, [r4, #16]
 800c364:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c368:	f104 0314 	add.w	r3, r4, #20
 800c36c:	f019 091f 	ands.w	r9, r9, #31
 800c370:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c374:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c378:	d02f      	beq.n	800c3da <__lshift+0xc6>
 800c37a:	f1c9 0e20 	rsb	lr, r9, #32
 800c37e:	468a      	mov	sl, r1
 800c380:	f04f 0c00 	mov.w	ip, #0
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	fa02 f209 	lsl.w	r2, r2, r9
 800c38a:	ea42 020c 	orr.w	r2, r2, ip
 800c38e:	f84a 2b04 	str.w	r2, [sl], #4
 800c392:	f853 2b04 	ldr.w	r2, [r3], #4
 800c396:	4298      	cmp	r0, r3
 800c398:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c39c:	d8f2      	bhi.n	800c384 <__lshift+0x70>
 800c39e:	1b03      	subs	r3, r0, r4
 800c3a0:	3b15      	subs	r3, #21
 800c3a2:	f023 0303 	bic.w	r3, r3, #3
 800c3a6:	3304      	adds	r3, #4
 800c3a8:	f104 0215 	add.w	r2, r4, #21
 800c3ac:	4290      	cmp	r0, r2
 800c3ae:	bf38      	it	cc
 800c3b0:	2304      	movcc	r3, #4
 800c3b2:	f841 c003 	str.w	ip, [r1, r3]
 800c3b6:	f1bc 0f00 	cmp.w	ip, #0
 800c3ba:	d001      	beq.n	800c3c0 <__lshift+0xac>
 800c3bc:	f108 0602 	add.w	r6, r8, #2
 800c3c0:	3e01      	subs	r6, #1
 800c3c2:	4638      	mov	r0, r7
 800c3c4:	612e      	str	r6, [r5, #16]
 800c3c6:	4621      	mov	r1, r4
 800c3c8:	f7ff fdd2 	bl	800bf70 <_Bfree>
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	e7c1      	b.n	800c35e <__lshift+0x4a>
 800c3da:	3904      	subs	r1, #4
 800c3dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3e4:	4298      	cmp	r0, r3
 800c3e6:	d8f9      	bhi.n	800c3dc <__lshift+0xc8>
 800c3e8:	e7ea      	b.n	800c3c0 <__lshift+0xac>
 800c3ea:	bf00      	nop
 800c3ec:	0800dd47 	.word	0x0800dd47
 800c3f0:	0800ddb8 	.word	0x0800ddb8

0800c3f4 <__mcmp>:
 800c3f4:	b530      	push	{r4, r5, lr}
 800c3f6:	6902      	ldr	r2, [r0, #16]
 800c3f8:	690c      	ldr	r4, [r1, #16]
 800c3fa:	1b12      	subs	r2, r2, r4
 800c3fc:	d10e      	bne.n	800c41c <__mcmp+0x28>
 800c3fe:	f100 0314 	add.w	r3, r0, #20
 800c402:	3114      	adds	r1, #20
 800c404:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c408:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c40c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c410:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c414:	42a5      	cmp	r5, r4
 800c416:	d003      	beq.n	800c420 <__mcmp+0x2c>
 800c418:	d305      	bcc.n	800c426 <__mcmp+0x32>
 800c41a:	2201      	movs	r2, #1
 800c41c:	4610      	mov	r0, r2
 800c41e:	bd30      	pop	{r4, r5, pc}
 800c420:	4283      	cmp	r3, r0
 800c422:	d3f3      	bcc.n	800c40c <__mcmp+0x18>
 800c424:	e7fa      	b.n	800c41c <__mcmp+0x28>
 800c426:	f04f 32ff 	mov.w	r2, #4294967295
 800c42a:	e7f7      	b.n	800c41c <__mcmp+0x28>

0800c42c <__mdiff>:
 800c42c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c430:	460c      	mov	r4, r1
 800c432:	4606      	mov	r6, r0
 800c434:	4611      	mov	r1, r2
 800c436:	4620      	mov	r0, r4
 800c438:	4690      	mov	r8, r2
 800c43a:	f7ff ffdb 	bl	800c3f4 <__mcmp>
 800c43e:	1e05      	subs	r5, r0, #0
 800c440:	d110      	bne.n	800c464 <__mdiff+0x38>
 800c442:	4629      	mov	r1, r5
 800c444:	4630      	mov	r0, r6
 800c446:	f7ff fd53 	bl	800bef0 <_Balloc>
 800c44a:	b930      	cbnz	r0, 800c45a <__mdiff+0x2e>
 800c44c:	4b3a      	ldr	r3, [pc, #232]	; (800c538 <__mdiff+0x10c>)
 800c44e:	4602      	mov	r2, r0
 800c450:	f240 2132 	movw	r1, #562	; 0x232
 800c454:	4839      	ldr	r0, [pc, #228]	; (800c53c <__mdiff+0x110>)
 800c456:	f000 fce1 	bl	800ce1c <__assert_func>
 800c45a:	2301      	movs	r3, #1
 800c45c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c464:	bfa4      	itt	ge
 800c466:	4643      	movge	r3, r8
 800c468:	46a0      	movge	r8, r4
 800c46a:	4630      	mov	r0, r6
 800c46c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c470:	bfa6      	itte	ge
 800c472:	461c      	movge	r4, r3
 800c474:	2500      	movge	r5, #0
 800c476:	2501      	movlt	r5, #1
 800c478:	f7ff fd3a 	bl	800bef0 <_Balloc>
 800c47c:	b920      	cbnz	r0, 800c488 <__mdiff+0x5c>
 800c47e:	4b2e      	ldr	r3, [pc, #184]	; (800c538 <__mdiff+0x10c>)
 800c480:	4602      	mov	r2, r0
 800c482:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c486:	e7e5      	b.n	800c454 <__mdiff+0x28>
 800c488:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c48c:	6926      	ldr	r6, [r4, #16]
 800c48e:	60c5      	str	r5, [r0, #12]
 800c490:	f104 0914 	add.w	r9, r4, #20
 800c494:	f108 0514 	add.w	r5, r8, #20
 800c498:	f100 0e14 	add.w	lr, r0, #20
 800c49c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c4a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c4a4:	f108 0210 	add.w	r2, r8, #16
 800c4a8:	46f2      	mov	sl, lr
 800c4aa:	2100      	movs	r1, #0
 800c4ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800c4b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c4b4:	fa1f f883 	uxth.w	r8, r3
 800c4b8:	fa11 f18b 	uxtah	r1, r1, fp
 800c4bc:	0c1b      	lsrs	r3, r3, #16
 800c4be:	eba1 0808 	sub.w	r8, r1, r8
 800c4c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c4c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c4ca:	fa1f f888 	uxth.w	r8, r8
 800c4ce:	1419      	asrs	r1, r3, #16
 800c4d0:	454e      	cmp	r6, r9
 800c4d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c4d6:	f84a 3b04 	str.w	r3, [sl], #4
 800c4da:	d8e7      	bhi.n	800c4ac <__mdiff+0x80>
 800c4dc:	1b33      	subs	r3, r6, r4
 800c4de:	3b15      	subs	r3, #21
 800c4e0:	f023 0303 	bic.w	r3, r3, #3
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	3415      	adds	r4, #21
 800c4e8:	42a6      	cmp	r6, r4
 800c4ea:	bf38      	it	cc
 800c4ec:	2304      	movcc	r3, #4
 800c4ee:	441d      	add	r5, r3
 800c4f0:	4473      	add	r3, lr
 800c4f2:	469e      	mov	lr, r3
 800c4f4:	462e      	mov	r6, r5
 800c4f6:	4566      	cmp	r6, ip
 800c4f8:	d30e      	bcc.n	800c518 <__mdiff+0xec>
 800c4fa:	f10c 0203 	add.w	r2, ip, #3
 800c4fe:	1b52      	subs	r2, r2, r5
 800c500:	f022 0203 	bic.w	r2, r2, #3
 800c504:	3d03      	subs	r5, #3
 800c506:	45ac      	cmp	ip, r5
 800c508:	bf38      	it	cc
 800c50a:	2200      	movcc	r2, #0
 800c50c:	441a      	add	r2, r3
 800c50e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c512:	b17b      	cbz	r3, 800c534 <__mdiff+0x108>
 800c514:	6107      	str	r7, [r0, #16]
 800c516:	e7a3      	b.n	800c460 <__mdiff+0x34>
 800c518:	f856 8b04 	ldr.w	r8, [r6], #4
 800c51c:	fa11 f288 	uxtah	r2, r1, r8
 800c520:	1414      	asrs	r4, r2, #16
 800c522:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c526:	b292      	uxth	r2, r2
 800c528:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c52c:	f84e 2b04 	str.w	r2, [lr], #4
 800c530:	1421      	asrs	r1, r4, #16
 800c532:	e7e0      	b.n	800c4f6 <__mdiff+0xca>
 800c534:	3f01      	subs	r7, #1
 800c536:	e7ea      	b.n	800c50e <__mdiff+0xe2>
 800c538:	0800dd47 	.word	0x0800dd47
 800c53c:	0800ddb8 	.word	0x0800ddb8

0800c540 <__d2b>:
 800c540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c544:	4689      	mov	r9, r1
 800c546:	2101      	movs	r1, #1
 800c548:	ec57 6b10 	vmov	r6, r7, d0
 800c54c:	4690      	mov	r8, r2
 800c54e:	f7ff fccf 	bl	800bef0 <_Balloc>
 800c552:	4604      	mov	r4, r0
 800c554:	b930      	cbnz	r0, 800c564 <__d2b+0x24>
 800c556:	4602      	mov	r2, r0
 800c558:	4b25      	ldr	r3, [pc, #148]	; (800c5f0 <__d2b+0xb0>)
 800c55a:	4826      	ldr	r0, [pc, #152]	; (800c5f4 <__d2b+0xb4>)
 800c55c:	f240 310a 	movw	r1, #778	; 0x30a
 800c560:	f000 fc5c 	bl	800ce1c <__assert_func>
 800c564:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c568:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c56c:	bb35      	cbnz	r5, 800c5bc <__d2b+0x7c>
 800c56e:	2e00      	cmp	r6, #0
 800c570:	9301      	str	r3, [sp, #4]
 800c572:	d028      	beq.n	800c5c6 <__d2b+0x86>
 800c574:	4668      	mov	r0, sp
 800c576:	9600      	str	r6, [sp, #0]
 800c578:	f7ff fd82 	bl	800c080 <__lo0bits>
 800c57c:	9900      	ldr	r1, [sp, #0]
 800c57e:	b300      	cbz	r0, 800c5c2 <__d2b+0x82>
 800c580:	9a01      	ldr	r2, [sp, #4]
 800c582:	f1c0 0320 	rsb	r3, r0, #32
 800c586:	fa02 f303 	lsl.w	r3, r2, r3
 800c58a:	430b      	orrs	r3, r1
 800c58c:	40c2      	lsrs	r2, r0
 800c58e:	6163      	str	r3, [r4, #20]
 800c590:	9201      	str	r2, [sp, #4]
 800c592:	9b01      	ldr	r3, [sp, #4]
 800c594:	61a3      	str	r3, [r4, #24]
 800c596:	2b00      	cmp	r3, #0
 800c598:	bf14      	ite	ne
 800c59a:	2202      	movne	r2, #2
 800c59c:	2201      	moveq	r2, #1
 800c59e:	6122      	str	r2, [r4, #16]
 800c5a0:	b1d5      	cbz	r5, 800c5d8 <__d2b+0x98>
 800c5a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c5a6:	4405      	add	r5, r0
 800c5a8:	f8c9 5000 	str.w	r5, [r9]
 800c5ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c5b0:	f8c8 0000 	str.w	r0, [r8]
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	b003      	add	sp, #12
 800c5b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5c0:	e7d5      	b.n	800c56e <__d2b+0x2e>
 800c5c2:	6161      	str	r1, [r4, #20]
 800c5c4:	e7e5      	b.n	800c592 <__d2b+0x52>
 800c5c6:	a801      	add	r0, sp, #4
 800c5c8:	f7ff fd5a 	bl	800c080 <__lo0bits>
 800c5cc:	9b01      	ldr	r3, [sp, #4]
 800c5ce:	6163      	str	r3, [r4, #20]
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	6122      	str	r2, [r4, #16]
 800c5d4:	3020      	adds	r0, #32
 800c5d6:	e7e3      	b.n	800c5a0 <__d2b+0x60>
 800c5d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c5e0:	f8c9 0000 	str.w	r0, [r9]
 800c5e4:	6918      	ldr	r0, [r3, #16]
 800c5e6:	f7ff fd2b 	bl	800c040 <__hi0bits>
 800c5ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5ee:	e7df      	b.n	800c5b0 <__d2b+0x70>
 800c5f0:	0800dd47 	.word	0x0800dd47
 800c5f4:	0800ddb8 	.word	0x0800ddb8

0800c5f8 <_calloc_r>:
 800c5f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5fa:	fba1 2402 	umull	r2, r4, r1, r2
 800c5fe:	b94c      	cbnz	r4, 800c614 <_calloc_r+0x1c>
 800c600:	4611      	mov	r1, r2
 800c602:	9201      	str	r2, [sp, #4]
 800c604:	f000 f87a 	bl	800c6fc <_malloc_r>
 800c608:	9a01      	ldr	r2, [sp, #4]
 800c60a:	4605      	mov	r5, r0
 800c60c:	b930      	cbnz	r0, 800c61c <_calloc_r+0x24>
 800c60e:	4628      	mov	r0, r5
 800c610:	b003      	add	sp, #12
 800c612:	bd30      	pop	{r4, r5, pc}
 800c614:	220c      	movs	r2, #12
 800c616:	6002      	str	r2, [r0, #0]
 800c618:	2500      	movs	r5, #0
 800c61a:	e7f8      	b.n	800c60e <_calloc_r+0x16>
 800c61c:	4621      	mov	r1, r4
 800c61e:	f7fd fdd3 	bl	800a1c8 <memset>
 800c622:	e7f4      	b.n	800c60e <_calloc_r+0x16>

0800c624 <_free_r>:
 800c624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c626:	2900      	cmp	r1, #0
 800c628:	d044      	beq.n	800c6b4 <_free_r+0x90>
 800c62a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c62e:	9001      	str	r0, [sp, #4]
 800c630:	2b00      	cmp	r3, #0
 800c632:	f1a1 0404 	sub.w	r4, r1, #4
 800c636:	bfb8      	it	lt
 800c638:	18e4      	addlt	r4, r4, r3
 800c63a:	f000 fc8f 	bl	800cf5c <__malloc_lock>
 800c63e:	4a1e      	ldr	r2, [pc, #120]	; (800c6b8 <_free_r+0x94>)
 800c640:	9801      	ldr	r0, [sp, #4]
 800c642:	6813      	ldr	r3, [r2, #0]
 800c644:	b933      	cbnz	r3, 800c654 <_free_r+0x30>
 800c646:	6063      	str	r3, [r4, #4]
 800c648:	6014      	str	r4, [r2, #0]
 800c64a:	b003      	add	sp, #12
 800c64c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c650:	f000 bc8a 	b.w	800cf68 <__malloc_unlock>
 800c654:	42a3      	cmp	r3, r4
 800c656:	d908      	bls.n	800c66a <_free_r+0x46>
 800c658:	6825      	ldr	r5, [r4, #0]
 800c65a:	1961      	adds	r1, r4, r5
 800c65c:	428b      	cmp	r3, r1
 800c65e:	bf01      	itttt	eq
 800c660:	6819      	ldreq	r1, [r3, #0]
 800c662:	685b      	ldreq	r3, [r3, #4]
 800c664:	1949      	addeq	r1, r1, r5
 800c666:	6021      	streq	r1, [r4, #0]
 800c668:	e7ed      	b.n	800c646 <_free_r+0x22>
 800c66a:	461a      	mov	r2, r3
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	b10b      	cbz	r3, 800c674 <_free_r+0x50>
 800c670:	42a3      	cmp	r3, r4
 800c672:	d9fa      	bls.n	800c66a <_free_r+0x46>
 800c674:	6811      	ldr	r1, [r2, #0]
 800c676:	1855      	adds	r5, r2, r1
 800c678:	42a5      	cmp	r5, r4
 800c67a:	d10b      	bne.n	800c694 <_free_r+0x70>
 800c67c:	6824      	ldr	r4, [r4, #0]
 800c67e:	4421      	add	r1, r4
 800c680:	1854      	adds	r4, r2, r1
 800c682:	42a3      	cmp	r3, r4
 800c684:	6011      	str	r1, [r2, #0]
 800c686:	d1e0      	bne.n	800c64a <_free_r+0x26>
 800c688:	681c      	ldr	r4, [r3, #0]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	6053      	str	r3, [r2, #4]
 800c68e:	4421      	add	r1, r4
 800c690:	6011      	str	r1, [r2, #0]
 800c692:	e7da      	b.n	800c64a <_free_r+0x26>
 800c694:	d902      	bls.n	800c69c <_free_r+0x78>
 800c696:	230c      	movs	r3, #12
 800c698:	6003      	str	r3, [r0, #0]
 800c69a:	e7d6      	b.n	800c64a <_free_r+0x26>
 800c69c:	6825      	ldr	r5, [r4, #0]
 800c69e:	1961      	adds	r1, r4, r5
 800c6a0:	428b      	cmp	r3, r1
 800c6a2:	bf04      	itt	eq
 800c6a4:	6819      	ldreq	r1, [r3, #0]
 800c6a6:	685b      	ldreq	r3, [r3, #4]
 800c6a8:	6063      	str	r3, [r4, #4]
 800c6aa:	bf04      	itt	eq
 800c6ac:	1949      	addeq	r1, r1, r5
 800c6ae:	6021      	streq	r1, [r4, #0]
 800c6b0:	6054      	str	r4, [r2, #4]
 800c6b2:	e7ca      	b.n	800c64a <_free_r+0x26>
 800c6b4:	b003      	add	sp, #12
 800c6b6:	bd30      	pop	{r4, r5, pc}
 800c6b8:	20000650 	.word	0x20000650

0800c6bc <sbrk_aligned>:
 800c6bc:	b570      	push	{r4, r5, r6, lr}
 800c6be:	4e0e      	ldr	r6, [pc, #56]	; (800c6f8 <sbrk_aligned+0x3c>)
 800c6c0:	460c      	mov	r4, r1
 800c6c2:	6831      	ldr	r1, [r6, #0]
 800c6c4:	4605      	mov	r5, r0
 800c6c6:	b911      	cbnz	r1, 800c6ce <sbrk_aligned+0x12>
 800c6c8:	f000 fb42 	bl	800cd50 <_sbrk_r>
 800c6cc:	6030      	str	r0, [r6, #0]
 800c6ce:	4621      	mov	r1, r4
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	f000 fb3d 	bl	800cd50 <_sbrk_r>
 800c6d6:	1c43      	adds	r3, r0, #1
 800c6d8:	d00a      	beq.n	800c6f0 <sbrk_aligned+0x34>
 800c6da:	1cc4      	adds	r4, r0, #3
 800c6dc:	f024 0403 	bic.w	r4, r4, #3
 800c6e0:	42a0      	cmp	r0, r4
 800c6e2:	d007      	beq.n	800c6f4 <sbrk_aligned+0x38>
 800c6e4:	1a21      	subs	r1, r4, r0
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	f000 fb32 	bl	800cd50 <_sbrk_r>
 800c6ec:	3001      	adds	r0, #1
 800c6ee:	d101      	bne.n	800c6f4 <sbrk_aligned+0x38>
 800c6f0:	f04f 34ff 	mov.w	r4, #4294967295
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	bd70      	pop	{r4, r5, r6, pc}
 800c6f8:	20000654 	.word	0x20000654

0800c6fc <_malloc_r>:
 800c6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c700:	1ccd      	adds	r5, r1, #3
 800c702:	f025 0503 	bic.w	r5, r5, #3
 800c706:	3508      	adds	r5, #8
 800c708:	2d0c      	cmp	r5, #12
 800c70a:	bf38      	it	cc
 800c70c:	250c      	movcc	r5, #12
 800c70e:	2d00      	cmp	r5, #0
 800c710:	4607      	mov	r7, r0
 800c712:	db01      	blt.n	800c718 <_malloc_r+0x1c>
 800c714:	42a9      	cmp	r1, r5
 800c716:	d905      	bls.n	800c724 <_malloc_r+0x28>
 800c718:	230c      	movs	r3, #12
 800c71a:	603b      	str	r3, [r7, #0]
 800c71c:	2600      	movs	r6, #0
 800c71e:	4630      	mov	r0, r6
 800c720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c724:	4e2e      	ldr	r6, [pc, #184]	; (800c7e0 <_malloc_r+0xe4>)
 800c726:	f000 fc19 	bl	800cf5c <__malloc_lock>
 800c72a:	6833      	ldr	r3, [r6, #0]
 800c72c:	461c      	mov	r4, r3
 800c72e:	bb34      	cbnz	r4, 800c77e <_malloc_r+0x82>
 800c730:	4629      	mov	r1, r5
 800c732:	4638      	mov	r0, r7
 800c734:	f7ff ffc2 	bl	800c6bc <sbrk_aligned>
 800c738:	1c43      	adds	r3, r0, #1
 800c73a:	4604      	mov	r4, r0
 800c73c:	d14d      	bne.n	800c7da <_malloc_r+0xde>
 800c73e:	6834      	ldr	r4, [r6, #0]
 800c740:	4626      	mov	r6, r4
 800c742:	2e00      	cmp	r6, #0
 800c744:	d140      	bne.n	800c7c8 <_malloc_r+0xcc>
 800c746:	6823      	ldr	r3, [r4, #0]
 800c748:	4631      	mov	r1, r6
 800c74a:	4638      	mov	r0, r7
 800c74c:	eb04 0803 	add.w	r8, r4, r3
 800c750:	f000 fafe 	bl	800cd50 <_sbrk_r>
 800c754:	4580      	cmp	r8, r0
 800c756:	d13a      	bne.n	800c7ce <_malloc_r+0xd2>
 800c758:	6821      	ldr	r1, [r4, #0]
 800c75a:	3503      	adds	r5, #3
 800c75c:	1a6d      	subs	r5, r5, r1
 800c75e:	f025 0503 	bic.w	r5, r5, #3
 800c762:	3508      	adds	r5, #8
 800c764:	2d0c      	cmp	r5, #12
 800c766:	bf38      	it	cc
 800c768:	250c      	movcc	r5, #12
 800c76a:	4629      	mov	r1, r5
 800c76c:	4638      	mov	r0, r7
 800c76e:	f7ff ffa5 	bl	800c6bc <sbrk_aligned>
 800c772:	3001      	adds	r0, #1
 800c774:	d02b      	beq.n	800c7ce <_malloc_r+0xd2>
 800c776:	6823      	ldr	r3, [r4, #0]
 800c778:	442b      	add	r3, r5
 800c77a:	6023      	str	r3, [r4, #0]
 800c77c:	e00e      	b.n	800c79c <_malloc_r+0xa0>
 800c77e:	6822      	ldr	r2, [r4, #0]
 800c780:	1b52      	subs	r2, r2, r5
 800c782:	d41e      	bmi.n	800c7c2 <_malloc_r+0xc6>
 800c784:	2a0b      	cmp	r2, #11
 800c786:	d916      	bls.n	800c7b6 <_malloc_r+0xba>
 800c788:	1961      	adds	r1, r4, r5
 800c78a:	42a3      	cmp	r3, r4
 800c78c:	6025      	str	r5, [r4, #0]
 800c78e:	bf18      	it	ne
 800c790:	6059      	strne	r1, [r3, #4]
 800c792:	6863      	ldr	r3, [r4, #4]
 800c794:	bf08      	it	eq
 800c796:	6031      	streq	r1, [r6, #0]
 800c798:	5162      	str	r2, [r4, r5]
 800c79a:	604b      	str	r3, [r1, #4]
 800c79c:	4638      	mov	r0, r7
 800c79e:	f104 060b 	add.w	r6, r4, #11
 800c7a2:	f000 fbe1 	bl	800cf68 <__malloc_unlock>
 800c7a6:	f026 0607 	bic.w	r6, r6, #7
 800c7aa:	1d23      	adds	r3, r4, #4
 800c7ac:	1af2      	subs	r2, r6, r3
 800c7ae:	d0b6      	beq.n	800c71e <_malloc_r+0x22>
 800c7b0:	1b9b      	subs	r3, r3, r6
 800c7b2:	50a3      	str	r3, [r4, r2]
 800c7b4:	e7b3      	b.n	800c71e <_malloc_r+0x22>
 800c7b6:	6862      	ldr	r2, [r4, #4]
 800c7b8:	42a3      	cmp	r3, r4
 800c7ba:	bf0c      	ite	eq
 800c7bc:	6032      	streq	r2, [r6, #0]
 800c7be:	605a      	strne	r2, [r3, #4]
 800c7c0:	e7ec      	b.n	800c79c <_malloc_r+0xa0>
 800c7c2:	4623      	mov	r3, r4
 800c7c4:	6864      	ldr	r4, [r4, #4]
 800c7c6:	e7b2      	b.n	800c72e <_malloc_r+0x32>
 800c7c8:	4634      	mov	r4, r6
 800c7ca:	6876      	ldr	r6, [r6, #4]
 800c7cc:	e7b9      	b.n	800c742 <_malloc_r+0x46>
 800c7ce:	230c      	movs	r3, #12
 800c7d0:	603b      	str	r3, [r7, #0]
 800c7d2:	4638      	mov	r0, r7
 800c7d4:	f000 fbc8 	bl	800cf68 <__malloc_unlock>
 800c7d8:	e7a1      	b.n	800c71e <_malloc_r+0x22>
 800c7da:	6025      	str	r5, [r4, #0]
 800c7dc:	e7de      	b.n	800c79c <_malloc_r+0xa0>
 800c7de:	bf00      	nop
 800c7e0:	20000650 	.word	0x20000650

0800c7e4 <__ssputs_r>:
 800c7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7e8:	688e      	ldr	r6, [r1, #8]
 800c7ea:	429e      	cmp	r6, r3
 800c7ec:	4682      	mov	sl, r0
 800c7ee:	460c      	mov	r4, r1
 800c7f0:	4690      	mov	r8, r2
 800c7f2:	461f      	mov	r7, r3
 800c7f4:	d838      	bhi.n	800c868 <__ssputs_r+0x84>
 800c7f6:	898a      	ldrh	r2, [r1, #12]
 800c7f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7fc:	d032      	beq.n	800c864 <__ssputs_r+0x80>
 800c7fe:	6825      	ldr	r5, [r4, #0]
 800c800:	6909      	ldr	r1, [r1, #16]
 800c802:	eba5 0901 	sub.w	r9, r5, r1
 800c806:	6965      	ldr	r5, [r4, #20]
 800c808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c80c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c810:	3301      	adds	r3, #1
 800c812:	444b      	add	r3, r9
 800c814:	106d      	asrs	r5, r5, #1
 800c816:	429d      	cmp	r5, r3
 800c818:	bf38      	it	cc
 800c81a:	461d      	movcc	r5, r3
 800c81c:	0553      	lsls	r3, r2, #21
 800c81e:	d531      	bpl.n	800c884 <__ssputs_r+0xa0>
 800c820:	4629      	mov	r1, r5
 800c822:	f7ff ff6b 	bl	800c6fc <_malloc_r>
 800c826:	4606      	mov	r6, r0
 800c828:	b950      	cbnz	r0, 800c840 <__ssputs_r+0x5c>
 800c82a:	230c      	movs	r3, #12
 800c82c:	f8ca 3000 	str.w	r3, [sl]
 800c830:	89a3      	ldrh	r3, [r4, #12]
 800c832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c836:	81a3      	strh	r3, [r4, #12]
 800c838:	f04f 30ff 	mov.w	r0, #4294967295
 800c83c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c840:	6921      	ldr	r1, [r4, #16]
 800c842:	464a      	mov	r2, r9
 800c844:	f7ff fb46 	bl	800bed4 <memcpy>
 800c848:	89a3      	ldrh	r3, [r4, #12]
 800c84a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c84e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c852:	81a3      	strh	r3, [r4, #12]
 800c854:	6126      	str	r6, [r4, #16]
 800c856:	6165      	str	r5, [r4, #20]
 800c858:	444e      	add	r6, r9
 800c85a:	eba5 0509 	sub.w	r5, r5, r9
 800c85e:	6026      	str	r6, [r4, #0]
 800c860:	60a5      	str	r5, [r4, #8]
 800c862:	463e      	mov	r6, r7
 800c864:	42be      	cmp	r6, r7
 800c866:	d900      	bls.n	800c86a <__ssputs_r+0x86>
 800c868:	463e      	mov	r6, r7
 800c86a:	6820      	ldr	r0, [r4, #0]
 800c86c:	4632      	mov	r2, r6
 800c86e:	4641      	mov	r1, r8
 800c870:	f000 fb5a 	bl	800cf28 <memmove>
 800c874:	68a3      	ldr	r3, [r4, #8]
 800c876:	1b9b      	subs	r3, r3, r6
 800c878:	60a3      	str	r3, [r4, #8]
 800c87a:	6823      	ldr	r3, [r4, #0]
 800c87c:	4433      	add	r3, r6
 800c87e:	6023      	str	r3, [r4, #0]
 800c880:	2000      	movs	r0, #0
 800c882:	e7db      	b.n	800c83c <__ssputs_r+0x58>
 800c884:	462a      	mov	r2, r5
 800c886:	f000 fb75 	bl	800cf74 <_realloc_r>
 800c88a:	4606      	mov	r6, r0
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d1e1      	bne.n	800c854 <__ssputs_r+0x70>
 800c890:	6921      	ldr	r1, [r4, #16]
 800c892:	4650      	mov	r0, sl
 800c894:	f7ff fec6 	bl	800c624 <_free_r>
 800c898:	e7c7      	b.n	800c82a <__ssputs_r+0x46>
	...

0800c89c <_svfiprintf_r>:
 800c89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a0:	4698      	mov	r8, r3
 800c8a2:	898b      	ldrh	r3, [r1, #12]
 800c8a4:	061b      	lsls	r3, r3, #24
 800c8a6:	b09d      	sub	sp, #116	; 0x74
 800c8a8:	4607      	mov	r7, r0
 800c8aa:	460d      	mov	r5, r1
 800c8ac:	4614      	mov	r4, r2
 800c8ae:	d50e      	bpl.n	800c8ce <_svfiprintf_r+0x32>
 800c8b0:	690b      	ldr	r3, [r1, #16]
 800c8b2:	b963      	cbnz	r3, 800c8ce <_svfiprintf_r+0x32>
 800c8b4:	2140      	movs	r1, #64	; 0x40
 800c8b6:	f7ff ff21 	bl	800c6fc <_malloc_r>
 800c8ba:	6028      	str	r0, [r5, #0]
 800c8bc:	6128      	str	r0, [r5, #16]
 800c8be:	b920      	cbnz	r0, 800c8ca <_svfiprintf_r+0x2e>
 800c8c0:	230c      	movs	r3, #12
 800c8c2:	603b      	str	r3, [r7, #0]
 800c8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8c8:	e0d1      	b.n	800ca6e <_svfiprintf_r+0x1d2>
 800c8ca:	2340      	movs	r3, #64	; 0x40
 800c8cc:	616b      	str	r3, [r5, #20]
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c8d2:	2320      	movs	r3, #32
 800c8d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8dc:	2330      	movs	r3, #48	; 0x30
 800c8de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ca88 <_svfiprintf_r+0x1ec>
 800c8e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8e6:	f04f 0901 	mov.w	r9, #1
 800c8ea:	4623      	mov	r3, r4
 800c8ec:	469a      	mov	sl, r3
 800c8ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8f2:	b10a      	cbz	r2, 800c8f8 <_svfiprintf_r+0x5c>
 800c8f4:	2a25      	cmp	r2, #37	; 0x25
 800c8f6:	d1f9      	bne.n	800c8ec <_svfiprintf_r+0x50>
 800c8f8:	ebba 0b04 	subs.w	fp, sl, r4
 800c8fc:	d00b      	beq.n	800c916 <_svfiprintf_r+0x7a>
 800c8fe:	465b      	mov	r3, fp
 800c900:	4622      	mov	r2, r4
 800c902:	4629      	mov	r1, r5
 800c904:	4638      	mov	r0, r7
 800c906:	f7ff ff6d 	bl	800c7e4 <__ssputs_r>
 800c90a:	3001      	adds	r0, #1
 800c90c:	f000 80aa 	beq.w	800ca64 <_svfiprintf_r+0x1c8>
 800c910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c912:	445a      	add	r2, fp
 800c914:	9209      	str	r2, [sp, #36]	; 0x24
 800c916:	f89a 3000 	ldrb.w	r3, [sl]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	f000 80a2 	beq.w	800ca64 <_svfiprintf_r+0x1c8>
 800c920:	2300      	movs	r3, #0
 800c922:	f04f 32ff 	mov.w	r2, #4294967295
 800c926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c92a:	f10a 0a01 	add.w	sl, sl, #1
 800c92e:	9304      	str	r3, [sp, #16]
 800c930:	9307      	str	r3, [sp, #28]
 800c932:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c936:	931a      	str	r3, [sp, #104]	; 0x68
 800c938:	4654      	mov	r4, sl
 800c93a:	2205      	movs	r2, #5
 800c93c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c940:	4851      	ldr	r0, [pc, #324]	; (800ca88 <_svfiprintf_r+0x1ec>)
 800c942:	f7f3 fc75 	bl	8000230 <memchr>
 800c946:	9a04      	ldr	r2, [sp, #16]
 800c948:	b9d8      	cbnz	r0, 800c982 <_svfiprintf_r+0xe6>
 800c94a:	06d0      	lsls	r0, r2, #27
 800c94c:	bf44      	itt	mi
 800c94e:	2320      	movmi	r3, #32
 800c950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c954:	0711      	lsls	r1, r2, #28
 800c956:	bf44      	itt	mi
 800c958:	232b      	movmi	r3, #43	; 0x2b
 800c95a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c95e:	f89a 3000 	ldrb.w	r3, [sl]
 800c962:	2b2a      	cmp	r3, #42	; 0x2a
 800c964:	d015      	beq.n	800c992 <_svfiprintf_r+0xf6>
 800c966:	9a07      	ldr	r2, [sp, #28]
 800c968:	4654      	mov	r4, sl
 800c96a:	2000      	movs	r0, #0
 800c96c:	f04f 0c0a 	mov.w	ip, #10
 800c970:	4621      	mov	r1, r4
 800c972:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c976:	3b30      	subs	r3, #48	; 0x30
 800c978:	2b09      	cmp	r3, #9
 800c97a:	d94e      	bls.n	800ca1a <_svfiprintf_r+0x17e>
 800c97c:	b1b0      	cbz	r0, 800c9ac <_svfiprintf_r+0x110>
 800c97e:	9207      	str	r2, [sp, #28]
 800c980:	e014      	b.n	800c9ac <_svfiprintf_r+0x110>
 800c982:	eba0 0308 	sub.w	r3, r0, r8
 800c986:	fa09 f303 	lsl.w	r3, r9, r3
 800c98a:	4313      	orrs	r3, r2
 800c98c:	9304      	str	r3, [sp, #16]
 800c98e:	46a2      	mov	sl, r4
 800c990:	e7d2      	b.n	800c938 <_svfiprintf_r+0x9c>
 800c992:	9b03      	ldr	r3, [sp, #12]
 800c994:	1d19      	adds	r1, r3, #4
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	9103      	str	r1, [sp, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	bfbb      	ittet	lt
 800c99e:	425b      	neglt	r3, r3
 800c9a0:	f042 0202 	orrlt.w	r2, r2, #2
 800c9a4:	9307      	strge	r3, [sp, #28]
 800c9a6:	9307      	strlt	r3, [sp, #28]
 800c9a8:	bfb8      	it	lt
 800c9aa:	9204      	strlt	r2, [sp, #16]
 800c9ac:	7823      	ldrb	r3, [r4, #0]
 800c9ae:	2b2e      	cmp	r3, #46	; 0x2e
 800c9b0:	d10c      	bne.n	800c9cc <_svfiprintf_r+0x130>
 800c9b2:	7863      	ldrb	r3, [r4, #1]
 800c9b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c9b6:	d135      	bne.n	800ca24 <_svfiprintf_r+0x188>
 800c9b8:	9b03      	ldr	r3, [sp, #12]
 800c9ba:	1d1a      	adds	r2, r3, #4
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	9203      	str	r2, [sp, #12]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	bfb8      	it	lt
 800c9c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9c8:	3402      	adds	r4, #2
 800c9ca:	9305      	str	r3, [sp, #20]
 800c9cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ca98 <_svfiprintf_r+0x1fc>
 800c9d0:	7821      	ldrb	r1, [r4, #0]
 800c9d2:	2203      	movs	r2, #3
 800c9d4:	4650      	mov	r0, sl
 800c9d6:	f7f3 fc2b 	bl	8000230 <memchr>
 800c9da:	b140      	cbz	r0, 800c9ee <_svfiprintf_r+0x152>
 800c9dc:	2340      	movs	r3, #64	; 0x40
 800c9de:	eba0 000a 	sub.w	r0, r0, sl
 800c9e2:	fa03 f000 	lsl.w	r0, r3, r0
 800c9e6:	9b04      	ldr	r3, [sp, #16]
 800c9e8:	4303      	orrs	r3, r0
 800c9ea:	3401      	adds	r4, #1
 800c9ec:	9304      	str	r3, [sp, #16]
 800c9ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9f2:	4826      	ldr	r0, [pc, #152]	; (800ca8c <_svfiprintf_r+0x1f0>)
 800c9f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9f8:	2206      	movs	r2, #6
 800c9fa:	f7f3 fc19 	bl	8000230 <memchr>
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	d038      	beq.n	800ca74 <_svfiprintf_r+0x1d8>
 800ca02:	4b23      	ldr	r3, [pc, #140]	; (800ca90 <_svfiprintf_r+0x1f4>)
 800ca04:	bb1b      	cbnz	r3, 800ca4e <_svfiprintf_r+0x1b2>
 800ca06:	9b03      	ldr	r3, [sp, #12]
 800ca08:	3307      	adds	r3, #7
 800ca0a:	f023 0307 	bic.w	r3, r3, #7
 800ca0e:	3308      	adds	r3, #8
 800ca10:	9303      	str	r3, [sp, #12]
 800ca12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca14:	4433      	add	r3, r6
 800ca16:	9309      	str	r3, [sp, #36]	; 0x24
 800ca18:	e767      	b.n	800c8ea <_svfiprintf_r+0x4e>
 800ca1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca1e:	460c      	mov	r4, r1
 800ca20:	2001      	movs	r0, #1
 800ca22:	e7a5      	b.n	800c970 <_svfiprintf_r+0xd4>
 800ca24:	2300      	movs	r3, #0
 800ca26:	3401      	adds	r4, #1
 800ca28:	9305      	str	r3, [sp, #20]
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	f04f 0c0a 	mov.w	ip, #10
 800ca30:	4620      	mov	r0, r4
 800ca32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca36:	3a30      	subs	r2, #48	; 0x30
 800ca38:	2a09      	cmp	r2, #9
 800ca3a:	d903      	bls.n	800ca44 <_svfiprintf_r+0x1a8>
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d0c5      	beq.n	800c9cc <_svfiprintf_r+0x130>
 800ca40:	9105      	str	r1, [sp, #20]
 800ca42:	e7c3      	b.n	800c9cc <_svfiprintf_r+0x130>
 800ca44:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca48:	4604      	mov	r4, r0
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	e7f0      	b.n	800ca30 <_svfiprintf_r+0x194>
 800ca4e:	ab03      	add	r3, sp, #12
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	462a      	mov	r2, r5
 800ca54:	4b0f      	ldr	r3, [pc, #60]	; (800ca94 <_svfiprintf_r+0x1f8>)
 800ca56:	a904      	add	r1, sp, #16
 800ca58:	4638      	mov	r0, r7
 800ca5a:	f7fd fc5d 	bl	800a318 <_printf_float>
 800ca5e:	1c42      	adds	r2, r0, #1
 800ca60:	4606      	mov	r6, r0
 800ca62:	d1d6      	bne.n	800ca12 <_svfiprintf_r+0x176>
 800ca64:	89ab      	ldrh	r3, [r5, #12]
 800ca66:	065b      	lsls	r3, r3, #25
 800ca68:	f53f af2c 	bmi.w	800c8c4 <_svfiprintf_r+0x28>
 800ca6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca6e:	b01d      	add	sp, #116	; 0x74
 800ca70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca74:	ab03      	add	r3, sp, #12
 800ca76:	9300      	str	r3, [sp, #0]
 800ca78:	462a      	mov	r2, r5
 800ca7a:	4b06      	ldr	r3, [pc, #24]	; (800ca94 <_svfiprintf_r+0x1f8>)
 800ca7c:	a904      	add	r1, sp, #16
 800ca7e:	4638      	mov	r0, r7
 800ca80:	f7fd feee 	bl	800a860 <_printf_i>
 800ca84:	e7eb      	b.n	800ca5e <_svfiprintf_r+0x1c2>
 800ca86:	bf00      	nop
 800ca88:	0800df14 	.word	0x0800df14
 800ca8c:	0800df1e 	.word	0x0800df1e
 800ca90:	0800a319 	.word	0x0800a319
 800ca94:	0800c7e5 	.word	0x0800c7e5
 800ca98:	0800df1a 	.word	0x0800df1a

0800ca9c <__sfputc_r>:
 800ca9c:	6893      	ldr	r3, [r2, #8]
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	b410      	push	{r4}
 800caa4:	6093      	str	r3, [r2, #8]
 800caa6:	da08      	bge.n	800caba <__sfputc_r+0x1e>
 800caa8:	6994      	ldr	r4, [r2, #24]
 800caaa:	42a3      	cmp	r3, r4
 800caac:	db01      	blt.n	800cab2 <__sfputc_r+0x16>
 800caae:	290a      	cmp	r1, #10
 800cab0:	d103      	bne.n	800caba <__sfputc_r+0x1e>
 800cab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cab6:	f7fe b8a7 	b.w	800ac08 <__swbuf_r>
 800caba:	6813      	ldr	r3, [r2, #0]
 800cabc:	1c58      	adds	r0, r3, #1
 800cabe:	6010      	str	r0, [r2, #0]
 800cac0:	7019      	strb	r1, [r3, #0]
 800cac2:	4608      	mov	r0, r1
 800cac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cac8:	4770      	bx	lr

0800caca <__sfputs_r>:
 800caca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cacc:	4606      	mov	r6, r0
 800cace:	460f      	mov	r7, r1
 800cad0:	4614      	mov	r4, r2
 800cad2:	18d5      	adds	r5, r2, r3
 800cad4:	42ac      	cmp	r4, r5
 800cad6:	d101      	bne.n	800cadc <__sfputs_r+0x12>
 800cad8:	2000      	movs	r0, #0
 800cada:	e007      	b.n	800caec <__sfputs_r+0x22>
 800cadc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cae0:	463a      	mov	r2, r7
 800cae2:	4630      	mov	r0, r6
 800cae4:	f7ff ffda 	bl	800ca9c <__sfputc_r>
 800cae8:	1c43      	adds	r3, r0, #1
 800caea:	d1f3      	bne.n	800cad4 <__sfputs_r+0xa>
 800caec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800caf0 <_vfiprintf_r>:
 800caf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf4:	460d      	mov	r5, r1
 800caf6:	b09d      	sub	sp, #116	; 0x74
 800caf8:	4614      	mov	r4, r2
 800cafa:	4698      	mov	r8, r3
 800cafc:	4606      	mov	r6, r0
 800cafe:	b118      	cbz	r0, 800cb08 <_vfiprintf_r+0x18>
 800cb00:	6983      	ldr	r3, [r0, #24]
 800cb02:	b90b      	cbnz	r3, 800cb08 <_vfiprintf_r+0x18>
 800cb04:	f7ff f8d4 	bl	800bcb0 <__sinit>
 800cb08:	4b89      	ldr	r3, [pc, #548]	; (800cd30 <_vfiprintf_r+0x240>)
 800cb0a:	429d      	cmp	r5, r3
 800cb0c:	d11b      	bne.n	800cb46 <_vfiprintf_r+0x56>
 800cb0e:	6875      	ldr	r5, [r6, #4]
 800cb10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb12:	07d9      	lsls	r1, r3, #31
 800cb14:	d405      	bmi.n	800cb22 <_vfiprintf_r+0x32>
 800cb16:	89ab      	ldrh	r3, [r5, #12]
 800cb18:	059a      	lsls	r2, r3, #22
 800cb1a:	d402      	bmi.n	800cb22 <_vfiprintf_r+0x32>
 800cb1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb1e:	f7ff f96a 	bl	800bdf6 <__retarget_lock_acquire_recursive>
 800cb22:	89ab      	ldrh	r3, [r5, #12]
 800cb24:	071b      	lsls	r3, r3, #28
 800cb26:	d501      	bpl.n	800cb2c <_vfiprintf_r+0x3c>
 800cb28:	692b      	ldr	r3, [r5, #16]
 800cb2a:	b9eb      	cbnz	r3, 800cb68 <_vfiprintf_r+0x78>
 800cb2c:	4629      	mov	r1, r5
 800cb2e:	4630      	mov	r0, r6
 800cb30:	f7fe f8bc 	bl	800acac <__swsetup_r>
 800cb34:	b1c0      	cbz	r0, 800cb68 <_vfiprintf_r+0x78>
 800cb36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb38:	07dc      	lsls	r4, r3, #31
 800cb3a:	d50e      	bpl.n	800cb5a <_vfiprintf_r+0x6a>
 800cb3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb40:	b01d      	add	sp, #116	; 0x74
 800cb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb46:	4b7b      	ldr	r3, [pc, #492]	; (800cd34 <_vfiprintf_r+0x244>)
 800cb48:	429d      	cmp	r5, r3
 800cb4a:	d101      	bne.n	800cb50 <_vfiprintf_r+0x60>
 800cb4c:	68b5      	ldr	r5, [r6, #8]
 800cb4e:	e7df      	b.n	800cb10 <_vfiprintf_r+0x20>
 800cb50:	4b79      	ldr	r3, [pc, #484]	; (800cd38 <_vfiprintf_r+0x248>)
 800cb52:	429d      	cmp	r5, r3
 800cb54:	bf08      	it	eq
 800cb56:	68f5      	ldreq	r5, [r6, #12]
 800cb58:	e7da      	b.n	800cb10 <_vfiprintf_r+0x20>
 800cb5a:	89ab      	ldrh	r3, [r5, #12]
 800cb5c:	0598      	lsls	r0, r3, #22
 800cb5e:	d4ed      	bmi.n	800cb3c <_vfiprintf_r+0x4c>
 800cb60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb62:	f7ff f949 	bl	800bdf8 <__retarget_lock_release_recursive>
 800cb66:	e7e9      	b.n	800cb3c <_vfiprintf_r+0x4c>
 800cb68:	2300      	movs	r3, #0
 800cb6a:	9309      	str	r3, [sp, #36]	; 0x24
 800cb6c:	2320      	movs	r3, #32
 800cb6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb72:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb76:	2330      	movs	r3, #48	; 0x30
 800cb78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cd3c <_vfiprintf_r+0x24c>
 800cb7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb80:	f04f 0901 	mov.w	r9, #1
 800cb84:	4623      	mov	r3, r4
 800cb86:	469a      	mov	sl, r3
 800cb88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb8c:	b10a      	cbz	r2, 800cb92 <_vfiprintf_r+0xa2>
 800cb8e:	2a25      	cmp	r2, #37	; 0x25
 800cb90:	d1f9      	bne.n	800cb86 <_vfiprintf_r+0x96>
 800cb92:	ebba 0b04 	subs.w	fp, sl, r4
 800cb96:	d00b      	beq.n	800cbb0 <_vfiprintf_r+0xc0>
 800cb98:	465b      	mov	r3, fp
 800cb9a:	4622      	mov	r2, r4
 800cb9c:	4629      	mov	r1, r5
 800cb9e:	4630      	mov	r0, r6
 800cba0:	f7ff ff93 	bl	800caca <__sfputs_r>
 800cba4:	3001      	adds	r0, #1
 800cba6:	f000 80aa 	beq.w	800ccfe <_vfiprintf_r+0x20e>
 800cbaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbac:	445a      	add	r2, fp
 800cbae:	9209      	str	r2, [sp, #36]	; 0x24
 800cbb0:	f89a 3000 	ldrb.w	r3, [sl]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f000 80a2 	beq.w	800ccfe <_vfiprintf_r+0x20e>
 800cbba:	2300      	movs	r3, #0
 800cbbc:	f04f 32ff 	mov.w	r2, #4294967295
 800cbc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbc4:	f10a 0a01 	add.w	sl, sl, #1
 800cbc8:	9304      	str	r3, [sp, #16]
 800cbca:	9307      	str	r3, [sp, #28]
 800cbcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbd0:	931a      	str	r3, [sp, #104]	; 0x68
 800cbd2:	4654      	mov	r4, sl
 800cbd4:	2205      	movs	r2, #5
 800cbd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbda:	4858      	ldr	r0, [pc, #352]	; (800cd3c <_vfiprintf_r+0x24c>)
 800cbdc:	f7f3 fb28 	bl	8000230 <memchr>
 800cbe0:	9a04      	ldr	r2, [sp, #16]
 800cbe2:	b9d8      	cbnz	r0, 800cc1c <_vfiprintf_r+0x12c>
 800cbe4:	06d1      	lsls	r1, r2, #27
 800cbe6:	bf44      	itt	mi
 800cbe8:	2320      	movmi	r3, #32
 800cbea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbee:	0713      	lsls	r3, r2, #28
 800cbf0:	bf44      	itt	mi
 800cbf2:	232b      	movmi	r3, #43	; 0x2b
 800cbf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbf8:	f89a 3000 	ldrb.w	r3, [sl]
 800cbfc:	2b2a      	cmp	r3, #42	; 0x2a
 800cbfe:	d015      	beq.n	800cc2c <_vfiprintf_r+0x13c>
 800cc00:	9a07      	ldr	r2, [sp, #28]
 800cc02:	4654      	mov	r4, sl
 800cc04:	2000      	movs	r0, #0
 800cc06:	f04f 0c0a 	mov.w	ip, #10
 800cc0a:	4621      	mov	r1, r4
 800cc0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc10:	3b30      	subs	r3, #48	; 0x30
 800cc12:	2b09      	cmp	r3, #9
 800cc14:	d94e      	bls.n	800ccb4 <_vfiprintf_r+0x1c4>
 800cc16:	b1b0      	cbz	r0, 800cc46 <_vfiprintf_r+0x156>
 800cc18:	9207      	str	r2, [sp, #28]
 800cc1a:	e014      	b.n	800cc46 <_vfiprintf_r+0x156>
 800cc1c:	eba0 0308 	sub.w	r3, r0, r8
 800cc20:	fa09 f303 	lsl.w	r3, r9, r3
 800cc24:	4313      	orrs	r3, r2
 800cc26:	9304      	str	r3, [sp, #16]
 800cc28:	46a2      	mov	sl, r4
 800cc2a:	e7d2      	b.n	800cbd2 <_vfiprintf_r+0xe2>
 800cc2c:	9b03      	ldr	r3, [sp, #12]
 800cc2e:	1d19      	adds	r1, r3, #4
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	9103      	str	r1, [sp, #12]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	bfbb      	ittet	lt
 800cc38:	425b      	neglt	r3, r3
 800cc3a:	f042 0202 	orrlt.w	r2, r2, #2
 800cc3e:	9307      	strge	r3, [sp, #28]
 800cc40:	9307      	strlt	r3, [sp, #28]
 800cc42:	bfb8      	it	lt
 800cc44:	9204      	strlt	r2, [sp, #16]
 800cc46:	7823      	ldrb	r3, [r4, #0]
 800cc48:	2b2e      	cmp	r3, #46	; 0x2e
 800cc4a:	d10c      	bne.n	800cc66 <_vfiprintf_r+0x176>
 800cc4c:	7863      	ldrb	r3, [r4, #1]
 800cc4e:	2b2a      	cmp	r3, #42	; 0x2a
 800cc50:	d135      	bne.n	800ccbe <_vfiprintf_r+0x1ce>
 800cc52:	9b03      	ldr	r3, [sp, #12]
 800cc54:	1d1a      	adds	r2, r3, #4
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	9203      	str	r2, [sp, #12]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	bfb8      	it	lt
 800cc5e:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc62:	3402      	adds	r4, #2
 800cc64:	9305      	str	r3, [sp, #20]
 800cc66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cd4c <_vfiprintf_r+0x25c>
 800cc6a:	7821      	ldrb	r1, [r4, #0]
 800cc6c:	2203      	movs	r2, #3
 800cc6e:	4650      	mov	r0, sl
 800cc70:	f7f3 fade 	bl	8000230 <memchr>
 800cc74:	b140      	cbz	r0, 800cc88 <_vfiprintf_r+0x198>
 800cc76:	2340      	movs	r3, #64	; 0x40
 800cc78:	eba0 000a 	sub.w	r0, r0, sl
 800cc7c:	fa03 f000 	lsl.w	r0, r3, r0
 800cc80:	9b04      	ldr	r3, [sp, #16]
 800cc82:	4303      	orrs	r3, r0
 800cc84:	3401      	adds	r4, #1
 800cc86:	9304      	str	r3, [sp, #16]
 800cc88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc8c:	482c      	ldr	r0, [pc, #176]	; (800cd40 <_vfiprintf_r+0x250>)
 800cc8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc92:	2206      	movs	r2, #6
 800cc94:	f7f3 facc 	bl	8000230 <memchr>
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	d03f      	beq.n	800cd1c <_vfiprintf_r+0x22c>
 800cc9c:	4b29      	ldr	r3, [pc, #164]	; (800cd44 <_vfiprintf_r+0x254>)
 800cc9e:	bb1b      	cbnz	r3, 800cce8 <_vfiprintf_r+0x1f8>
 800cca0:	9b03      	ldr	r3, [sp, #12]
 800cca2:	3307      	adds	r3, #7
 800cca4:	f023 0307 	bic.w	r3, r3, #7
 800cca8:	3308      	adds	r3, #8
 800ccaa:	9303      	str	r3, [sp, #12]
 800ccac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccae:	443b      	add	r3, r7
 800ccb0:	9309      	str	r3, [sp, #36]	; 0x24
 800ccb2:	e767      	b.n	800cb84 <_vfiprintf_r+0x94>
 800ccb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccb8:	460c      	mov	r4, r1
 800ccba:	2001      	movs	r0, #1
 800ccbc:	e7a5      	b.n	800cc0a <_vfiprintf_r+0x11a>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	3401      	adds	r4, #1
 800ccc2:	9305      	str	r3, [sp, #20]
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	f04f 0c0a 	mov.w	ip, #10
 800ccca:	4620      	mov	r0, r4
 800cccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccd0:	3a30      	subs	r2, #48	; 0x30
 800ccd2:	2a09      	cmp	r2, #9
 800ccd4:	d903      	bls.n	800ccde <_vfiprintf_r+0x1ee>
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d0c5      	beq.n	800cc66 <_vfiprintf_r+0x176>
 800ccda:	9105      	str	r1, [sp, #20]
 800ccdc:	e7c3      	b.n	800cc66 <_vfiprintf_r+0x176>
 800ccde:	fb0c 2101 	mla	r1, ip, r1, r2
 800cce2:	4604      	mov	r4, r0
 800cce4:	2301      	movs	r3, #1
 800cce6:	e7f0      	b.n	800ccca <_vfiprintf_r+0x1da>
 800cce8:	ab03      	add	r3, sp, #12
 800ccea:	9300      	str	r3, [sp, #0]
 800ccec:	462a      	mov	r2, r5
 800ccee:	4b16      	ldr	r3, [pc, #88]	; (800cd48 <_vfiprintf_r+0x258>)
 800ccf0:	a904      	add	r1, sp, #16
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	f7fd fb10 	bl	800a318 <_printf_float>
 800ccf8:	4607      	mov	r7, r0
 800ccfa:	1c78      	adds	r0, r7, #1
 800ccfc:	d1d6      	bne.n	800ccac <_vfiprintf_r+0x1bc>
 800ccfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd00:	07d9      	lsls	r1, r3, #31
 800cd02:	d405      	bmi.n	800cd10 <_vfiprintf_r+0x220>
 800cd04:	89ab      	ldrh	r3, [r5, #12]
 800cd06:	059a      	lsls	r2, r3, #22
 800cd08:	d402      	bmi.n	800cd10 <_vfiprintf_r+0x220>
 800cd0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd0c:	f7ff f874 	bl	800bdf8 <__retarget_lock_release_recursive>
 800cd10:	89ab      	ldrh	r3, [r5, #12]
 800cd12:	065b      	lsls	r3, r3, #25
 800cd14:	f53f af12 	bmi.w	800cb3c <_vfiprintf_r+0x4c>
 800cd18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd1a:	e711      	b.n	800cb40 <_vfiprintf_r+0x50>
 800cd1c:	ab03      	add	r3, sp, #12
 800cd1e:	9300      	str	r3, [sp, #0]
 800cd20:	462a      	mov	r2, r5
 800cd22:	4b09      	ldr	r3, [pc, #36]	; (800cd48 <_vfiprintf_r+0x258>)
 800cd24:	a904      	add	r1, sp, #16
 800cd26:	4630      	mov	r0, r6
 800cd28:	f7fd fd9a 	bl	800a860 <_printf_i>
 800cd2c:	e7e4      	b.n	800ccf8 <_vfiprintf_r+0x208>
 800cd2e:	bf00      	nop
 800cd30:	0800dd78 	.word	0x0800dd78
 800cd34:	0800dd98 	.word	0x0800dd98
 800cd38:	0800dd58 	.word	0x0800dd58
 800cd3c:	0800df14 	.word	0x0800df14
 800cd40:	0800df1e 	.word	0x0800df1e
 800cd44:	0800a319 	.word	0x0800a319
 800cd48:	0800cacb 	.word	0x0800cacb
 800cd4c:	0800df1a 	.word	0x0800df1a

0800cd50 <_sbrk_r>:
 800cd50:	b538      	push	{r3, r4, r5, lr}
 800cd52:	4d06      	ldr	r5, [pc, #24]	; (800cd6c <_sbrk_r+0x1c>)
 800cd54:	2300      	movs	r3, #0
 800cd56:	4604      	mov	r4, r0
 800cd58:	4608      	mov	r0, r1
 800cd5a:	602b      	str	r3, [r5, #0]
 800cd5c:	f7f6 f80c 	bl	8002d78 <_sbrk>
 800cd60:	1c43      	adds	r3, r0, #1
 800cd62:	d102      	bne.n	800cd6a <_sbrk_r+0x1a>
 800cd64:	682b      	ldr	r3, [r5, #0]
 800cd66:	b103      	cbz	r3, 800cd6a <_sbrk_r+0x1a>
 800cd68:	6023      	str	r3, [r4, #0]
 800cd6a:	bd38      	pop	{r3, r4, r5, pc}
 800cd6c:	20000658 	.word	0x20000658

0800cd70 <__sread>:
 800cd70:	b510      	push	{r4, lr}
 800cd72:	460c      	mov	r4, r1
 800cd74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd78:	f000 f92c 	bl	800cfd4 <_read_r>
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	bfab      	itete	ge
 800cd80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd82:	89a3      	ldrhlt	r3, [r4, #12]
 800cd84:	181b      	addge	r3, r3, r0
 800cd86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd8a:	bfac      	ite	ge
 800cd8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd8e:	81a3      	strhlt	r3, [r4, #12]
 800cd90:	bd10      	pop	{r4, pc}

0800cd92 <__swrite>:
 800cd92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd96:	461f      	mov	r7, r3
 800cd98:	898b      	ldrh	r3, [r1, #12]
 800cd9a:	05db      	lsls	r3, r3, #23
 800cd9c:	4605      	mov	r5, r0
 800cd9e:	460c      	mov	r4, r1
 800cda0:	4616      	mov	r6, r2
 800cda2:	d505      	bpl.n	800cdb0 <__swrite+0x1e>
 800cda4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda8:	2302      	movs	r3, #2
 800cdaa:	2200      	movs	r2, #0
 800cdac:	f000 f898 	bl	800cee0 <_lseek_r>
 800cdb0:	89a3      	ldrh	r3, [r4, #12]
 800cdb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cdba:	81a3      	strh	r3, [r4, #12]
 800cdbc:	4632      	mov	r2, r6
 800cdbe:	463b      	mov	r3, r7
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc6:	f000 b817 	b.w	800cdf8 <_write_r>

0800cdca <__sseek>:
 800cdca:	b510      	push	{r4, lr}
 800cdcc:	460c      	mov	r4, r1
 800cdce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdd2:	f000 f885 	bl	800cee0 <_lseek_r>
 800cdd6:	1c43      	adds	r3, r0, #1
 800cdd8:	89a3      	ldrh	r3, [r4, #12]
 800cdda:	bf15      	itete	ne
 800cddc:	6560      	strne	r0, [r4, #84]	; 0x54
 800cdde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cde2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cde6:	81a3      	strheq	r3, [r4, #12]
 800cde8:	bf18      	it	ne
 800cdea:	81a3      	strhne	r3, [r4, #12]
 800cdec:	bd10      	pop	{r4, pc}

0800cdee <__sclose>:
 800cdee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdf2:	f000 b831 	b.w	800ce58 <_close_r>
	...

0800cdf8 <_write_r>:
 800cdf8:	b538      	push	{r3, r4, r5, lr}
 800cdfa:	4d07      	ldr	r5, [pc, #28]	; (800ce18 <_write_r+0x20>)
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	4608      	mov	r0, r1
 800ce00:	4611      	mov	r1, r2
 800ce02:	2200      	movs	r2, #0
 800ce04:	602a      	str	r2, [r5, #0]
 800ce06:	461a      	mov	r2, r3
 800ce08:	f7f4 fe40 	bl	8001a8c <_write>
 800ce0c:	1c43      	adds	r3, r0, #1
 800ce0e:	d102      	bne.n	800ce16 <_write_r+0x1e>
 800ce10:	682b      	ldr	r3, [r5, #0]
 800ce12:	b103      	cbz	r3, 800ce16 <_write_r+0x1e>
 800ce14:	6023      	str	r3, [r4, #0]
 800ce16:	bd38      	pop	{r3, r4, r5, pc}
 800ce18:	20000658 	.word	0x20000658

0800ce1c <__assert_func>:
 800ce1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce1e:	4614      	mov	r4, r2
 800ce20:	461a      	mov	r2, r3
 800ce22:	4b09      	ldr	r3, [pc, #36]	; (800ce48 <__assert_func+0x2c>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4605      	mov	r5, r0
 800ce28:	68d8      	ldr	r0, [r3, #12]
 800ce2a:	b14c      	cbz	r4, 800ce40 <__assert_func+0x24>
 800ce2c:	4b07      	ldr	r3, [pc, #28]	; (800ce4c <__assert_func+0x30>)
 800ce2e:	9100      	str	r1, [sp, #0]
 800ce30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce34:	4906      	ldr	r1, [pc, #24]	; (800ce50 <__assert_func+0x34>)
 800ce36:	462b      	mov	r3, r5
 800ce38:	f000 f81e 	bl	800ce78 <fiprintf>
 800ce3c:	f000 f8e9 	bl	800d012 <abort>
 800ce40:	4b04      	ldr	r3, [pc, #16]	; (800ce54 <__assert_func+0x38>)
 800ce42:	461c      	mov	r4, r3
 800ce44:	e7f3      	b.n	800ce2e <__assert_func+0x12>
 800ce46:	bf00      	nop
 800ce48:	20000010 	.word	0x20000010
 800ce4c:	0800df25 	.word	0x0800df25
 800ce50:	0800df32 	.word	0x0800df32
 800ce54:	0800df60 	.word	0x0800df60

0800ce58 <_close_r>:
 800ce58:	b538      	push	{r3, r4, r5, lr}
 800ce5a:	4d06      	ldr	r5, [pc, #24]	; (800ce74 <_close_r+0x1c>)
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	4604      	mov	r4, r0
 800ce60:	4608      	mov	r0, r1
 800ce62:	602b      	str	r3, [r5, #0]
 800ce64:	f7f5 ff53 	bl	8002d0e <_close>
 800ce68:	1c43      	adds	r3, r0, #1
 800ce6a:	d102      	bne.n	800ce72 <_close_r+0x1a>
 800ce6c:	682b      	ldr	r3, [r5, #0]
 800ce6e:	b103      	cbz	r3, 800ce72 <_close_r+0x1a>
 800ce70:	6023      	str	r3, [r4, #0]
 800ce72:	bd38      	pop	{r3, r4, r5, pc}
 800ce74:	20000658 	.word	0x20000658

0800ce78 <fiprintf>:
 800ce78:	b40e      	push	{r1, r2, r3}
 800ce7a:	b503      	push	{r0, r1, lr}
 800ce7c:	4601      	mov	r1, r0
 800ce7e:	ab03      	add	r3, sp, #12
 800ce80:	4805      	ldr	r0, [pc, #20]	; (800ce98 <fiprintf+0x20>)
 800ce82:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce86:	6800      	ldr	r0, [r0, #0]
 800ce88:	9301      	str	r3, [sp, #4]
 800ce8a:	f7ff fe31 	bl	800caf0 <_vfiprintf_r>
 800ce8e:	b002      	add	sp, #8
 800ce90:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce94:	b003      	add	sp, #12
 800ce96:	4770      	bx	lr
 800ce98:	20000010 	.word	0x20000010

0800ce9c <_fstat_r>:
 800ce9c:	b538      	push	{r3, r4, r5, lr}
 800ce9e:	4d07      	ldr	r5, [pc, #28]	; (800cebc <_fstat_r+0x20>)
 800cea0:	2300      	movs	r3, #0
 800cea2:	4604      	mov	r4, r0
 800cea4:	4608      	mov	r0, r1
 800cea6:	4611      	mov	r1, r2
 800cea8:	602b      	str	r3, [r5, #0]
 800ceaa:	f7f5 ff3c 	bl	8002d26 <_fstat>
 800ceae:	1c43      	adds	r3, r0, #1
 800ceb0:	d102      	bne.n	800ceb8 <_fstat_r+0x1c>
 800ceb2:	682b      	ldr	r3, [r5, #0]
 800ceb4:	b103      	cbz	r3, 800ceb8 <_fstat_r+0x1c>
 800ceb6:	6023      	str	r3, [r4, #0]
 800ceb8:	bd38      	pop	{r3, r4, r5, pc}
 800ceba:	bf00      	nop
 800cebc:	20000658 	.word	0x20000658

0800cec0 <_isatty_r>:
 800cec0:	b538      	push	{r3, r4, r5, lr}
 800cec2:	4d06      	ldr	r5, [pc, #24]	; (800cedc <_isatty_r+0x1c>)
 800cec4:	2300      	movs	r3, #0
 800cec6:	4604      	mov	r4, r0
 800cec8:	4608      	mov	r0, r1
 800ceca:	602b      	str	r3, [r5, #0]
 800cecc:	f7f5 ff3b 	bl	8002d46 <_isatty>
 800ced0:	1c43      	adds	r3, r0, #1
 800ced2:	d102      	bne.n	800ceda <_isatty_r+0x1a>
 800ced4:	682b      	ldr	r3, [r5, #0]
 800ced6:	b103      	cbz	r3, 800ceda <_isatty_r+0x1a>
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	bd38      	pop	{r3, r4, r5, pc}
 800cedc:	20000658 	.word	0x20000658

0800cee0 <_lseek_r>:
 800cee0:	b538      	push	{r3, r4, r5, lr}
 800cee2:	4d07      	ldr	r5, [pc, #28]	; (800cf00 <_lseek_r+0x20>)
 800cee4:	4604      	mov	r4, r0
 800cee6:	4608      	mov	r0, r1
 800cee8:	4611      	mov	r1, r2
 800ceea:	2200      	movs	r2, #0
 800ceec:	602a      	str	r2, [r5, #0]
 800ceee:	461a      	mov	r2, r3
 800cef0:	f7f5 ff34 	bl	8002d5c <_lseek>
 800cef4:	1c43      	adds	r3, r0, #1
 800cef6:	d102      	bne.n	800cefe <_lseek_r+0x1e>
 800cef8:	682b      	ldr	r3, [r5, #0]
 800cefa:	b103      	cbz	r3, 800cefe <_lseek_r+0x1e>
 800cefc:	6023      	str	r3, [r4, #0]
 800cefe:	bd38      	pop	{r3, r4, r5, pc}
 800cf00:	20000658 	.word	0x20000658

0800cf04 <__ascii_mbtowc>:
 800cf04:	b082      	sub	sp, #8
 800cf06:	b901      	cbnz	r1, 800cf0a <__ascii_mbtowc+0x6>
 800cf08:	a901      	add	r1, sp, #4
 800cf0a:	b142      	cbz	r2, 800cf1e <__ascii_mbtowc+0x1a>
 800cf0c:	b14b      	cbz	r3, 800cf22 <__ascii_mbtowc+0x1e>
 800cf0e:	7813      	ldrb	r3, [r2, #0]
 800cf10:	600b      	str	r3, [r1, #0]
 800cf12:	7812      	ldrb	r2, [r2, #0]
 800cf14:	1e10      	subs	r0, r2, #0
 800cf16:	bf18      	it	ne
 800cf18:	2001      	movne	r0, #1
 800cf1a:	b002      	add	sp, #8
 800cf1c:	4770      	bx	lr
 800cf1e:	4610      	mov	r0, r2
 800cf20:	e7fb      	b.n	800cf1a <__ascii_mbtowc+0x16>
 800cf22:	f06f 0001 	mvn.w	r0, #1
 800cf26:	e7f8      	b.n	800cf1a <__ascii_mbtowc+0x16>

0800cf28 <memmove>:
 800cf28:	4288      	cmp	r0, r1
 800cf2a:	b510      	push	{r4, lr}
 800cf2c:	eb01 0402 	add.w	r4, r1, r2
 800cf30:	d902      	bls.n	800cf38 <memmove+0x10>
 800cf32:	4284      	cmp	r4, r0
 800cf34:	4623      	mov	r3, r4
 800cf36:	d807      	bhi.n	800cf48 <memmove+0x20>
 800cf38:	1e43      	subs	r3, r0, #1
 800cf3a:	42a1      	cmp	r1, r4
 800cf3c:	d008      	beq.n	800cf50 <memmove+0x28>
 800cf3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf46:	e7f8      	b.n	800cf3a <memmove+0x12>
 800cf48:	4402      	add	r2, r0
 800cf4a:	4601      	mov	r1, r0
 800cf4c:	428a      	cmp	r2, r1
 800cf4e:	d100      	bne.n	800cf52 <memmove+0x2a>
 800cf50:	bd10      	pop	{r4, pc}
 800cf52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf5a:	e7f7      	b.n	800cf4c <memmove+0x24>

0800cf5c <__malloc_lock>:
 800cf5c:	4801      	ldr	r0, [pc, #4]	; (800cf64 <__malloc_lock+0x8>)
 800cf5e:	f7fe bf4a 	b.w	800bdf6 <__retarget_lock_acquire_recursive>
 800cf62:	bf00      	nop
 800cf64:	2000064c 	.word	0x2000064c

0800cf68 <__malloc_unlock>:
 800cf68:	4801      	ldr	r0, [pc, #4]	; (800cf70 <__malloc_unlock+0x8>)
 800cf6a:	f7fe bf45 	b.w	800bdf8 <__retarget_lock_release_recursive>
 800cf6e:	bf00      	nop
 800cf70:	2000064c 	.word	0x2000064c

0800cf74 <_realloc_r>:
 800cf74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf78:	4680      	mov	r8, r0
 800cf7a:	4614      	mov	r4, r2
 800cf7c:	460e      	mov	r6, r1
 800cf7e:	b921      	cbnz	r1, 800cf8a <_realloc_r+0x16>
 800cf80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf84:	4611      	mov	r1, r2
 800cf86:	f7ff bbb9 	b.w	800c6fc <_malloc_r>
 800cf8a:	b92a      	cbnz	r2, 800cf98 <_realloc_r+0x24>
 800cf8c:	f7ff fb4a 	bl	800c624 <_free_r>
 800cf90:	4625      	mov	r5, r4
 800cf92:	4628      	mov	r0, r5
 800cf94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf98:	f000 f842 	bl	800d020 <_malloc_usable_size_r>
 800cf9c:	4284      	cmp	r4, r0
 800cf9e:	4607      	mov	r7, r0
 800cfa0:	d802      	bhi.n	800cfa8 <_realloc_r+0x34>
 800cfa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cfa6:	d812      	bhi.n	800cfce <_realloc_r+0x5a>
 800cfa8:	4621      	mov	r1, r4
 800cfaa:	4640      	mov	r0, r8
 800cfac:	f7ff fba6 	bl	800c6fc <_malloc_r>
 800cfb0:	4605      	mov	r5, r0
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	d0ed      	beq.n	800cf92 <_realloc_r+0x1e>
 800cfb6:	42bc      	cmp	r4, r7
 800cfb8:	4622      	mov	r2, r4
 800cfba:	4631      	mov	r1, r6
 800cfbc:	bf28      	it	cs
 800cfbe:	463a      	movcs	r2, r7
 800cfc0:	f7fe ff88 	bl	800bed4 <memcpy>
 800cfc4:	4631      	mov	r1, r6
 800cfc6:	4640      	mov	r0, r8
 800cfc8:	f7ff fb2c 	bl	800c624 <_free_r>
 800cfcc:	e7e1      	b.n	800cf92 <_realloc_r+0x1e>
 800cfce:	4635      	mov	r5, r6
 800cfd0:	e7df      	b.n	800cf92 <_realloc_r+0x1e>
	...

0800cfd4 <_read_r>:
 800cfd4:	b538      	push	{r3, r4, r5, lr}
 800cfd6:	4d07      	ldr	r5, [pc, #28]	; (800cff4 <_read_r+0x20>)
 800cfd8:	4604      	mov	r4, r0
 800cfda:	4608      	mov	r0, r1
 800cfdc:	4611      	mov	r1, r2
 800cfde:	2200      	movs	r2, #0
 800cfe0:	602a      	str	r2, [r5, #0]
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	f7f5 fe76 	bl	8002cd4 <_read>
 800cfe8:	1c43      	adds	r3, r0, #1
 800cfea:	d102      	bne.n	800cff2 <_read_r+0x1e>
 800cfec:	682b      	ldr	r3, [r5, #0]
 800cfee:	b103      	cbz	r3, 800cff2 <_read_r+0x1e>
 800cff0:	6023      	str	r3, [r4, #0]
 800cff2:	bd38      	pop	{r3, r4, r5, pc}
 800cff4:	20000658 	.word	0x20000658

0800cff8 <__ascii_wctomb>:
 800cff8:	b149      	cbz	r1, 800d00e <__ascii_wctomb+0x16>
 800cffa:	2aff      	cmp	r2, #255	; 0xff
 800cffc:	bf85      	ittet	hi
 800cffe:	238a      	movhi	r3, #138	; 0x8a
 800d000:	6003      	strhi	r3, [r0, #0]
 800d002:	700a      	strbls	r2, [r1, #0]
 800d004:	f04f 30ff 	movhi.w	r0, #4294967295
 800d008:	bf98      	it	ls
 800d00a:	2001      	movls	r0, #1
 800d00c:	4770      	bx	lr
 800d00e:	4608      	mov	r0, r1
 800d010:	4770      	bx	lr

0800d012 <abort>:
 800d012:	b508      	push	{r3, lr}
 800d014:	2006      	movs	r0, #6
 800d016:	f000 f833 	bl	800d080 <raise>
 800d01a:	2001      	movs	r0, #1
 800d01c:	f7f5 fe50 	bl	8002cc0 <_exit>

0800d020 <_malloc_usable_size_r>:
 800d020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d024:	1f18      	subs	r0, r3, #4
 800d026:	2b00      	cmp	r3, #0
 800d028:	bfbc      	itt	lt
 800d02a:	580b      	ldrlt	r3, [r1, r0]
 800d02c:	18c0      	addlt	r0, r0, r3
 800d02e:	4770      	bx	lr

0800d030 <_raise_r>:
 800d030:	291f      	cmp	r1, #31
 800d032:	b538      	push	{r3, r4, r5, lr}
 800d034:	4604      	mov	r4, r0
 800d036:	460d      	mov	r5, r1
 800d038:	d904      	bls.n	800d044 <_raise_r+0x14>
 800d03a:	2316      	movs	r3, #22
 800d03c:	6003      	str	r3, [r0, #0]
 800d03e:	f04f 30ff 	mov.w	r0, #4294967295
 800d042:	bd38      	pop	{r3, r4, r5, pc}
 800d044:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d046:	b112      	cbz	r2, 800d04e <_raise_r+0x1e>
 800d048:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d04c:	b94b      	cbnz	r3, 800d062 <_raise_r+0x32>
 800d04e:	4620      	mov	r0, r4
 800d050:	f000 f830 	bl	800d0b4 <_getpid_r>
 800d054:	462a      	mov	r2, r5
 800d056:	4601      	mov	r1, r0
 800d058:	4620      	mov	r0, r4
 800d05a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d05e:	f000 b817 	b.w	800d090 <_kill_r>
 800d062:	2b01      	cmp	r3, #1
 800d064:	d00a      	beq.n	800d07c <_raise_r+0x4c>
 800d066:	1c59      	adds	r1, r3, #1
 800d068:	d103      	bne.n	800d072 <_raise_r+0x42>
 800d06a:	2316      	movs	r3, #22
 800d06c:	6003      	str	r3, [r0, #0]
 800d06e:	2001      	movs	r0, #1
 800d070:	e7e7      	b.n	800d042 <_raise_r+0x12>
 800d072:	2400      	movs	r4, #0
 800d074:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d078:	4628      	mov	r0, r5
 800d07a:	4798      	blx	r3
 800d07c:	2000      	movs	r0, #0
 800d07e:	e7e0      	b.n	800d042 <_raise_r+0x12>

0800d080 <raise>:
 800d080:	4b02      	ldr	r3, [pc, #8]	; (800d08c <raise+0xc>)
 800d082:	4601      	mov	r1, r0
 800d084:	6818      	ldr	r0, [r3, #0]
 800d086:	f7ff bfd3 	b.w	800d030 <_raise_r>
 800d08a:	bf00      	nop
 800d08c:	20000010 	.word	0x20000010

0800d090 <_kill_r>:
 800d090:	b538      	push	{r3, r4, r5, lr}
 800d092:	4d07      	ldr	r5, [pc, #28]	; (800d0b0 <_kill_r+0x20>)
 800d094:	2300      	movs	r3, #0
 800d096:	4604      	mov	r4, r0
 800d098:	4608      	mov	r0, r1
 800d09a:	4611      	mov	r1, r2
 800d09c:	602b      	str	r3, [r5, #0]
 800d09e:	f7f5 fdff 	bl	8002ca0 <_kill>
 800d0a2:	1c43      	adds	r3, r0, #1
 800d0a4:	d102      	bne.n	800d0ac <_kill_r+0x1c>
 800d0a6:	682b      	ldr	r3, [r5, #0]
 800d0a8:	b103      	cbz	r3, 800d0ac <_kill_r+0x1c>
 800d0aa:	6023      	str	r3, [r4, #0]
 800d0ac:	bd38      	pop	{r3, r4, r5, pc}
 800d0ae:	bf00      	nop
 800d0b0:	20000658 	.word	0x20000658

0800d0b4 <_getpid_r>:
 800d0b4:	f7f5 bdec 	b.w	8002c90 <_getpid>

0800d0b8 <sqrt>:
 800d0b8:	b538      	push	{r3, r4, r5, lr}
 800d0ba:	ed2d 8b02 	vpush	{d8}
 800d0be:	ec55 4b10 	vmov	r4, r5, d0
 800d0c2:	f000 f825 	bl	800d110 <__ieee754_sqrt>
 800d0c6:	4622      	mov	r2, r4
 800d0c8:	462b      	mov	r3, r5
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	4629      	mov	r1, r5
 800d0ce:	eeb0 8a40 	vmov.f32	s16, s0
 800d0d2:	eef0 8a60 	vmov.f32	s17, s1
 800d0d6:	f7f3 fd51 	bl	8000b7c <__aeabi_dcmpun>
 800d0da:	b990      	cbnz	r0, 800d102 <sqrt+0x4a>
 800d0dc:	2200      	movs	r2, #0
 800d0de:	2300      	movs	r3, #0
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	4629      	mov	r1, r5
 800d0e4:	f7f3 fd22 	bl	8000b2c <__aeabi_dcmplt>
 800d0e8:	b158      	cbz	r0, 800d102 <sqrt+0x4a>
 800d0ea:	f7fd f82f 	bl	800a14c <__errno>
 800d0ee:	2321      	movs	r3, #33	; 0x21
 800d0f0:	6003      	str	r3, [r0, #0]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	4610      	mov	r0, r2
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	f7f3 fbcf 	bl	800089c <__aeabi_ddiv>
 800d0fe:	ec41 0b18 	vmov	d8, r0, r1
 800d102:	eeb0 0a48 	vmov.f32	s0, s16
 800d106:	eef0 0a68 	vmov.f32	s1, s17
 800d10a:	ecbd 8b02 	vpop	{d8}
 800d10e:	bd38      	pop	{r3, r4, r5, pc}

0800d110 <__ieee754_sqrt>:
 800d110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d114:	ec55 4b10 	vmov	r4, r5, d0
 800d118:	4e55      	ldr	r6, [pc, #340]	; (800d270 <__ieee754_sqrt+0x160>)
 800d11a:	43ae      	bics	r6, r5
 800d11c:	ee10 0a10 	vmov	r0, s0
 800d120:	ee10 3a10 	vmov	r3, s0
 800d124:	462a      	mov	r2, r5
 800d126:	4629      	mov	r1, r5
 800d128:	d110      	bne.n	800d14c <__ieee754_sqrt+0x3c>
 800d12a:	ee10 2a10 	vmov	r2, s0
 800d12e:	462b      	mov	r3, r5
 800d130:	f7f3 fa8a 	bl	8000648 <__aeabi_dmul>
 800d134:	4602      	mov	r2, r0
 800d136:	460b      	mov	r3, r1
 800d138:	4620      	mov	r0, r4
 800d13a:	4629      	mov	r1, r5
 800d13c:	f7f3 f8ce 	bl	80002dc <__adddf3>
 800d140:	4604      	mov	r4, r0
 800d142:	460d      	mov	r5, r1
 800d144:	ec45 4b10 	vmov	d0, r4, r5
 800d148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d14c:	2d00      	cmp	r5, #0
 800d14e:	dc10      	bgt.n	800d172 <__ieee754_sqrt+0x62>
 800d150:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d154:	4330      	orrs	r0, r6
 800d156:	d0f5      	beq.n	800d144 <__ieee754_sqrt+0x34>
 800d158:	b15d      	cbz	r5, 800d172 <__ieee754_sqrt+0x62>
 800d15a:	ee10 2a10 	vmov	r2, s0
 800d15e:	462b      	mov	r3, r5
 800d160:	ee10 0a10 	vmov	r0, s0
 800d164:	f7f3 f8b8 	bl	80002d8 <__aeabi_dsub>
 800d168:	4602      	mov	r2, r0
 800d16a:	460b      	mov	r3, r1
 800d16c:	f7f3 fb96 	bl	800089c <__aeabi_ddiv>
 800d170:	e7e6      	b.n	800d140 <__ieee754_sqrt+0x30>
 800d172:	1512      	asrs	r2, r2, #20
 800d174:	d074      	beq.n	800d260 <__ieee754_sqrt+0x150>
 800d176:	07d4      	lsls	r4, r2, #31
 800d178:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d17c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d180:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d184:	bf5e      	ittt	pl
 800d186:	0fda      	lsrpl	r2, r3, #31
 800d188:	005b      	lslpl	r3, r3, #1
 800d18a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d18e:	2400      	movs	r4, #0
 800d190:	0fda      	lsrs	r2, r3, #31
 800d192:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d196:	107f      	asrs	r7, r7, #1
 800d198:	005b      	lsls	r3, r3, #1
 800d19a:	2516      	movs	r5, #22
 800d19c:	4620      	mov	r0, r4
 800d19e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d1a2:	1886      	adds	r6, r0, r2
 800d1a4:	428e      	cmp	r6, r1
 800d1a6:	bfde      	ittt	le
 800d1a8:	1b89      	suble	r1, r1, r6
 800d1aa:	18b0      	addle	r0, r6, r2
 800d1ac:	18a4      	addle	r4, r4, r2
 800d1ae:	0049      	lsls	r1, r1, #1
 800d1b0:	3d01      	subs	r5, #1
 800d1b2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d1b6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d1ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d1be:	d1f0      	bne.n	800d1a2 <__ieee754_sqrt+0x92>
 800d1c0:	462a      	mov	r2, r5
 800d1c2:	f04f 0e20 	mov.w	lr, #32
 800d1c6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d1ca:	4281      	cmp	r1, r0
 800d1cc:	eb06 0c05 	add.w	ip, r6, r5
 800d1d0:	dc02      	bgt.n	800d1d8 <__ieee754_sqrt+0xc8>
 800d1d2:	d113      	bne.n	800d1fc <__ieee754_sqrt+0xec>
 800d1d4:	459c      	cmp	ip, r3
 800d1d6:	d811      	bhi.n	800d1fc <__ieee754_sqrt+0xec>
 800d1d8:	f1bc 0f00 	cmp.w	ip, #0
 800d1dc:	eb0c 0506 	add.w	r5, ip, r6
 800d1e0:	da43      	bge.n	800d26a <__ieee754_sqrt+0x15a>
 800d1e2:	2d00      	cmp	r5, #0
 800d1e4:	db41      	blt.n	800d26a <__ieee754_sqrt+0x15a>
 800d1e6:	f100 0801 	add.w	r8, r0, #1
 800d1ea:	1a09      	subs	r1, r1, r0
 800d1ec:	459c      	cmp	ip, r3
 800d1ee:	bf88      	it	hi
 800d1f0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800d1f4:	eba3 030c 	sub.w	r3, r3, ip
 800d1f8:	4432      	add	r2, r6
 800d1fa:	4640      	mov	r0, r8
 800d1fc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d200:	f1be 0e01 	subs.w	lr, lr, #1
 800d204:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d208:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d20c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d210:	d1db      	bne.n	800d1ca <__ieee754_sqrt+0xba>
 800d212:	430b      	orrs	r3, r1
 800d214:	d006      	beq.n	800d224 <__ieee754_sqrt+0x114>
 800d216:	1c50      	adds	r0, r2, #1
 800d218:	bf13      	iteet	ne
 800d21a:	3201      	addne	r2, #1
 800d21c:	3401      	addeq	r4, #1
 800d21e:	4672      	moveq	r2, lr
 800d220:	f022 0201 	bicne.w	r2, r2, #1
 800d224:	1063      	asrs	r3, r4, #1
 800d226:	0852      	lsrs	r2, r2, #1
 800d228:	07e1      	lsls	r1, r4, #31
 800d22a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d22e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d232:	bf48      	it	mi
 800d234:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d238:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d23c:	4614      	mov	r4, r2
 800d23e:	e781      	b.n	800d144 <__ieee754_sqrt+0x34>
 800d240:	0ad9      	lsrs	r1, r3, #11
 800d242:	3815      	subs	r0, #21
 800d244:	055b      	lsls	r3, r3, #21
 800d246:	2900      	cmp	r1, #0
 800d248:	d0fa      	beq.n	800d240 <__ieee754_sqrt+0x130>
 800d24a:	02cd      	lsls	r5, r1, #11
 800d24c:	d50a      	bpl.n	800d264 <__ieee754_sqrt+0x154>
 800d24e:	f1c2 0420 	rsb	r4, r2, #32
 800d252:	fa23 f404 	lsr.w	r4, r3, r4
 800d256:	1e55      	subs	r5, r2, #1
 800d258:	4093      	lsls	r3, r2
 800d25a:	4321      	orrs	r1, r4
 800d25c:	1b42      	subs	r2, r0, r5
 800d25e:	e78a      	b.n	800d176 <__ieee754_sqrt+0x66>
 800d260:	4610      	mov	r0, r2
 800d262:	e7f0      	b.n	800d246 <__ieee754_sqrt+0x136>
 800d264:	0049      	lsls	r1, r1, #1
 800d266:	3201      	adds	r2, #1
 800d268:	e7ef      	b.n	800d24a <__ieee754_sqrt+0x13a>
 800d26a:	4680      	mov	r8, r0
 800d26c:	e7bd      	b.n	800d1ea <__ieee754_sqrt+0xda>
 800d26e:	bf00      	nop
 800d270:	7ff00000 	.word	0x7ff00000

0800d274 <_init>:
 800d274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d276:	bf00      	nop
 800d278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d27a:	bc08      	pop	{r3}
 800d27c:	469e      	mov	lr, r3
 800d27e:	4770      	bx	lr

0800d280 <_fini>:
 800d280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d282:	bf00      	nop
 800d284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d286:	bc08      	pop	{r3}
 800d288:	469e      	mov	lr, r3
 800d28a:	4770      	bx	lr
